Index: src/main/java/parser/JLUParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport Common\r\nimport bean.Course\r\nimport com.google.gson.Gson\r\nimport main.java.bean.JLUCourseInfo\r\nimport parser.Parser\r\n\r\n/**\r\n * 吉林大学研究生教务系统\r\n */\r\nclass JLUParser(source:String):Parser(source) {\r\n    override fun generateCourseList(): List<Course> {\r\n        val result = arrayListOf<Course>()\r\n        val gson = Gson()\r\n        val json = gson.fromJson(source, JLUCourseInfo::class.java)\r\n        val rows = json.datas.xsjxrwcx.rows\r\n        val multiWeekPattern = \"\"\"(\\d+)(?:-(\\d+))?([单双]?)周\"\"\".toRegex()\r\n        val dayOfWeekPattern = \"\"\"(星期[一二三四五六日七])\"\"\".toRegex()\r\n        val nodePattern = \"\"\"(\\d+)(?:-(\\d+))?节\"\"\".toRegex()\r\n        val locationPattern = \"\"\"节](.+)\"\"\".toRegex()\r\n        for (row in rows) {\r\n            if (row.PKSJDD==null)\r\n                continue\r\n        val courseStrings = row.PKSJDD.split(\";\")\r\n        // 遍历每个课程字符串并提取信息 courseStrings [3-4周 星期一[1-4节]新民-第一教学楼-101, 5周 星期一[1-4节]新民-第一教学楼-101]\r\n        for (courseString in courseStrings) {\r\n                 // ”3-5单周,7-12周 星期二[1-4节]“ 应对此类情况\r\n                val multiWeekResult = multiWeekPattern.findAll(courseString)\r\n                val dayOfWeekMatchResult = dayOfWeekPattern.find(courseString)\r\n                val nodeMatchResult = nodePattern.find(courseString)\r\n                val locationMatchResult = locationPattern.find(courseString)\r\n\r\n                if (dayOfWeekMatchResult != null && nodeMatchResult!=null){\r\n                    val dayOfWeek = dayOfWeekMatchResult.value\r\n                    val (startSection, endSection) = nodeMatchResult.destructured\r\n                    var location = \"\"\r\n                    if (locationMatchResult != null) {\r\n                        location = locationMatchResult.value.replace(\"节]\", \"\")\r\n                    }\r\n                    multiWeekResult.forEach {\r\n                        val (startWeek, endWeek, oddEvenWeek) = it.destructured\r\n                        val course = createCourse(row, dayOfWeek, location, startSection, endSection, startWeek, endWeek, oddEvenWeek)\r\n                        result.add(course)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n\r\n    private fun createCourse(\r\n        row: JLUCourseInfo.Datas.Xsjxrwcx.Row, // 请替换为正确的行类型\r\n        dayOfWeek: String,\r\n        location: String,\r\n        startSection: String,\r\n        endSection: String,\r\n        startWeek: String,\r\n        endWeek: String,\r\n        oddEvenWeek: String\r\n    ): Course {\r\n        return  Course(\r\n            name = row.KCMC,\r\n            day = Common.getDayInt(dayOfWeek),\r\n            room = location,\r\n            teacher = row.RKJS,\r\n            startNode = startSection.toInt(),\r\n            endNode = if (endSection.isEmpty()) startSection.toInt() else endSection.toInt(),\r\n            startWeek = startWeek.toInt(),\r\n            endWeek = if (endWeek.isEmpty()) startWeek.toInt() else endWeek.toInt(),\r\n            type = when(oddEvenWeek){\r\n                \"\" -> 0\r\n                \"单\" -> 1\r\n                \"双\" -> 2\r\n                else -> 0\r\n            }\r\n        )\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/JLUParser.kt b/src/main/java/parser/JLUParser.kt
--- a/src/main/java/parser/JLUParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/JLUParser.kt	(date 1745507183540)
@@ -9,7 +9,7 @@
 /**
  * 吉林大学研究生教务系统
  */
-class JLUParser(source:String):Parser(source) {
+class JLUParser(source:String):Parser() {
     override fun generateCourseList(): List<Course> {
         val result = arrayListOf<Course>()
         val gson = Gson()
@@ -74,7 +74,7 @@
                 "单" -> 1
                 "双" -> 2
                 else -> 0
-            }
+            },
         )
     }
 }
\ No newline at end of file
Index: src/main/java/parser/GZHUYJSParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\n\r\nclass GZHUYJSParser(source: String) : Parser(source) {\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val doc = Jsoup.parse(source)\r\n        val kbtable = doc.select(\"table[class=tab_0]\").first() //课表table\r\n        val kcb = kbtable.getElementsByTag(\"tbody\").first()\r\n        var i = 0\r\n        for (tr in kcb.getElementsByTag(\"tr\")) {\r\n            i = i + 1\r\n            if (i == 5 || i == 6 || i == 7) {\r\n                var j = 0\r\n                for (td in tr.getElementsByTag(\"td\")) {\r\n                    j = j + 1\r\n                    if (j > 1 && j < 9) {\r\n                        for (div in td.getElementsByTag(\"div\")) {\r\n                            var courseName = \"\"\r\n                            var startWeek = 1\r\n                            var endWeek = 16\r\n                            var startNode = 1\r\n                            var endNode = 2\r\n                            val type = 0\r\n                            val day = j - 1\r\n                            var room = \"\"\r\n                            var teacher = \"\"\r\n                            val courseInfo = div.html().split(\"<br>\")\r\n                            if (courseInfo.isEmpty()) continue\r\n                            courseName = courseInfo[0].trim()\r\n                            teacher = courseInfo[3].trim()\r\n                            room = courseInfo[5].trim()\r\n                            startWeek = courseInfo[4].substringBefore('-').trim().toInt()\r\n                            endWeek = courseInfo[4].substringAfter('-').substringBefore('周').trim().toInt()\r\n                            startNode = courseInfo[4].substringAfter(\"周 \").substringBefore('到').trim().toInt()\r\n                            endNode = courseInfo[4].substringAfter('到').substringBefore('小').trim().toInt()\r\n                            courseList.add(\r\n                                Course(\r\n                                    name = courseName, day = day, room = room,\r\n                                    teacher = teacher, startNode = startNode,\r\n                                    endNode = endNode, startWeek = startWeek,\r\n                                    endWeek = endWeek, type = type\r\n                                )\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return courseList;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/GZHUYJSParser.kt b/src/main/java/parser/GZHUYJSParser.kt
--- a/src/main/java/parser/GZHUYJSParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/GZHUYJSParser.kt	(date 1745507183579)
@@ -4,7 +4,7 @@
 import org.jsoup.Jsoup
 import parser.Parser
 
-class GZHUYJSParser(source: String) : Parser(source) {
+class GZHUYJSParser(source: String) : Parser() {
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
         val doc = Jsoup.parse(source)
@@ -42,7 +42,7 @@
                                     name = courseName, day = day, room = room,
                                     teacher = teacher, startNode = startNode,
                                     endNode = endNode, startWeek = startWeek,
-                                    endWeek = endWeek, type = type
+                                    endWeek = endWeek, type = type,
                                 )
                             )
                         }
Index: src/main/java/parser/HUSTParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport Common.getDayInt\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\nimport java.io.IOException\r\n\r\n/**\r\n * Created by [Xeu](https://github.com/ThankRain) at 2021/8/12 14:50\r\n *\r\n * Fixed by [GoForceX](https://github.com/GoForceX) at 2024/12/1 17:30\r\n *\r\n * 华中科技大学微校园\r\n * @link https://mhub.hust.edu.cn/kbPageController/by-course\r\n */\r\nclass HUSTParser(source: String) : Parser(source = source) {\r\n    override fun generateCourseList(): List<Course> {\r\n        val doc = Jsoup.parse(source)\r\n        val list = doc.getElementsByClass(\"main-page-block\").first() // Get Course List\r\n        val courses: MutableList<Course> = mutableListOf()\r\n        list.children().toList().forEach { it ->\r\n            val raws = it.getElementsByTag(\"p\")\r\n            if (raws.size < 3) {\r\n                throw IOException(\"课表格式有误:段落不足\")\r\n            }\r\n            val courseName = raws[0].text()\r\n\r\n            val courseObject = raws[2].text()// 开课对象\r\n            val timeArranges = it.getElementsByClass(\"search-details-body\")\r\n            timeArranges.forEach { timeArrange ->\r\n                timeArrange.children().forEach { it ->\r\n                    val texts = it.getElementsByClass(\"text-box\")\r\n                    val time = texts[0].text().run {\r\n                        val start = \"时间:\"\r\n                        substring(indexOf(start) + start.length).split(\" \")\r\n                    }\r\n                    val weeks = time[0]// 周次\r\n                    val day = time[1]// 星期\r\n                    val times = time[2]// 节次\r\n\r\n                    val teacher = texts[1].text().run {\r\n                        val start = \"教师:\"\r\n                        substring(indexOf(start) + start.length)\r\n                    }\r\n\r\n                    val place = texts[2].text().run {\r\n                        val start = \"教室:\"\r\n                        substring(indexOf(start) + start.length)\r\n                    }\r\n\r\n                    val startWeek = weeks.run { substring(0, indexOf(\"-\")) }.toInt()\r\n                    val endWeek = weeks.run { substring(indexOf(\"-\") + 1, indexOf(\"周\")) }.toInt()\r\n                    val startNode = times.run { substring(0, indexOf(\"-\")) }.toInt()\r\n                    val endNode = times.run { substring(indexOf(\"-\") + 1, indexOf(\"节\")) }.toInt()\r\n                    courses.add(\r\n                        Course(\r\n                            name = courseName,\r\n                            day = getDayInt(day),\r\n                            room = place,\r\n                            teacher = teacher,\r\n                            startNode = startNode,\r\n                            endNode = endNode,\r\n                            startWeek = startWeek,\r\n                            endWeek = endWeek,\r\n                            type = 0,\r\n                            note = \"开课对象：$courseObject\"\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        return courses\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/HUSTParser.kt b/src/main/java/parser/HUSTParser.kt
--- a/src/main/java/parser/HUSTParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/HUSTParser.kt	(date 1745507183796)
@@ -14,7 +14,7 @@
  * 华中科技大学微校园
  * @link https://mhub.hust.edu.cn/kbPageController/by-course
  */
-class HUSTParser(source: String) : Parser(source = source) {
+class HUSTParser(source: String) : Parser() {
     override fun generateCourseList(): List<Course> {
         val doc = Jsoup.parse(source)
         val list = doc.getElementsByClass("main-page-block").first() // Get Course List
@@ -64,7 +64,7 @@
                             startWeek = startWeek,
                             endWeek = endWeek,
                             type = 0,
-                            note = "开课对象：$courseObject"
+                            note = "开课对象：$courseObject",
                         )
                     )
                 }
Index: src/main/java/parser/PekingParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport Common\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\n\r\n// 北大\r\nclass PekingParser(source: String) : Parser(source) {\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val doc = Jsoup.parse(source)\r\n        val kbtable = doc.select(\"table[class=datagrid]\").first()\r\n        val tBody = kbtable.getElementsByTag(\"tbody\").first()\r\n        var teacher = \"\"\r\n        for (tr in tBody.getElementsByTag(\"tr\")) {\r\n            val tds = tr.getElementsByTag(\"td\")\r\n            if (tds.size >= 11) {\r\n                if (tds[8].text().contains('未'))\r\n                    continue\r\n                val courseName = tds[0].text().trim()\r\n                teacher = tds[4].text().trim()\r\n                val timeInfos = tds[7].html().split(\"<br>\")\r\n                var startWeek = 1\r\n                var endWeek = 16\r\n                var startNode = 1\r\n                var endNode = 2\r\n                var type = 0\r\n                var day = 7\r\n                timeInfos.forEach {\r\n                    val timeInfo = Jsoup.parse(it).text().trim().split(' ')\r\n                    if (timeInfo.size >= 2) {\r\n                        if (timeInfo[0].contains('~')) {\r\n                            startWeek = timeInfo[0].substringBefore('~').toInt()\r\n                            endWeek = timeInfo[0].substringAfter('~').substringBefore('周').toInt()\r\n                        }\r\n                        type = when {\r\n                            timeInfo[1].contains('单') -> 1\r\n                            timeInfo[1].contains('双') -> 2\r\n                            else -> 0\r\n                        }\r\n                        Common.chineseWeekList.forEachIndexed { index, s ->\r\n                            if (index != 0) {\r\n                                if (timeInfo[1].contains(s)) {\r\n                                    day = index\r\n                                    return@forEachIndexed\r\n                                }\r\n                            }\r\n                        }\r\n                        val matchResult = Common.nodePattern1.find(timeInfo[1])\r\n                        if (matchResult != null) {\r\n                            val m = matchResult.value\r\n                            startNode = m.substringBefore('~').toInt()\r\n                            endNode = m.substringAfter('~').substringBefore('节').toInt()\r\n                        }\r\n                        val room = if (timeInfo.size >= 3) {\r\n                            timeInfo[2]\r\n                        } else {\r\n                            timeInfo[1].substringAfter('(').substringBefore(')')\r\n                        }\r\n                        courseList.add(\r\n                            Course(\r\n                                name = courseName, day = day, room = room,\r\n                                teacher = teacher, startNode = startNode,\r\n                                endNode = endNode, startWeek = startWeek,\r\n                                endWeek = endWeek, type = type\r\n                            )\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/PekingParser.kt b/src/main/java/parser/PekingParser.kt
--- a/src/main/java/parser/PekingParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/PekingParser.kt	(date 1745507183792)
@@ -5,7 +5,7 @@
 import org.jsoup.Jsoup
 
 // 北大
-class PekingParser(source: String) : Parser(source) {
+class PekingParser(source: String) : Parser() {
 
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
@@ -63,7 +63,7 @@
                                 name = courseName, day = day, room = room,
                                 teacher = teacher, startNode = startNode,
                                 endNode = endNode, startWeek = startWeek,
-                                endWeek = endWeek, type = type
+                                endWeek = endWeek, type = type,
                             )
                         )
                     }
Index: src/main/java/parser/RUCParser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser;\r\n\r\nimport bean.Course;\r\nimport main.java.bean.TimeDetail;\r\nimport main.java.bean.TimeTable;\r\nimport org.jetbrains.annotations.NotNull;\r\nimport org.jetbrains.annotations.Nullable;\r\nimport parser.CSVParser;\r\nimport parser.Parser;\r\n\r\nimport java.util.*;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\nimport java.util.regex.PatternSyntaxException;\r\nimport java.util.stream.Collectors;\r\nimport java.util.stream.Stream;\r\n\r\n//This class depends on the CSVParser class! The csv generation code is basically translated from https://mp.weixin.qq.com/s/7w9TG3nZbu85pRQ5SeGZEA .\r\n\r\n//This implement does not depend on jsoup, and it employs regular expression to parse the \"我的课程表（本+研）\" page in the\r\n//微人大 system. This approach is not robust if the page's structure or its curriculum datum structure is changed. In\r\n//some extreme cases, even the texts of course names, teacher names, etc., could affect the result. Therefore, 你必须手工检查\r\n//结果。\r\n\r\n//!!!Note: This class depends on the CSVParser class, so if the standard grammar of csv curricula is changed, or the\r\n//CSVParser class is no longer available, this class should be updated too.\r\n\r\n//Some information that is not available, such as credits, is all left default. A careful manual check is always\r\n//necessary.\r\n\r\n//<>本解析器只适用于微人大的“我的课程表（本+研）”页面，请不要在选课系统页面上使用！<>\r\n//<>注意！！第十三节到第十四节课的上课时间在“我的课程表（本+研）”页面和教务系统有所不同；务必自行了解；这好像也是这学期刚改的；反正尽量早点去吧。<>\r\n//<>本解析器使用的方法不能保证结果的正确性！请务必手动检查！请务必自行设置起始周和学期长度等信息！<>\r\n//<>一些在页面上不能获取到的信息，例如学分，都保留了初始值。再次提醒，请手动检查结果。<>\r\n\r\n//<>本解析器依赖于CSV课表解析器。如果CSV解析器更新导致本解析器失效，请联系我。<>\r\n\r\npublic class RUCParser extends Parser {\r\n\r\n    // There will be some warnings about redundant character escape, but to fix this we will have to\r\n    // use some grammar which some other regular expression engines do not support. So, I did not modify\r\n    // these regular expressions.\r\n    private static final Pattern course_list_re = Pattern.compile(\"\\\"course\\\": \\\\[([\\\\s\\\\S]*?)\\\\]\");\r\n    private static final Pattern each_course_re = Pattern.compile(\"\\\\{[\\\\s\\\\S]*?\\\\}\");\r\n    private static final Pattern each_attribute_re = Pattern.compile(\"\\\"(\\\\S+)\\\": {1,2}\\\"([\\\\S\\\\s]*?)\\\"\");\r\n    private static final Pattern hours_list_re = Pattern.compile(\"\\\"schoolHours\\\": \\\\[([\\\\s\\\\S]*?)\\\\]\");\r\n    private static final Pattern each_hour_re = Pattern.compile(\"\\\"([0-9]{1,2}):([0-9]{1,2})~([0-9]{1,2}):([0-9]{1,2})\\\"\");\r\n    String source;\r\n\r\n    public RUCParser(@NotNull java.lang.String source) {\r\n        super(source);\r\n        this.source = source; // I have only learned very little about kotlin and java, but it seems that `super(source)` should have given us a `final String source` and `source = this.source`?\r\n        //But the line above is necessary, and I do not know why.\r\n    }\r\n\r\n    private static String join(List<String> list, String delimiter) {\r\n        StringBuilder builder = new StringBuilder();\r\n        for (String i : list) {\r\n            builder.append(i);\r\n            builder.append(delimiter);\r\n        }\r\n        return builder.substring(0, builder.length() - delimiter.length());\r\n    }\r\n\r\n    private static String format_a_line(List<String> items) {\r\n        // return \",\".join(items)\r\n        return RUCParser.join(items, \",\");\r\n    }\r\n\r\n\r\n    private static String generate_csv(List<List<String>> rows) {\r\n        List<String> title = Arrays.asList(\"课程名称\", \"星期\", \"开始节数\", \"结束节数\", \"老师\", \"地点\", \"周数\");\r\n\r\n\r\n\r\n        return RUCParser.join(Stream.concat(Stream.of(title), rows.stream()).map(RUCParser::format_a_line).collect(Collectors.toList()), \"\\n\");\r\n    }\r\n\r\n    private static List<Map<String, String>> document_parse(String document) {\r\n        ArrayList<Map<String, String>> attr_dicts = new ArrayList<>();\r\n        Matcher course_list_match = course_list_re.matcher(document);\r\n        if (course_list_match.find()) {\r\n            String course_list_text = course_list_match.group(0);\r\n            Matcher courses = each_course_re.matcher(course_list_text);\r\n            while (courses.find()) {\r\n                Map<String, String> attr_dict = new TreeMap<>();\r\n                String strc = courses.group(0);\r\n                Matcher attributes = each_attribute_re.matcher(strc);\r\n                while (attributes.find()) {\r\n                    attr_dict.put(attributes.group(1), filter(attributes.group(2)));\r\n                }\r\n                transform_q(attr_dict);\r\n                attr_dicts.add(attr_dict);\r\n            }\r\n        }\r\n        return attr_dicts;\r\n    }\r\n\r\n    private static void transform_q(Map<String, String> attr_dict) {\r\n        attr_dict.put(\"end\", Integer.toString(Integer.parseInt(attr_dict.get(\"start\")) + Integer.parseInt(attr_dict.get(\"quittingTime\")) - 1));\r\n        attr_dict.put(\"weekSpan\", week_parse(attr_dict.get(\"weekly\")));\r\n    }\r\n\r\n    private static String week_parse(String weekly) {\r\n        Matcher week_match = Pattern.compile(\"第([0-9]{1,2}-[0-9]{1,2})周([单全双])周\").matcher(weekly);\r\n        if (week_match.find()) {\r\n            String span = week_match.group(1);\r\n            String odd_even = week_match.group(2);\r\n            if (odd_even.equals(\"全\")) {\r\n                return span;\r\n            } else {\r\n                return span.concat(odd_even);\r\n            }\r\n        } else\r\n            throw new PatternSyntaxException(\"week format is illegal\", \"第([0-9]{1,2}-[0-9]{1,2})周([单全双])周\", -1);\r\n    }\r\n\r\n    private static String filter(String attr) {\r\n        if (attr.contains(\",\")) {\r\n            attr = attr.replaceAll(\",\", \"、\");\r\n        }\r\n        if (attr.contains(\":\")) {\r\n            return attr.split(\": \")[1];\r\n        } else if (attr.contains(\"：\")) {\r\n            return attr.split(\"：\")[1];\r\n        } else if (attr.contains(\"\\\\(\")) {\r\n            return attr.split(\"：\")[0];\r\n        } else if (attr.equals(\"\")) {\r\n            return \"无\";\r\n        } else return attr;\r\n    }\r\n\r\n    private static <A, B> List<B> map_get(Map<A, B> dict, List<A> list) {\r\n        return list.stream().map(dict::get).collect(Collectors.toList());\r\n    }\r\n\r\n    private static List<List<String>> give_course_attr_lists(List<Map<String, String>> attr_dicts) {\r\n        return attr_dicts.stream().map(x -> map_get(x, Arrays.asList(\"title\", \"week\", \"start\", \"end\", \"teacher\", \"place\", \"weekSpan\"))).collect(Collectors.toList());\r\n    }\r\n\r\n\r\n    @NotNull\r\n    @Override\r\n    public List<Course> generateCourseList() {\r\n        return new CSVParser(generate_csv(give_course_attr_lists(document_parse(source)))).generateCourseList();\r\n    }\r\n\r\n    @NotNull\r\n    @Override\r\n    public String getTableName() {\r\n        return \"人大导入\";\r\n    }\r\n\r\n    private static String add_zero(String str) {\r\n        if (str.length() == 1) {\r\n            return \"0\".concat(str);\r\n        } else return str;\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public TimeTable generateTimeTable() {\r\n        ArrayList<TimeDetail> times = new ArrayList<>();\r\n        Matcher hour_match = hours_list_re.matcher(this.source);\r\n        if (hour_match.find()) {\r\n            Matcher each_match = each_hour_re.matcher(hour_match.group(1));\r\n            int count = 1;\r\n            while (each_match.find()) {\r\n                times.add(\r\n                        new TimeDetail(count,\r\n                                String.format(\"%s:%s\",\r\n                                        add_zero(each_match.group(1)),\r\n                                        add_zero(each_match.group(2))),\r\n                                String.format(\"%s:%s\",\r\n                                        add_zero(each_match.group(3)),\r\n                                        add_zero(each_match.group(4))))\r\n                );\r\n                count++;\r\n            }\r\n        }\r\n        return new TimeTable(\"人大作息\", times);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/RUCParser.java b/src/main/java/parser/RUCParser.java
--- a/src/main/java/parser/RUCParser.java	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/RUCParser.java	(date 1745507183812)
@@ -48,7 +48,7 @@
     String source;
 
     public RUCParser(@NotNull java.lang.String source) {
-        super(source);
+        super();
         this.source = source; // I have only learned very little about kotlin and java, but it seems that `super(source)` should have given us a `final String source` and `source = this.source`?
         //But the line above is necessary, and I do not know why.
     }
Index: src/main/java/parser/SIMCParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport main.java.bean.TimeDetail\r\nimport main.java.bean.TimeTable\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\nimport java.time.LocalDate\r\nimport kotlin.collections.ArrayList\r\n\r\nclass SIMCParser(source: String) : Parser(source) {\r\n\r\n    private val dom = Jsoup.parse(source)\r\n\r\n    data class MyCourse(\r\n        var name: String,\r\n        var position: String,\r\n        var teacher: String,\r\n        var weeks: ArrayList<Int>,\r\n        var day: Int,\r\n        var sections: ArrayList<Int>,\r\n        var note: String = \"\",\r\n        var credit: Float = 0f,\r\n        var startTime: String = \"\",\r\n        var endTime: String = \"\"\r\n    )\r\n\r\n    private val courseInfos = arrayListOf<MyCourse>()\r\n\r\n    private fun myCourse2Course(courseInfos: ArrayList<MyCourse>): ArrayList<Course> {\r\n        val res = arrayListOf<Course>()\r\n        courseInfos.forEach { e ->\r\n            val sections = arrayListOf<List<Int>>()\r\n            val s = e.sections\r\n            if (s.isNotEmpty()) {\r\n                var temp = arrayListOf(s[0])\r\n                for (i in 1 until s.count()) {\r\n                    if (s[i - 1] + 1 != s[i] || s[i-1] == 4) {\r\n                        sections.add(temp)\r\n                        temp = arrayListOf(s[i])\r\n                    } else {\r\n                        temp.add(s[i])\r\n                    }\r\n                }\r\n                sections.add(temp)\r\n            }\r\n\r\n            sections.forEach {\r\n                Common.weekIntList2WeekBeanList(e.weeks).forEach { week ->\r\n                    res.add(\r\n                        Course(\r\n                            name = e.name.replace(Regex(\"\"\"\\(([0-9]{4})\\)\\((.*?)\\)\"\"\"), \"\"),\r\n                            teacher = e.teacher,\r\n                            room = e.position,\r\n                            startNode = it.first(),\r\n                            endNode = it.last(),\r\n                            startWeek = week.start,\r\n                            endWeek = week.end,\r\n                            type = week.type,\r\n                            day = e.day,\r\n                            note = e.note,\r\n                            credit = e.credit,\r\n                            startTime = e.startTime,\r\n                            endTime = e.endTime\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    private fun getSection(s: Int): Int {\r\n        if(s==13){\r\n            return 10\r\n        }else if(s<9){\r\n            return s + 1\r\n        }else{\r\n            return s + 2\r\n        }\r\n    }\r\n\r\n    private var termFrom = 0\r\n    private var termStart = 0\r\n    private var termEnd = 0\r\n    private var termLength = 0\r\n\r\n    override fun getMaxWeek(): Int? {\r\n        val termInfo = Regex(\"\"\"table\\.marshalTable\\((.+?),(.+?),(.+?)\\);\"\"\").find(source)\r\n        return if (termInfo != null) {\r\n            termFrom = termInfo.groupValues[1].toInt()\r\n            termStart = termInfo.groupValues[2].toInt()\r\n            termEnd = termInfo.groupValues[3].toInt()\r\n            termLength = termEnd - termStart + 1\r\n            termLength\r\n        } else null\r\n    }\r\n\r\n    private fun getWeeks(validWeeks: String): ArrayList<Int> {\r\n        val week = arrayListOf<Int>()\r\n        val str = validWeeks.repeat(2)\r\n        for (i in termStart..termEnd) {\r\n            if (str[termFrom + i - 2] == '1') {\r\n                week.add(i)\r\n            }\r\n        }\r\n        return week\r\n    }\r\n\r\n    override fun getTableName(): String = \"${LocalDate.now()}导入的课表\"\r\n\r\n    override fun getNodes(): Int = 14\r\n\r\n    override fun generateTimeTable(): TimeTable {\r\n        return TimeTable(name = \"SIMC\", timeList = listOf(\r\n            TimeDetail(node = 1, startTime = \"08:30\", endTime = \"09:15\"),\r\n            TimeDetail(node = 2, startTime = \"09:15\", endTime = \"10:00\"),\r\n            TimeDetail(node = 3, startTime = \"10:15\", endTime = \"11:00\"),\r\n            TimeDetail(node = 4, startTime = \"11:00\", endTime = \"11:45\"),\r\n            TimeDetail(node = 5, startTime = \"13:00\", endTime = \"13:45\"),\r\n            TimeDetail(node = 6, startTime = \"13:45\", endTime = \"14:30\"),\r\n            TimeDetail(node = 7, startTime = \"14:45\", endTime = \"15:30\"),\r\n            TimeDetail(node = 8, startTime = \"15:30\", endTime = \"16:15\"),\r\n            TimeDetail(node = 9, startTime = \"16:15\", endTime = \"17:00\"),\r\n            TimeDetail(node = 10, startTime = \"17:00\", endTime = \"17:45\")\r\n        ))\r\n    }\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        courseInfos.clear()\r\n        getMaxWeek()\r\n        Regex(\"activity = new TaskActivity\").split(source).forEach { i ->\r\n            //教师编号、教师姓名、课程编号、课程名称、教室编号、教室名称、validWeeks字符串\r\n            val courseData = Regex(\"\"\"\\(\"(.*?)\",\"(.*?)\",\"(.*?)\",\"(.*?)\",\"(.*?)\",\"(.*?)\",\"(.*?)\"\\);\"\"\").find(i)\r\n            if (courseData != null) {\r\n                val courseName = courseData.groupValues[4]\r\n                val position = courseData.groupValues[6]\r\n                val teacher = courseData.groupValues[2]\r\n                val weeks = getWeeks(courseData.groupValues[7])\r\n                val sectionData = Regex(\"\"\"index =(.*?)\\*unitCount\\+(.*?);\"\"\").findAll(i)\r\n                val day = sectionData.first().groupValues[1].toInt() + 1\r\n                val sectionDays = arrayListOf<Int>()\r\n                sectionData.forEach {\r\n                    sectionDays.add(getSection(it.groupValues[2].toInt()))\r\n                }\r\n                sectionDays.sort()\r\n                val courseList = dom.select(\".grid > table\")[0]\r\n                var note = \"\"\r\n                var credit = 0f\r\n                courseList.select(\"tr\").drop(1).forEach {\r\n                    val cells = it.select(\"td\")\r\n                    val listCourseID = cells[0].text()\r\n                    val listCourseName = cells[2].text() + if (listCourseID.isNotBlank()) \"($listCourseID)\" else \"\"\r\n                    val listCredit = cells[3].text().toFloat()\r\n                    if (courseName.startsWith(listCourseName)) {\r\n                        credit = listCredit\r\n                    }\r\n                }\r\n                var startTime = \"\"\r\n                var endTime = \"\"\r\n                if(sectionDays.first()==sectionDays.last()){\r\n                    if (sectionDays.first()==11) {\r\n                        startTime = \"07:00\"\r\n                        endTime = \"13:30\"\r\n                        sectionDays.clear()\r\n                        sectionDays.addAll(intArrayOf(1,2,3,4,5).asList())\r\n                    }else if (sectionDays.first()==12) {\r\n                        startTime = \"14:00\"\r\n                        endTime = \"20:30\"\r\n                        sectionDays.clear()\r\n                        sectionDays.addAll(intArrayOf(6,7,8,9,10).asList())\r\n                    }else if (sectionDays.first()==13) {\r\n                        startTime = \"08:15\"\r\n                        endTime = \"15:30\"\r\n                        sectionDays.clear()\r\n                        sectionDays.addAll(intArrayOf(1,2,3,4,5,6,7,8).asList())\r\n                    }else if (sectionDays.first()==14) {\r\n                        startTime = \"16:00\"\r\n                        endTime = \"22:00\"\r\n                        sectionDays.clear()\r\n                        sectionDays.add(9)\r\n                        sectionDays.add(10)\r\n                    }\r\n                }\r\n\r\n                val same = courseInfos.firstOrNull {\r\n                    it.name == courseName &&\r\n                            it.position == position &&\r\n                            it.teacher == teacher &&\r\n                            it.day == day\r\n                }\r\n                if (same == null) {\r\n                    courseInfos.add(\r\n                        MyCourse(\r\n                            courseName,\r\n                            position,\r\n                            teacher,\r\n                            weeks,\r\n                            day,\r\n                            sectionDays,\r\n                            note,\r\n                            credit,\r\n                            startTime,\r\n                            endTime\r\n                        )\r\n                    )\r\n                } else {\r\n                    val newWeeks = arrayListOf<Int>()\r\n                    newWeeks.addAll(weeks)\r\n                    newWeeks.addAll(same.weeks)\r\n                    newWeeks.distinct()\r\n                    newWeeks.sort()\r\n\r\n                    newWeeks.forEach{\r\n                        if(weeks.contains(it)&&same.weeks.contains(it)){\r\n                            val tempSections= arrayListOf<Int>()\r\n                            tempSections.addAll(sectionDays)\r\n                            tempSections.addAll(same.sections)\r\n                            tempSections.distinct()\r\n                            tempSections.sort()\r\n                            courseInfos.add(\r\n                                MyCourse(\r\n                                    courseName,\r\n                                    position,\r\n                                    teacher,\r\n                                    arrayListOf(it),\r\n                                    day,\r\n                                    tempSections,\r\n                                    note,\r\n                                    credit,\r\n                                    startTime,\r\n                                    endTime\r\n                                )\r\n                            )\r\n                        }else if(weeks.contains(it)){\r\n                            courseInfos.add(\r\n                                MyCourse(\r\n                                    courseName,\r\n                                    position,\r\n                                    teacher,\r\n                                    arrayListOf(it),\r\n                                    day,\r\n                                    sectionDays,\r\n                                    note,\r\n                                    credit,\r\n                                    startTime,\r\n                                    endTime\r\n                                )\r\n                            )\r\n                        }else if(same.weeks.contains(it)){\r\n                            courseInfos.add(\r\n                                MyCourse(\r\n                                    courseName,\r\n                                    position,\r\n                                    teacher,\r\n                                    arrayListOf(it),\r\n                                    day,\r\n                                    same.sections,\r\n                                    note,\r\n                                    credit,\r\n                                    startTime,\r\n                                    endTime\r\n                                )\r\n                            )\r\n                        }\r\n                    }\r\n                    courseInfos.remove(same)\r\n                }\r\n            }\r\n        }\r\n        return myCourse2Course(courseInfos)\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/SIMCParser.kt b/src/main/java/parser/SIMCParser.kt
--- a/src/main/java/parser/SIMCParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/SIMCParser.kt	(date 1745507183773)
@@ -8,7 +8,7 @@
 import java.time.LocalDate
 import kotlin.collections.ArrayList
 
-class SIMCParser(source: String) : Parser(source) {
+class SIMCParser(source: String) : Parser() {
 
     private val dom = Jsoup.parse(source)
 
@@ -50,18 +50,18 @@
                     res.add(
                         Course(
                             name = e.name.replace(Regex("""\(([0-9]{4})\)\((.*?)\)"""), ""),
+                            day = e.day,
+                            room = e.position,
                             teacher = e.teacher,
-                            room = e.position,
                             startNode = it.first(),
                             endNode = it.last(),
                             startWeek = week.start,
                             endWeek = week.end,
                             type = week.type,
-                            day = e.day,
+                            credit = e.credit,
                             note = e.note,
-                            credit = e.credit,
                             startTime = e.startTime,
-                            endTime = e.endTime
+                            endTime = e.endTime,
                         )
                     )
                 }
Index: src/main/java/parser/ZPTCParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport bean.CourseBaseBean\r\nimport bean.CourseDetailBean\r\nimport parser.Parser\r\nimport org.jsoup.Jsoup\r\n\r\nclass ZPTCParser(source: String) : Parser(source) {\r\n    override fun generateCourseList(): List<Course> {\r\n        val course: MutableList<Course> = mutableListOf()\r\n\r\n        val doc = Jsoup.parse(source)\r\n        val courseTable = doc.select(\"#kb\")\r\n        val courses = courseTable.select(\".pbtd\")\r\n        val courseNames: MutableList<String> = mutableListOf()\r\n        val courseBaseBeans: MutableList<CourseBaseBean> = mutableListOf()\r\n        val courseDetailBeans: MutableList<CourseDetailBean> = mutableListOf()\r\n        var courseNum = 0\r\n        for (courseInfo in courses) {\r\n            val courseName = courseInfo.text().trim().split(\"/\")[0]\r\n            if (courseName !in courseNames && courseName != \"\") {\r\n                courseNames.add(courseName)\r\n                courseBaseBeans.add(CourseBaseBean(courseNum, courseName, \"\", 0, \"\"))\r\n                courseNum++\r\n            }\r\n        }\r\n\r\n        for (courseInfo in courses) {\r\n            var courseId: Int = -1\r\n            var courseName: String\r\n            var courseDay: Int\r\n            var courseRoom: String\r\n            var courseTeacher: String\r\n            var courseNode: Int\r\n            var courseStartWeek: Int\r\n            var courseEndWeek: Int\r\n            var courseType: Int\r\n            courseName = courseInfo.text().trim().split(\"/\")[0]\r\n            if (courseName in courseNames) {\r\n                courseRoom = courseInfo.text().trim().split(\"/\")[2].split(\"【\")[2].split(\"】\")[0]\r\n                for (i in courseBaseBeans) {\r\n                    if (i.courseName == courseName)\r\n                        courseId = i.id\r\n                }\r\n                val dayNum = Integer.parseInt(courseInfo.attr(\"id\").split(\"x\")[1].split(\"_\")[0])\r\n                val dayStr = courseTable.select(\"tr:first-child th:nth-child(\" + (dayNum + 1) + \")\").text()\r\n                courseDay = Common.chineseWeekList.indexOf(dayStr)\r\n                courseTeacher = courseInfo.text().trim().split(\"/\")[2].split(\"【\")[1].split(\"】\")[0]\r\n                courseNode = Integer.parseInt( courseInfo.text().trim().split(\"/\")[2].split(\"-\")[0].split(\"第\")[1])\r\n                courseStartWeek = Integer.parseInt(courseInfo.text().trim().split(\"/\")[2].split(\"[\")[2].split(\"]\")[0].split(\"-\")[0])\r\n                courseEndWeek = Integer.parseInt(courseInfo.text().trim().split(\"/\")[2].split(\"[\")[2].split(\"]\")[0].split(\"-\")[1])\r\n                courseType = when{\r\n                    courseInfo.text().trim().split(\"/\")[1] == \"每周\" ->0\r\n                    courseInfo.text().trim().split(\"/\")[1] == \"单周\" ->1\r\n                    courseInfo.text().trim().split(\"/\")[1] == \"双周\" ->2\r\n                    else -> 0\r\n                }\r\n                courseDetailBeans.add(\r\n                    CourseDetailBean(\r\n                        courseId,\r\n                        courseDay,\r\n                        courseRoom,\r\n                        courseTeacher,\r\n                        courseNode,\r\n                        2,\r\n                        courseStartWeek,\r\n                        courseEndWeek,\r\n                        courseType,\r\n                        0\r\n                    )\r\n                )\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n        //装填课程\r\n        for (i in courseDetailBeans) {\r\n            var name = \"\"\r\n            for (j in courseBaseBeans) {\r\n                if (i.id == j.id)\r\n                    name = j.courseName\r\n            }\r\n            course.add(\r\n                Course(\r\n                    name,\r\n                    i.day,\r\n                    i.room!!,\r\n                    i.teacher!!,\r\n                    i.startNode,\r\n                    i.startNode + i.step - 1,\r\n                    i.startWeek,\r\n                    i.endWeek,\r\n                    i.type\r\n                )\r\n            )\r\n        }\r\n        //println(course)\r\n        return course\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/ZPTCParser.kt b/src/main/java/parser/ZPTCParser.kt
--- a/src/main/java/parser/ZPTCParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/ZPTCParser.kt	(date 1745507183575)
@@ -6,7 +6,7 @@
 import parser.Parser
 import org.jsoup.Jsoup
 
-class ZPTCParser(source: String) : Parser(source) {
+class ZPTCParser(source: String) : Parser() {
     override fun generateCourseList(): List<Course> {
         val course: MutableList<Course> = mutableListOf()
 
@@ -93,7 +93,7 @@
                     i.startNode + i.step - 1,
                     i.startWeek,
                     i.endWeek,
-                    i.type
+                    i.type,
                 )
             )
         }
Index: src/main/java/parser/NewZFParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport Common\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\n\r\nclass NewZFParser(source: String) : Parser(source) {\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val doc = Jsoup.parse(source)\r\n        val table1 = doc.getElementById(\"table1\")\r\n        val trs = table1.getElementsByTag(\"tr\")\r\n        var node = 0\r\n        var day = 0\r\n        var teacher = \"\"\r\n        var room = \"\"\r\n        var step = 0\r\n        var startWeek = 0\r\n        var endWeek = 0\r\n        var type = 0\r\n        var timeStr = \"\"\r\n        val nodeRegex = Regex(\"\"\"\\(.*节\\)\"\"\")\r\n        for (tr in trs) {\r\n            val nodeStr = tr.getElementsByClass(\"festival\").text()\r\n            if (nodeStr.isEmpty()) {\r\n                continue\r\n            }\r\n            node = nodeStr.toInt()\r\n\r\n            val tds = tr.getElementsByTag(\"td\")\r\n            for (td in tds) {\r\n                val divs = td.getElementsByTag(\"div\")\r\n                for (div in divs) {\r\n                    val courseValue = div.text().trim()\r\n\r\n                    if (courseValue.length <= 1) {\r\n                        continue\r\n                    }\r\n\r\n                    val courseName = div.getElementsByClass(\"title\").text()\r\n                    if (courseName.isEmpty()) {\r\n                        continue\r\n                    }\r\n\r\n                    day = td.attr(\"id\")[0].toString().toInt()\r\n\r\n                    val pList = div.getElementsByTag(\"p\")\r\n                    val weekList = arrayListOf<String>()\r\n                    pList.forEach { e ->\r\n                        when (e.getElementsByAttribute(\"title\").attr(\"title\")) {\r\n                            \"教师\" -> teacher = e.text().trim()\r\n                            \"上课地点\" -> room = e.text().trim()\r\n                            \"节/周\", \"周/节\" -> {\r\n                                timeStr = e.text().trim()\r\n                                val result = Common.nodePattern.find(timeStr)\r\n                                if (result != null) {\r\n                                    val nodeInfo = result.value\r\n                                    val nodes = nodeInfo.substring(1, nodeInfo.length - 1).split(\"-\".toRegex())\r\n                                        .dropLastWhile { it.isEmpty() }\r\n\r\n                                    if (nodes.isNotEmpty()) {\r\n                                        node = nodes[0].toInt()\r\n                                    }\r\n                                    if (nodes.size > 1) {\r\n                                        val endNode = nodes[1].toInt()\r\n                                        step = endNode - node + 1\r\n                                    }\r\n                                }\r\n                                weekList.clear()\r\n                                weekList.addAll(nodeRegex.replace(timeStr, \"\").split(','))\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                    weekList.forEach {\r\n                        if (it.contains('-')) {\r\n                            val weeks = it.substring(0, it.indexOf('周')).split('-')\r\n                            if (weeks.isNotEmpty()) {\r\n                                startWeek = weeks[0].toInt()\r\n                            }\r\n                            if (weeks.size > 1) {\r\n                                endWeek = weeks[1].toInt()\r\n                            }\r\n\r\n                            type = when {\r\n                                it.contains('单') -> 1\r\n                                it.contains('双') -> 2\r\n                                else -> 0\r\n                            }\r\n                        } else {\r\n                            try {\r\n                                startWeek = it.substring(0, it.indexOf('周')).toInt()\r\n                                endWeek = it.substring(0, it.indexOf('周')).toInt()\r\n                            } catch (e: Exception) {\r\n                                startWeek = 1\r\n                                endWeek = 20\r\n                            }\r\n                        }\r\n\r\n                        courseList.add(\r\n                            Course(\r\n                                name = courseName, room = room,\r\n                                teacher = teacher, day = day,\r\n                                startNode = node, endNode = node + step - 1,\r\n                                startWeek = startWeek, endWeek = endWeek,\r\n                                type = type\r\n                            )\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        val table2 = doc.getElementById(\"sycjlrtabGrid\")\r\n        if (table2 != null) {\r\n            val trs2 = table2.getElementsByTag(\"tr\")\r\n            for (tr in trs2) {\r\n                val tds = tr.getElementsByTag(\"td\")\r\n                for (td in tds) {\r\n                    val kcmc = td.attr(\"aria-describedby\", \"sycjlrtabGrid_kcmc\")\r\n                    val timeAndPlace = td.attr(\"aria-describedby\", \"sycjlrtabGrid_sksjdd\")\r\n                    if (kcmc == null || timeAndPlace == null) continue\r\n                    val title = td.attr(\"aria-describedby\", \"sycjlrtabGrid_xmmc\")\r\n                }\r\n            }\r\n        }\r\n\r\n        return courseList\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/NewZFParser.kt b/src/main/java/parser/NewZFParser.kt
--- a/src/main/java/parser/NewZFParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/NewZFParser.kt	(date 1745507183682)
@@ -4,7 +4,7 @@
 import bean.Course
 import org.jsoup.Jsoup
 
-class NewZFParser(source: String) : Parser(source) {
+class NewZFParser(source: String) : Parser() {
 
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
@@ -101,11 +101,11 @@
 
                         courseList.add(
                             Course(
-                                name = courseName, room = room,
-                                teacher = teacher, day = day,
+                                name = courseName, day = day,
+                                room = room, teacher = teacher,
                                 startNode = node, endNode = node + step - 1,
                                 startWeek = startWeek, endWeek = endWeek,
-                                type = type
+                                type = type,
                             )
                         )
                     }
Index: src/main/java/parser/BJTUParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport parser.Parser\r\nimport java.io.File\r\n\r\n/*\r\n北京交通大学本科\r\n研究生可能不通用\r\n */\r\n\r\nclass BJTUParser(source: String) : Parser(source) {\r\n\r\n    private val regexCourseLine = Regex(\"\\\\w{7}\\\\s\\\\S+\\\\s[^\\\\[]+\\\\[.]\\\\s[^A-Z]+\\\\w{5}\")\r\n    private val regexClassName = Regex(\"]\\\\s.+\\\\s\\\\[\")\r\n    private val regexClassRoom = Regex(\"[A-Z]{2}\\\\d\\\\d\\\\d\")\r\n    private val regexClassTeacher = Regex(\"\\\\d\\\\d周\\\\s\\\\S+\")\r\n    private val regexStartWeek = Regex(\"]\\\\s第\\\\d\\\\d\")\r\n    private val regexEndWeek = Regex(\"\\\\d\\\\d周\")\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        //使用jsoup解析源码\r\n        val doc = org.jsoup.Jsoup.parse(source)\r\n        //获取课程表的table\r\n        val table = doc.getElementsByClass(\"table table-bordered\")\r\n        //因为byclass拿到的是一个数组所以[0],获取列trs\r\n        val trs = table[0].getElementsByTag(\"tr\")\r\n        val result = arrayListOf<Course>()\r\n        var weekdayNo: Int//代表星期几\r\n        var isFirstLine: Boolean//因为第一个显示的是课程时间段，得筛掉\r\n        for ((timeNo, tr) in trs.withIndex()) {\r\n            val tds = tr.getElementsByTag(\"td\")\r\n            isFirstLine = true\r\n            weekdayNo = 1\r\n            for (td in tds) {\r\n                val courseSource = td.text().trim()\r\n                if (courseSource != \"\") {\r\n                    if (isFirstLine) {\r\n                        isFirstLine = false\r\n                        continue\r\n                    }\r\n\r\n                    val courseLine = regexCourseLine.findAll(courseSource).toList()\r\n                    for (each in courseLine) {\r\n\r\n                        val tempEach = each.value\r\n                        var startWeek: Int\r\n                        var endWeek: Int\r\n                        var className: String\r\n                        var classRoom: String\r\n                        var classTeacher: String\r\n\r\n                        className = regexClassName.find(tempEach)?.value.toString()\r\n                        className = className.slice(2..className.length - 3)\r\n\r\n//                        val tempClassName = tempEach.slice(13..tempEach.indexOf(\"[\", 13) - 2)\r\n//                        if (tempClassName.length > 6) {\r\n//                            className = tempClassName.slice(0..5)\r\n//                            className += tempClassName.slice(6 until tempClassName.length)\r\n//                        } else {\r\n//                            className = tempClassName\r\n//                        }\r\n\r\n                        classRoom = regexClassRoom.find(tempEach)?.value.toString()\r\n                        classTeacher = regexClassTeacher.find(tempEach)?.value?.split(\" \")?.get(1).toString()\r\n                        startWeek = regexStartWeek.find(tempEach)?.value?.slice(3..4)?.toInt() ?: 1\r\n                        endWeek = regexEndWeek.find(tempEach)?.value?.slice(0..1)?.toInt() ?: 16\r\n                        val type: Int = if (tempEach.contains(\",\")) {\r\n                            if (endWeek % 2 == 0) 2 else 1\r\n                        } else {\r\n                            0\r\n                        }\r\n                        if (className != \"\")\r\n                            result.add(\r\n                                    Course(\r\n                                            name = className,\r\n                                            day = weekdayNo,\r\n                                            room = classRoom,\r\n                                            teacher = classTeacher,\r\n                                            startNode = timeNo,\r\n                                            endNode = timeNo,\r\n                                            type = type,\r\n                                            startWeek = startWeek,\r\n                                            endWeek = endWeek\r\n                                    )\r\n                            )\r\n\r\n                    }\r\n\r\n                }\r\n                weekdayNo++\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n}\r\n\r\nfun main() {\r\n    val file = File(\"C:\\\\Users\\\\14223\\\\Desktop\\\\北京交通大学教学服务管理平台.html\")\r\n    val parser = BJTUParser(file.readText())\r\n    parser.saveCourse()\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/BJTUParser.kt b/src/main/java/parser/BJTUParser.kt
--- a/src/main/java/parser/BJTUParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/BJTUParser.kt	(date 1745507183665)
@@ -9,7 +9,7 @@
 研究生可能不通用
  */
 
-class BJTUParser(source: String) : Parser(source) {
+class BJTUParser(source: String) : Parser() {
 
     private val regexCourseLine = Regex("\\w{7}\\s\\S+\\s[^\\[]+\\[.]\\s[^A-Z]+\\w{5}")
     private val regexClassName = Regex("]\\s.+\\s\\[")
@@ -73,15 +73,15 @@
                         if (className != "")
                             result.add(
                                     Course(
-                                            name = className,
-                                            day = weekdayNo,
-                                            room = classRoom,
-                                            teacher = classTeacher,
-                                            startNode = timeNo,
-                                            endNode = timeNo,
-                                            type = type,
-                                            startWeek = startWeek,
-                                            endWeek = endWeek
+                                        name = className,
+                                        day = weekdayNo,
+                                        room = classRoom,
+                                        teacher = classTeacher,
+                                        startNode = timeNo,
+                                        endNode = timeNo,
+                                        startWeek = startWeek,
+                                        endWeek = endWeek,
+                                        type = type,
                                     )
                             )
 
Index: src/main/java/parser/HHUParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport main.java.bean.TimeDetail\r\nimport main.java.bean.TimeTable\r\nimport org.jsoup.Connection\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\nimport java.lang.RuntimeException\r\nimport java.util.*\r\n\r\n// 登录网址\r\nconst val loginUrl = \"https://jwxt.hhu.edu.cn/jsxsd/xk/LoginToXk\"\r\n// 课程表网址\r\nconst val scheduleUrl = \"https://jwxt.hhu.edu.cn/jsxsd/xskb/xskb_list.do\"\r\n// userAgent\r\nconst val userAgentStr =\r\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36\"\r\n// 登录时需传递此参数\r\nconst val loginMethod = \"LoginToXk\"\r\n// 每个单元格内，单门课程都会用 10 个font元素来记录信息，可以由此计算单元格内包含的课程数\r\nconst val fontsEachClass = 10\r\n\r\n/**\r\n * @author LandmineFly\r\n * @date 2024-02-05\r\n * @param usr 传入用户名\r\n * @param pwd 传入密码\r\n * 河海大学新教务系统\r\n */\r\nclass HHUParser(private val usr: String, private val pwd: String) : Parser(\"\") {\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n\r\n        // 登录时发给服务器的验证信息需要使用Base64进行加密\r\n        val encodedUsr = Base64.getEncoder().encodeToString(usr.toByteArray())\r\n        val encodedPwd = Base64.getEncoder().encodeToString(pwd.toByteArray())\r\n        val encoded = \"$encodedUsr%%%$encodedPwd\"\r\n\r\n        // 登录\r\n        val response = Jsoup.connect(loginUrl)\r\n            .userAgent(userAgentStr)\r\n            .data(\"loginMethod\", loginMethod)\r\n            .data(\"userAccount\", usr)\r\n            .data(\"userPassword\", \"\")\r\n            .data(\"encoded\", encoded)\r\n            .ignoreHttpErrors(true)\r\n            .method(Connection.Method.POST)\r\n            .execute()\r\n\r\n        if (response.body().contains(\"该账号不存在或密码错误\")) {\r\n            throw RuntimeException(\"用户名或密码错误，登录失败\")\r\n        }\r\n\r\n        val cookies = response.cookies()\r\n\r\n        // 连接到课程表网页\r\n        val body = Jsoup.connect(scheduleUrl)\r\n            .cookies(cookies)\r\n            .ignoreContentType(true)\r\n            .execute()\r\n            .body()\r\n\r\n        // 两个正则均用于解析课程时间及周数\r\n        val regex1 = Regex(\"\"\".*\\(周\\)\\[(\\d+).*(\\d+)节]\"\"\")\r\n        val regex2 = Regex(\"\"\"(\\d+)-(\\d+)\"\"\")\r\n\r\n        // 开始解析\r\n        val classList = arrayListOf<Course>()\r\n        val timetable = Jsoup.parse(body).getElementById(\"timetable\")\r\n        val trs = timetable.getElementsByTag(\"tr\")\r\n        // 从第3个tr元素开始才包含有效课程信息，同时最后一个tr也不包含有效信息\r\n        var trIndex = 2\r\n        while (trIndex < trs.size - 1) {\r\n            val tds = trs[trIndex].getElementsByTag(\"td\")\r\n            for (tdIndex in tds.indices) {\r\n                // 获取单个单元格元素\r\n                val cell = tds[tdIndex].getElementsByClass(\"kbcontent\")[0]\r\n                val fontsContent = cell.getElementsByTag(\"font\")\r\n                // 计算单元格内的课程数\r\n                val classTotal = fontsContent.size / fontsEachClass\r\n                var classCounter = 0\r\n                var fontCounter = 0\r\n                while (classCounter < classTotal) {\r\n                    // 获取单元格内课程信息\r\n                    val name = fontsContent[fontCounter++].text()\r\n                    val teacher = fontsContent[fontCounter++].text()\r\n                    val timeAndWeek = fontsContent[fontCounter++].text()\r\n                    fontCounter += 1\r\n                    val room = fontsContent[fontCounter++].text()\r\n                    val day = tdIndex + 1\r\n                    // 对含有课程时间和周数的字符串进行解析\r\n                    val result = regex1.find(timeAndWeek)\r\n                    if (result != null) {\r\n                        // 获取课程时间\r\n                        val (startNode, endNode) = result.destructured\r\n                        // 解析课程周数\r\n                        val subs = timeAndWeek.substringBefore(\"(周)\").split(\",\")\r\n                        for (sub in subs) {\r\n                            val subResult = regex2.find(sub)\r\n                            if (subResult != null) {\r\n                                // 这是连续周数的情况，比如 1-8,9-12\r\n                                val (startWeek, endWeek) = subResult.destructured\r\n                                classList.add(\r\n                                    Course(\r\n                                        name = name,\r\n                                        day = day,\r\n                                        room = room,\r\n                                        teacher = teacher,\r\n                                        startNode = startNode.toInt(),\r\n                                        endNode = endNode.toInt(),\r\n                                        startWeek = startWeek.toInt(),\r\n                                        endWeek = endWeek.toInt(),\r\n                                        type = 0\r\n                                    )\r\n                                )\r\n                            } else {\r\n                                // 这是非连续周数的情况，比如 1,5,12\r\n                                classList.add(\r\n                                    Course(\r\n                                        name = name,\r\n                                        day = day,\r\n                                        room = room,\r\n                                        teacher = teacher,\r\n                                        startNode = startNode.toInt(),\r\n                                        endNode = endNode.toInt(),\r\n                                        startWeek = sub.toInt(),\r\n                                        endWeek = sub.toInt(),\r\n                                        type = 0\r\n                                    )\r\n                                )\r\n                            }\r\n                        }\r\n                    } else {\r\n                        throw RuntimeException(\"正则表达式解析错误\")\r\n                    }\r\n                    fontCounter += 5\r\n                    classCounter++\r\n                }\r\n            }\r\n            trIndex++\r\n        }\r\n        return classList\r\n    }\r\n\r\n    // 上课时间表\r\n    override fun generateTimeTable(): TimeTable {\r\n        return TimeTable(\r\n            name = \"河海大学\", timeList = listOf(\r\n                TimeDetail(1, \"08:00\", \"08:45\"),\r\n                TimeDetail(2, \"08:50\", \"9:35\"),\r\n                TimeDetail(3, \"09:50\", \"10:35\"),\r\n                TimeDetail(4, \"10:40\", \"11:25\"),\r\n                TimeDetail(5, \"11:30\", \"12:15\"),\r\n                TimeDetail(6, \"14:00\", \"14:45\"),\r\n                TimeDetail(7, \"14:50\", \"15:35\"),\r\n                TimeDetail(8, \"15:50\", \"16:35\"),\r\n                TimeDetail(9, \"16:40\", \"17:25\"),\r\n                TimeDetail(10, \"18:30\", \"19:15\"),\r\n                TimeDetail(11, \"19:20\", \"20:05\"),\r\n                TimeDetail(12, \"20:10\", \"20:55\")\r\n            )\r\n        )\r\n    }\r\n\r\n    // 课表名\r\n    override fun getTableName(): String {\r\n        return \"Hohai University\"\r\n    }\r\n\r\n    // 一日课程数\r\n    override fun getNodes(): Int {\r\n        return 12\r\n    }\r\n\r\n    // 最大周数\r\n    override fun getMaxWeek(): Int {\r\n        return 20\r\n    }\r\n\r\n//    教务系统缺失该信息\r\n//    override fun getStartDate(): String? {\r\n//        return super.getStartDate()\r\n//    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/HHUParser.kt b/src/main/java/parser/HHUParser.kt
--- a/src/main/java/parser/HHUParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/HHUParser.kt	(date 1745507183533)
@@ -28,7 +28,7 @@
  * @param pwd 传入密码
  * 河海大学新教务系统
  */
-class HHUParser(private val usr: String, private val pwd: String) : Parser("") {
+class HHUParser(private val usr: String, private val pwd: String) : Parser() {
 
     override fun generateCourseList(): List<Course> {
 
@@ -111,7 +111,7 @@
                                         endNode = endNode.toInt(),
                                         startWeek = startWeek.toInt(),
                                         endWeek = endWeek.toInt(),
-                                        type = 0
+                                        type = 0,
                                     )
                                 )
                             } else {
@@ -126,7 +126,7 @@
                                         endNode = endNode.toInt(),
                                         startWeek = sub.toInt(),
                                         endWeek = sub.toInt(),
-                                        type = 0
+                                        type = 0,
                                     )
                                 )
                             }
Index: src/main/java/parser/LNGDParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport bean.Course\r\nimport main.java.bean.TimeDetail\r\nimport main.java.bean.TimeTable\r\nimport org.jsoup.Jsoup\r\n\r\nclass LNGDParser(source: String) : Parser(source) {\r\n    override fun getNodes(): Int = 12\r\n\r\n    override fun generateTimeTable(): TimeTable {\r\n        return TimeTable(\r\n            name = \"轨道装备学院\",\r\n            timeList = listOf(\r\n                TimeDetail(1, \"08:20\", \"09:05\"),\r\n                TimeDetail(2, \"09:15\", \"10:00\"),\r\n                TimeDetail(3, \"10:10\", \"10:55\"),\r\n                TimeDetail(4, \"11:05\", \"11:50\"),\r\n                TimeDetail(5, \"13:20\", \"14:05\"),\r\n                TimeDetail(6, \"14:15\", \"15:00\"),\r\n                TimeDetail(7, \"15:10\", \"15:55\"),\r\n                TimeDetail(8, \"16:05\", \"15:50\"),\r\n                TimeDetail(9, \"17:00\", \"17:45\"),\r\n                TimeDetail(10, \"17:55\", \"18:40\"),\r\n                TimeDetail(11, \"18:50\", \"19:35\"),\r\n                TimeDetail(12, \"19:45\", \"20:30\"),\r\n            )\r\n        )\r\n    }\r\n\r\n    override fun generateCourseList() : List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n\r\n        var day = 0\r\n        var room = String()\r\n        var name = String()\r\n        var credit = 0f\r\n        var teacher = \"\"\r\n\r\n        val doc = Jsoup.parse(source)\r\n\r\n        val id = doc.getElementById(\"wdkb-kb\")\r\n        val byclass = id.getElementsByClass(\"kbappTimetableDayColumnRoot\")\r\n        var fragment = ArrayList<String>().toList()\r\n\r\n        byclass.forEach {\r\n            day += 1\r\n            it.getElementsByClass(\"kbappTimetableCourseRenderCourseItem el-popover__reference\").eachText().forEach {\r\n                var startNode = 0\r\n                var endNode = 0\r\n                var startWeek = 0\r\n                var endWeek = 0\r\n                fragment = it.split(\" \").toList()\r\n                for (i in fragment) {\r\n                    name = fragment[0]\r\n                    teacher = \"周([\\\\u4e00-\\\\u9fa5]+)\".toRegex().find(fragment[2])?.let { it1 -> it1.groupValues[1] }.toString()\r\n\r\n                    credit = fragment[1].replace(\"[^0-9]\".toRegex(), \"\").toFloat() / 10\r\n\r\n                    room = if (fragment[fragment.size - 1].last() == '节') {\r\n                        \"\"\r\n                    } else {\r\n                        fragment[fragment.size - 1]\r\n                    }\r\n                    val b = \"\"\"\\d+周|\\d+-+\\d+周\"\"\".toRegex().findAll(fragment.toString())\r\n                        .map { it.value }.toList().toString()\r\n                        .replace(\"\"\"周\"\"\".toRegex(), \"\")\r\n                        .replace(\"\"\",\"\"\".toRegex(), \"\")\r\n                        .substringAfter(\"[\").substringBefore(\"]\").split(\" \").toList()\r\n                    val c = \"\"\"第+\\d+节+-第+\\d+节\"\"\".toRegex().findAll(i.toString())\r\n                        .map { it.value }.toList().toString()\r\n                        .replace(\"第\", \"\")\r\n                        .replace(\"节\", \"\")\r\n                        .replace(\",\", \"\")\r\n                        .substringAfter(\"[\").substringBefore(\"]\")\r\n                        .split(\" \").toList()\r\n                    if (c.isNotEmpty()) {\r\n                        for (i in c) {\r\n                            if (i.isNotEmpty()) {\r\n                                val (startNode1, endNode1) = i.split(\"-\").map { it.toInt() }\r\n                                if (startNode1 != startNode) {\r\n                                    startNode = startNode1\r\n                                    endNode = endNode1\r\n                                    for (i in b) {\r\n                                    if (i.length > 2) {\r\n                                        val (startWeek1, endWeek1) = i.split(\"-\").map { it.toInt() }\r\n                                        if (startWeek1 != startWeek) {\r\n                                            startWeek = startWeek1\r\n                                            endWeek = endWeek1\r\n                                        }\r\n                                    } else if (i.isNotEmpty()) {\r\n                                        startWeek = i.toInt()\r\n                                        endWeek = i.toInt()\r\n                                    }\r\n                                    courseList.add(\r\n                                        Course(\r\n                                            name = name,\r\n                                            room = room,\r\n                                            teacher = teacher,\r\n                                            day = day,\r\n                                            startNode = startNode,\r\n                                            endNode = endNode,\r\n                                            startWeek = startWeek,\r\n                                            endWeek = endWeek,\r\n                                            type = 0,\r\n                                            credit = credit\r\n                                        )\r\n                                    )\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/LNGDParser.kt b/src/main/java/parser/LNGDParser.kt
--- a/src/main/java/parser/LNGDParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/LNGDParser.kt	(date 1745507183594)
@@ -5,7 +5,7 @@
 import main.java.bean.TimeTable
 import org.jsoup.Jsoup
 
-class LNGDParser(source: String) : Parser(source) {
+class LNGDParser(source: String) : Parser() {
     override fun getNodes(): Int = 12
 
     override fun generateTimeTable(): TimeTable {
@@ -95,15 +95,15 @@
                                     courseList.add(
                                         Course(
                                             name = name,
+                                            day = day,
                                             room = room,
                                             teacher = teacher,
-                                            day = day,
                                             startNode = startNode,
                                             endNode = endNode,
                                             startWeek = startWeek,
                                             endWeek = endWeek,
                                             type = 0,
-                                            credit = credit
+                                            credit = credit,
                                         )
                                     )
                                     }
Index: src/main/java/parser/GDBHParser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser;\r\n\r\nimport bean.Course;\r\nimport com.google.gson.JsonArray;\r\nimport com.google.gson.JsonObject;\r\nimport com.google.gson.JsonParser;\r\nimport com.google.gson.stream.JsonReader;\r\nimport main.java.bean.TimeDetail;\r\nimport main.java.bean.TimeTable;\r\nimport org.jetbrains.annotations.NotNull;\r\nimport org.jetbrains.annotations.Nullable;\r\nimport parser.Parser;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.io.StringReader;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.URL;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/*\r\n * 适用于桂林电子科技大学北海校区192.168.5.88教务系统\r\n * 仅支持校园网内访问\r\n * @Author: Dango\r\n * @Author: Moluer\r\n * GDBH NetCen 2024/12/21\r\n */\r\npublic class GDBHParser extends Parser {\r\n    private JsonArray courseArray;\r\n    private final String cookie;\r\n\r\n    public GDBHParser(@NotNull String source, String cookie) {\r\n        super(source);\r\n        this.cookie = cookie;\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public TimeTable generateTimeTable() {\r\n        List<TimeDetail> timeList = List.of(\r\n                new TimeDetail(1, \"08:25\", \"09:10\"),\r\n                new TimeDetail(2, \"09:20\", \"10:05\"),\r\n                new TimeDetail(3, \"10:25\", \"11:10\"),\r\n                new TimeDetail(4, \"11:20\", \"12:05\"),\r\n                new TimeDetail(5, \"15:00\", \"15:45\"),\r\n                new TimeDetail(6, \"15:55\", \"16:40\"),\r\n                new TimeDetail(7, \"17:00\", \"17:45\"),\r\n                new TimeDetail(8, \"17:55\", \"18:40\"),\r\n                new TimeDetail(9, \"19:40\", \"20:25\"),\r\n                new TimeDetail(10, \"20:35\", \"21:20\")\r\n        );\r\n        return new TimeTable(\"桂电北海\", timeList);\r\n    }\r\n\r\n    @NotNull\r\n    @Override\r\n    public List<Course> generateCourseList() {\r\n        List<Course> courseList = new ArrayList<>();\r\n        getCourseList();\r\n        for (int i = 0; i < courseArray.size(); i++) {\r\n            JsonObject courseObject = courseArray.get(i).getAsJsonObject();\r\n            courseList.add(addCourse(courseObject));\r\n        }\r\n        return courseList;\r\n    }\r\n\r\n    private Course addCourse(JsonObject courseObject) {\r\n        String name = courseObject.get(\"cname\").getAsString();\r\n        int day = courseObject.get(\"week\").getAsInt();\r\n        String room = courseObject.has(\"croomno\") && !courseObject.get(\"croomno\").isJsonNull() && !courseObject.get(\"croomno\").getAsString().isEmpty()\r\n                ? courseObject.get(\"croomno\").getAsString() : \"NULL\";\r\n        String teacher = courseObject.get(\"name\").getAsString();\r\n        int seq = courseObject.get(\"seq\").getAsInt();\r\n        int startNode = resolveBeginTime(seq);\r\n        int endNode = resolveEndTime(seq);\r\n        int startWeek = courseObject.get(\"startweek\").getAsInt();\r\n        int endWeek = courseObject.get(\"endweek\").getAsInt();\r\n        float credit = courseObject.get(\"xf\").getAsFloat();\r\n        return new Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, 0, credit, \"\", \"\", \"\");\r\n    }\r\n\r\n    private int resolveBeginTime(int seq) {\r\n        return switch (seq) {\r\n            case 1 -> 1;\r\n            case 2 -> 3;\r\n            case 3 -> 5;\r\n            case 4 -> 7;\r\n            case 5 -> 9;\r\n            case 6 -> 11;\r\n            default -> 0;\r\n        };\r\n    }\r\n\r\n    private int resolveEndTime(int seq) {\r\n        return switch (seq) {\r\n            case 1 -> 2;\r\n            case 2 -> 4;\r\n            case 3 -> 6;\r\n            case 4 -> 8;\r\n            case 5 -> 10;\r\n            case 6 -> 12;\r\n            default -> 0;\r\n        };\r\n    }\r\n\r\n    private String sendGetRequest(String url) {\r\n        StringBuilder result = new StringBuilder();\r\n        try {\r\n            HttpURLConnection con = (HttpURLConnection) new URL(url).openConnection();\r\n            con.setRequestMethod(\"GET\");\r\n            con.setRequestProperty(\"Cookie\", this.cookie);\r\n            con.setRequestProperty(\"Referer\", \"http://192.168.5.88/Login/MainDesktop\");\r\n            if (con.getResponseCode() == HttpURLConnection.HTTP_OK) {\r\n                try (BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()))) {\r\n                    String inputLine;\r\n                    while ((inputLine = in.readLine()) != null) {\r\n                        result.append(inputLine);\r\n                    }\r\n                }\r\n            } else {\r\n                throw new RuntimeException(\"Failed : HTTP error code : \" + con.getResponseCode());\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return result.toString();\r\n    }\r\n\r\n    public String getSemester() {\r\n        String url = \"http://192.168.5.88/student/StuInfo\";\r\n        String response = sendGetRequest(url);\r\n        JsonReader reader = new JsonReader(new StringReader(response));\r\n        reader.setLenient(true);\r\n        JsonObject jsonObject = JsonParser.parseReader(reader).getAsJsonObject();\r\n        return jsonObject.get(\"term\").getAsString();\r\n    }\r\n\r\n    public void getCourseList() {\r\n        String url = \"http://192.168.5.88/student/getstutable?_dc=\" + System.currentTimeMillis() + \"&term=\" + getSemester() + \"&page=1&start=0&limit=25\";\r\n        String response = sendGetRequest(url);\r\n        JsonReader reader = new JsonReader(new StringReader(response));\r\n        reader.setLenient(true);\r\n        JsonObject jsonObject = JsonParser.parseReader(reader).getAsJsonObject();\r\n        this.courseArray = jsonObject.getAsJsonArray(\"data\");\r\n    }\r\n\r\n    public JsonArray test() {\r\n        return courseArray;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/GDBHParser.java b/src/main/java/parser/GDBHParser.java
--- a/src/main/java/parser/GDBHParser.java	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/GDBHParser.java	(date 1745507183583)
@@ -31,7 +31,7 @@
     private final String cookie;
 
     public GDBHParser(@NotNull String source, String cookie) {
-        super(source);
+        super();
         this.cookie = cookie;
     }
 
@@ -77,7 +77,7 @@
         int startWeek = courseObject.get("startweek").getAsInt();
         int endWeek = courseObject.get("endweek").getAsInt();
         float credit = courseObject.get("xf").getAsFloat();
-        return new Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, 0, credit, "", "", "");
+        return new Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, 0, credit, "", "", "", );
     }
 
     private int resolveBeginTime(int seq) {
Index: src/main/java/parser/HLJUParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// 导入所需的包和类\r\npackage parser\r\n\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\n\r\n// 黑龙江大学的课程表解析器\r\nclass HLJUParser(source: String) : Parser(source) {\r\n\r\n    // 重写generateCourseList方法，用于生成课程列表\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>() // 创建一个空的课程列表\r\n        val doc = Jsoup.parse(source, \"utf-8\") // 使用Jsoup解析传入的HTML字符串\r\n        // 通过特定的属性值查找table元素中的tbody元素\r\n        val tBody = doc.getElementsByClass(\"ivu-table-tbody\")[0]\r\n        val trs = tBody.getElementsByTag(\"tr\") // 获取tbody中的所有tr元素\r\n        var flag = 0\r\n        // 遍历每一行tr元素\r\n        for (tr in trs) {\r\n            val tds = tr.getElementsByTag(\"td\") // 获取当前tr中的所有td元素\r\n            var day = 0 // 初始化星期几的计数器\r\n            // 遍历每一个td元素\r\n            for (td in tds) {\r\n\r\n                val courseS = td.html() // 获取课程信息\r\n                val doc = Jsoup.parse(courseS)\r\n                val elem = doc.select(\"div.codedd-wrap\")\r\n                if (!elem.isEmpty()) {\r\n                    for( index in elem.indices){\r\n                        val courseSource = elem[index].text().split(\"\\n\")\r\n                        convertHLJU(day, courseSource, courseList) // 调用convertHNIU方法处理课程信息\r\n                    }\r\n                } else {\r\n                    day++\r\n                    continue\r\n                }\r\n                day++\r\n            }\r\n        }\r\n        return courseList // 返回解析后的课程列表\r\n    }\r\n\r\n    // convertHNIU方法用于将解析出的课程信息转换为Course对象，并添加到courseList中\r\n    private fun convertHLJU(day: Int, courseSource: List<String>, courseList: MutableList<Course>) {\r\n        var startNode = 0\r\n        var step = 0\r\n        var startWeek = 0\r\n        var endWeek = 0\r\n        var node = false\r\n        var weekIf = false\r\n        var type = 0 // 0表示全周，1表示单周，2表示双周\r\n\r\n        val tempSplit = courseSource[0].split(\" \")\r\n        val courseSource = tempSplit\r\n        val courseName = courseSource[0].substringBeforeLast('【')\r\n        val teacher = courseSource[1].substringAfter(\"[\").substringBeforeLast(']')\r\n        val room = courseSource[2].substringAfter(\"][\").substringBeforeLast(']')\r\n        val weekList = courseSource[2].substringAfter('[').substringBeforeLast('周').split(\",\")\r\n        val nodeStr = courseSource[3].substringAfter('第').substringBeforeLast('节')\r\n\r\n        val nodeList = nodeStr.split('-')\r\n        if (nodeList.size == 1) {\r\n            if(!nodeList[0].isEmpty() && nodeList[0][0].isDigit()) {\r\n                startNode = nodeList[0].toInt()\r\n                step = 1\r\n                node = true\r\n            }\r\n        } else {\r\n            startNode = nodeList[0].toInt()\r\n            step = nodeList[1].toInt() - startNode + 1\r\n            node = true\r\n        }\r\n\r\n        weekList.forEach {\r\n            var weeks = it.split('-')\r\n            if (it.contains(\"单\")) {\r\n                type = 1 // 单周\r\n                weeks = it.replace(\"单\", \"\").split('-')\r\n            } else if (it.contains(\"双\")) {\r\n                type = 2 // 双周\r\n                weeks = it.replace(\"双\", \"\").split('-')\r\n            } else {\r\n                type = 0 // 全周\r\n            }\r\n\r\n            if (weeks.isNotEmpty()) {\r\n                if(weeks[0][0].isDigit()) {\r\n                    startWeek = weeks[0].toInt()\r\n                    weekIf = true\r\n                }\r\n            }\r\n            if (weeks.size > 1) {\r\n                endWeek = weeks[1].toInt()\r\n            }\r\n\r\n            if (node && weekIf) {\r\n                courseList.add(\r\n                    Course(\r\n                        name = courseName, room = room,\r\n                        teacher = teacher, day = day,\r\n                        startNode = startNode, endNode = startNode + step - 1,\r\n                        startWeek = startWeek, endWeek = endWeek,\r\n                        type = type // 设置单双周类型\r\n                    )\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/HLJUParser.kt b/src/main/java/parser/HLJUParser.kt
--- a/src/main/java/parser/HLJUParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/HLJUParser.kt	(date 1745507183635)
@@ -5,7 +5,7 @@
 import org.jsoup.Jsoup
 
 // 黑龙江大学的课程表解析器
-class HLJUParser(source: String) : Parser(source) {
+class HLJUParser(source: String) : Parser() {
 
     // 重写generateCourseList方法，用于生成课程列表
     override fun generateCourseList(): List<Course> {
@@ -96,11 +96,12 @@
             if (node && weekIf) {
                 courseList.add(
                     Course(
-                        name = courseName, room = room,
-                        teacher = teacher, day = day,
+                        name = courseName, day = day,
+                        room = room, teacher = teacher,
                         startNode = startNode, endNode = startNode + step - 1,
                         startWeek = startWeek, endWeek = endWeek,
-                        type = type // 设置单双周类型
+                        type = type,
+                        // 设置单双周类型
                     )
                 )
             }
Index: src/main/java/parser/SWJTUGraduateParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport main.java.bean.TimeDetail\r\nimport main.java.bean.TimeTable\r\nimport parser.Parser\r\n\r\n/*\r\n   Date: 2023/09/05\r\n Author: Zorua\r\nContact: zoruasama@qq.com\r\n    URL: https://one.swjtu.edu.cn/new/swjtu/indexswjtu.html\r\n\r\n欢迎使用西南交通大学研究生课表导入工具，应该只适用于研究生？\r\n登录后,请打开培养服务的我的课表查询进行导入。\r\n应西南交通大学的同学要求，帮助适配了一下这个\r\n\r\n代码写得比较草率……\r\n\r\n如有BUG可以发送邮件至zoruasama@qq.com反馈。\r\n */\r\n\r\n\r\nclass SWJTUGraduateParser(source: String) : Parser(source) {\r\n    override fun getNodes(): Int = 11\r\n\r\n    override fun getTableName(): String = \"西南交通大学研究生\"\r\n\r\n    override fun generateTimeTable(): TimeTable {\r\n        return TimeTable(\r\n            name = \"西南交通大学\", timeList = listOf(\r\n                TimeDetail(1, \"08:00\", \"08:45\"),\r\n                TimeDetail(2, \"09:50\", \"09:35\"),\r\n                TimeDetail(3, \"09:50\", \"10:35\"),\r\n                TimeDetail(4, \"10:40\", \"11:25\"),\r\n                TimeDetail(5, \"11:30\", \"12:15\"),\r\n                TimeDetail(6, \"14:00\", \"14:45\"),\r\n                TimeDetail(7, \"14:50\", \"15:35\"),\r\n                TimeDetail(8, \"15:50\", \"16:35\"),\r\n                TimeDetail(9, \"16:40\", \"17:25\"),\r\n                TimeDetail(10, \"17:30\", \"18:15\"),\r\n                TimeDetail(11, \"19:30\", \"20:15\"),\r\n                TimeDetail(12, \"20:20\", \"21:05\"),\r\n                TimeDetail(13, \"21:10\", \"21:55\"),\r\n                TimeDetail(14, \"22:00\", \"22:45\")\r\n            )\r\n        )\r\n    }\r\n    override fun generateCourseList(): List<Course> {\r\n        //使用jsoup解析源码\r\n        val doc = org.jsoup.Jsoup.parse(source)\r\n        //获取课程表的tabl\r\n        val table = doc.getElementsByClass(\"mtt_table1\")\r\n        //\r\n        val trs = table[0].getElementsByTag(\"tr\")\r\n        val result = arrayListOf<Course>()\r\n        var weekdayNo: Int//代表星期几\r\n\r\n        for (tr in trs) {\r\n            val tds = tr.getElementsByTag(\"td\")\r\n            for (td in tds) {\r\n                val courseSource = td.html().trim()\r\n                if(!courseSource.contains(\"讲授\")){\r\n                    continue;\r\n                }\r\n                if (courseSource != \"\") {\r\n                        val items = td.getElementsByClass(\"arrage\")[0].getElementsByTag(\"div\")\r\n                        var startWeek: Int\r\n                        var endWeek: Int\r\n                        val startTime: Int\r\n                        val endTime: Int\r\n                        var className: String\r\n                        var classRoom: String\r\n                        var classTeacher: String\r\n\r\n\r\n                        weekdayNo = Integer.parseInt(td.attr(\"xq\"))\r\n                        className = items[2].text().substringAfter(\"(\").substringBefore(\")\").trim()\r\n                        classTeacher = items[3].text()\r\n                        classRoom = items[4].text()\r\n                        println(className + classTeacher + classRoom)\r\n                        //节\r\n                        startTime = Integer.parseInt(td.attr(\"jc\"))\r\n                        endTime = startTime\r\n                        //周\r\n                        println(\"items[0].text() \" + items[1].text())\r\n                        val weekinfo = items[1].text().replace(\"[第周]\".toRegex(), \"\")\r\n                        if(weekinfo.contains(\"-\")){\r\n                            startWeek = Integer.parseInt(weekinfo.substringBefore(\"-\").trim())\r\n                            endWeek = Integer.parseInt(weekinfo.substringAfter(\"-\").trim())\r\n                        }else{\r\n                            startWeek = Integer.parseInt(weekinfo.trim())\r\n                            endWeek = startWeek\r\n                        }\r\n\r\n                        val type: Int = 0\r\n\r\n                        if (className != \"\")\r\n                            result.add(\r\n                                Course(\r\n                                    name = className,\r\n                                    day = weekdayNo,\r\n                                    room = classRoom,\r\n                                    teacher = classTeacher,\r\n                                    startNode = startTime,\r\n                                    endNode = endTime,\r\n                                    type = type,\r\n                                    startWeek = startWeek,\r\n                                    endWeek = endWeek\r\n                                )\r\n                            )\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/SWJTUGraduateParser.kt b/src/main/java/parser/SWJTUGraduateParser.kt
--- a/src/main/java/parser/SWJTUGraduateParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/SWJTUGraduateParser.kt	(date 1745507183555)
@@ -21,7 +21,7 @@
  */
 
 
-class SWJTUGraduateParser(source: String) : Parser(source) {
+class SWJTUGraduateParser(source: String) : Parser() {
     override fun getNodes(): Int = 11
 
     override fun getTableName(): String = "西南交通大学研究生"
@@ -104,9 +104,9 @@
                                     teacher = classTeacher,
                                     startNode = startTime,
                                     endNode = endTime,
-                                    type = type,
                                     startWeek = startWeek,
-                                    endWeek = endWeek
+                                    endWeek = endWeek,
+                                    type = type,
                                 )
                             )
 
Index: src/main/java/parser/XJTUGraduateParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport main.java.bean.TimeDetail\r\nimport main.java.bean.TimeTable\r\nimport parser.Parser\r\nimport java.io.File\r\n\r\n/*\r\n\r\n   Date: 2022/09/18\r\n Author: Zorua\r\nContact: zoruasama@qq.com\r\n    URL: http://gmis.xjtu.edu.cn/pyxx/pygl/xskbcx\r\n\r\n欢迎使用西安交通大学研究生课表导入工具，应该只适用于研究生！登录后,请打开培养信息查询中的我的课表进行导入。\r\n由于本人不是很懂Kotlin，因此代码很大程度参考了已有的代码文件，代码好像是能跑的……\r\n但是如果后续这段代码失效了，希望能有学弟/学妹接力更新这段代码（居然留下这么烂的代码让你们看难为你们了……\r\n如有BUG可以发送邮件至zoruasama@qq.com反馈。\r\n */\r\n\r\n\r\nclass XJTUGraduateParser(source: String) : Parser(source) {\r\n    override fun getNodes(): Int = 11\r\n\r\n    override fun getTableName(): String = \"西安交通大学研究生\"\r\n\r\n    override fun generateTimeTable(): TimeTable {\r\n        return TimeTable(\r\n            name = \"西安交通大学\", timeList = listOf(\r\n                TimeDetail(1, \"08:00\", \"08:50\"),\r\n                TimeDetail(2, \"09:00\", \"09:50\"),\r\n                TimeDetail(3, \"10:10\", \"11:00\"),\r\n                TimeDetail(4, \"11:10\", \"12:00\"),\r\n                TimeDetail(5, \"14:30\", \"15:20\"),\r\n                TimeDetail(6, \"15:30\", \"16:20\"),\r\n                TimeDetail(7, \"16:40\", \"17:30\"),\r\n                TimeDetail(8, \"17:40\", \"18:30\"),\r\n                TimeDetail(9, \"19:40\", \"20:30\"),\r\n                TimeDetail(10, \"20:40\", \"21:30\"),\r\n                TimeDetail(11, \"21:40\", \"22:30\")\r\n            )\r\n        )\r\n    }\r\n    override fun generateCourseList(): List<Course> {\r\n        //使用jsoup解析源码\r\n        val doc = org.jsoup.Jsoup.parse(source)\r\n        //获取课程表的tabl\r\n        val table = doc.getElementsByClass(\"GridViewStyle\")\r\n        //\r\n        val trs = table[0].getElementsByTag(\"tr\")\r\n        val result = arrayListOf<Course>()\r\n        var weekdayNo: Int//代表星期几\r\n\r\n        for (tr in trs) {\r\n            val tds = tr.getElementsByTag(\"td\")\r\n            for (td in tds) {\r\n                val courseSource = td.html().trim()\r\n                if(!courseSource.contains(\"课程\")){\r\n                    continue;\r\n                }\r\n                if (courseSource != \"\") {\r\n                    val courseLine = courseSource.split(\"<br><br>\")\r\n                    for (each in courseLine) {\r\n                        val items = each.split(\"<br>\")\r\n                        var startWeek: Int\r\n                        var endWeek: Int\r\n                        val startTime: Int\r\n                        val endTime: Int\r\n                        var className: String\r\n                        var classRoom: String\r\n                        var classTeacher: String\r\n\r\n\r\n                        weekdayNo = Integer.parseInt(td.id().substring(3,4))\r\n                        className = items[0].substringAfter(\"：\").trim() + items[1].substringAfter(\"：\").trim()\r\n                        classTeacher = items[2].substringAfter(\"：\").trim()\r\n                        classRoom = items[3].substringAfter(\"：\").trim()\r\n                        //节\r\n                        if(items[4].contains(\"-\")){\r\n                            val lr = items[4].substringAfter(\"：\").trim()\r\n                            startTime = Integer.parseInt(lr.substringBefore(\"-\"))\r\n                            endTime = Integer.parseInt(lr.substringAfter(\"-\"))\r\n                        }else{\r\n                            startTime = Integer.parseInt(items[4].substringAfter(\"：\").trim())\r\n                            endTime = startTime\r\n                        }\r\n                        //周\r\n                        val weekinfo = items[5].replace(\"[第周]\".toRegex(), \"\")\r\n                        if(weekinfo.contains(\"-\")){\r\n                            val lr = weekinfo.substringAfter(\"：\").trim()\r\n                            startWeek = Integer.parseInt(lr.substringBefore(\"-\"))\r\n                            endWeek = Integer.parseInt(lr.substringAfter(\"-\"))\r\n                        }else{\r\n                            startWeek = Integer.parseInt(weekinfo.substringAfter(\"：\").trim())\r\n                            endWeek = startWeek\r\n                        }\r\n\r\n                        val type: Int = 0\r\n\r\n                        if (className != \"\")\r\n                            result.add(\r\n                                Course(\r\n                                    name = className,\r\n                                    day = weekdayNo,\r\n                                    room = classRoom,\r\n                                    teacher = classTeacher,\r\n                                    startNode = startTime,\r\n                                    endNode = endTime,\r\n                                    type = type,\r\n                                    startWeek = startWeek,\r\n                                    endWeek = endWeek\r\n                                )\r\n                            )\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/XJTUGraduateParser.kt b/src/main/java/parser/XJTUGraduateParser.kt
--- a/src/main/java/parser/XJTUGraduateParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/XJTUGraduateParser.kt	(date 1745507183827)
@@ -20,7 +20,7 @@
  */
 
 
-class XJTUGraduateParser(source: String) : Parser(source) {
+class XJTUGraduateParser(source: String) : Parser() {
     override fun getNodes(): Int = 11
 
     override fun getTableName(): String = "西安交通大学研究生"
@@ -107,9 +107,9 @@
                                     teacher = classTeacher,
                                     startNode = startTime,
                                     endNode = endTime,
-                                    type = type,
                                     startWeek = startWeek,
-                                    endWeek = endWeek
+                                    endWeek = endWeek,
+                                    type = type,
                                 )
                             )
 
Index: src/main/java/parser/NewAHNUParse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport Common\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\n\r\nclass NewAHNUParser(source: String) : Parser(source) {\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val doc = Jsoup.parse(source)\r\n        val kbtable = doc.select(\"table[id=lessons]\").first()\r\n        val kcb = kbtable.getElementsByTag(\"tbody\").first()\r\n        for (tr in kcb.getElementsByTag(\"tr\")) {\r\n            if (tr.className() == \"semester_tr\") continue\r\n            val td = tr.getElementsByTag(\"td\")\r\n            var courseName: String = \"\";\r\n            var day = 0;\r\n            var room = \"\";\r\n            var teacher = \"\";\r\n            var startNode = 0;\r\n            var endNode = 0;\r\n            var endWeek = 0;\r\n            var startWeek = 0;\r\n            var cnt = 1\r\n            var type = 0\r\n            for (st in td) {\r\n                if (cnt == 1) {\r\n                    var ans = st.select(\".showSchedules\")\r\n                    courseName = ans.text()\r\n                }\r\n                else if (cnt == 3){\r\n                    val classInfo = st.html().split(\"<br>\")\r\n                    for(t in classInfo){\r\n                        if(t == \"不排课\" || t == \"\"){\r\n                            type = -1\r\n                            break\r\n                        }\r\n                        var now = 0\r\n                        var texts = t.split(\" \")\r\n                        while(now < 6){\r\n                            if(now == 0){\r\n                                startWeek = texts[0].substringBefore(\"~\").toInt()\r\n                                endWeek = texts[0].substringAfter(\"~\").substringBefore(\"周\").toInt()\r\n                            }\r\n                            else if(now == 1){\r\n                                Common.chineseWeekList.forEachIndexed { index, s ->\r\n                                    if (index != 0)\r\n                                        if (texts[now].contains(s)) {\r\n                                            day = index\r\n                                            return@forEachIndexed\r\n                                        }\r\n                                }\r\n                            }\r\n                            else if(now == 2){\r\n                                var a = texts[now].substringBefore(\"~\")\r\n                                var b = texts[now].substringAfter(\"~\")\r\n                                startNode = Common.containNodeInt(a)\r\n                                endNode = Common.containNodeInt(b)\r\n                            }\r\n                            else if(now == 3){\r\n                                if(texts[now] != \"花津校区\"){\r\n                                    teacher = texts[now]\r\n                                    break;\r\n                                }\r\n\r\n                            }\r\n                            else if(now == 4){\r\n                                room = texts[now]\r\n                            }\r\n                            else if(now == 5){\r\n                                teacher = texts[now]\r\n                            }\r\n                            now += 1\r\n                        }\r\n                        if(type == -1)continue\r\n                        if(teacher.contains(\";\")){\r\n                            teacher = teacher.substringBefore(\";\")\r\n                        }\r\n                        courseList.add(\r\n                            Course(\r\n                                name = courseName.removeSurrounding(\"[\", \"]\"),\r\n                                day = day,\r\n                                room = room.removeSurrounding(\"[\", \"]\"),\r\n                                teacher = teacher.removeSurrounding(\"[\", \"]\"),\r\n                                startNode = startNode,\r\n                                endNode = endNode,\r\n                                startWeek = startWeek,\r\n                                endWeek = endWeek,\r\n                                type = 0\r\n                            )\r\n                        )\r\n                    }\r\n                }\r\n                cnt += 1\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/NewAHNUParse.kt b/src/main/java/parser/NewAHNUParse.kt
--- a/src/main/java/parser/NewAHNUParse.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/NewAHNUParse.kt	(date 1745507183572)
@@ -4,7 +4,7 @@
 import bean.Course
 import org.jsoup.Jsoup
 
-class NewAHNUParser(source: String) : Parser(source) {
+class NewAHNUParser(source: String) : Parser() {
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
         val doc = Jsoup.parse(source)
@@ -86,7 +86,7 @@
                                 endNode = endNode,
                                 startWeek = startWeek,
                                 endWeek = endWeek,
-                                type = 0
+                                type = 0,
                             )
                         )
                     }
Index: src/main/java/parser/GXICParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser.wakeup\r\n\r\nimport bean.Course\r\nimport main.java.bean.TimeDetail \r\nimport main.java.bean.TimeTable  \r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\n\r\n/**\r\n * 广西工业职业技术学院教务系统（仅支持内网访问）\r\n * 内网先登录地址：http://jw.gxic.net\r\n * 登录完成后进入地址然后执行数据采集：http://jw.gxic.net/JWXS/pkgl/XsKB_List.aspx\r\n *\r\n * @author JiuXia2025\r\n * @version 1.0\r\n * @date 2025.01.14\r\n * 如有BUG问题请联系我：https://github.com/JiuXia2025\r\n */\r\nclass WakeupParser(source: String) : Parser(source) {\r\n\r\n    private val sundayFirstDayMap = arrayOf(0, 7, 1, 2, 3, 4, 5, 6)\r\n    private var sundayFirst = false\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val doc = Jsoup.parse(source)\r\n        val kbtable = doc.select(\"table[width='98%']\").first() \r\n        val trs = kbtable.select(\"tr\") \r\n\r\n        \r\n        try {\r\n            val ths = kbtable.select(\"th\")\r\n            sundayFirst = ths.indexOfFirst { it.text().contains(\"星期天\") } < ths.indexOfFirst { it.text().contains(\"星期一\") }\r\n        } catch (e: Exception) {\r\n            \r\n        }\r\n\r\n        \r\n        val nodeMap = mapOf(\r\n            \"第0102节\" to 1, // 1-2 节\r\n            \"第0304节\" to 3, // 3-4 节\r\n            \"第0506节\" to 5, // 5-6 节\r\n            \"第0708节\" to 7, // 7-8 节\r\n            \"第0910节\" to 9  // 9-10 节\r\n        )\r\n\r\n        for ((rowIndex, tr) in trs.withIndex()) {\r\n            val tds = tr.select(\"td\") \r\n            if (tds.isEmpty()) continue \r\n\r\n            \r\n            val nodeText = tds[0].text().trim()\r\n            val startNode = nodeMap[nodeText] ?: continue \r\n\r\n            for ((colIndex, td) in tds.withIndex()) {\r\n                if (colIndex == 0) continue \r\n\r\n                val courseElements = td.select(\"a\") \r\n                if (courseElements.isEmpty()) continue \r\n\r\n                for (courseElement in courseElements) {\r\n                    val courseHtml = courseElement.attr(\"title\") \r\n                    if (courseHtml.isBlank()) continue\r\n\r\n                    val courseName = courseElement.select(\"br\").first()?.previousSibling()?.toString()?.trim() ?: \"\"\r\n                    val teacher = courseHtml.substringAfter(\"授课教师：\").substringBefore(\"\\n\").trim()\r\n                    val room = courseHtml.substringAfter(\"开课地点：\").substringBefore(\"\\n\").trim()\r\n                    val weekStr = courseHtml.substringAfter(\"上课周次：\").substringBefore(\"\\n\").trim()\r\n\r\n                    val weekList = weekStr.split(',')\r\n                    var startWeek = 0\r\n                    var endWeek = 0\r\n                    var type = 0\r\n                    weekList.forEach {\r\n                        if (it.contains('-')) {\r\n                            val weeks = it.split('-')\r\n                            if (weeks.isNotEmpty()) {\r\n                                startWeek = weeks[0].toInt()\r\n                            }\r\n                            if (weeks.size > 1) {\r\n                                type = when {\r\n                                    weeks[1].contains('单') -> 1\r\n                                    weeks[1].contains('双') -> 2\r\n                                    else -> 0\r\n                                }\r\n                                endWeek = weeks[1].substringBefore('(').toInt()\r\n                            }\r\n                        } else {\r\n                            startWeek = it.substringBefore('(').toInt()\r\n                            endWeek = it.substringBefore('(').toInt()\r\n                        }\r\n                        courseList.add(\r\n                            Course(\r\n                                name = courseName,\r\n                                room = room,\r\n                                teacher = teacher,\r\n                                day = colIndex, \r\n                                startNode = startNode,\r\n                                endNode = startNode + 1, \r\n                                startWeek = startWeek,\r\n                                endWeek = endWeek,\r\n                                type = type\r\n                            )\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n\r\n    override fun generateTimeTable(): TimeTable {\r\n        return buildTimeTable(\"广西工职院武鸣三校区\") {\r\n            //默认武鸣三校区\r\n            //早上\r\n            add(\"08:40\", \"09:20\")\r\n            add(\"09:30\", \"10:10\")\r\n            add(\"10:30\", \"11:10\")\r\n            add(\"11:20\", \"12:00\")\r\n            //下午\r\n            add(\"14:30\", \"15:10\")\r\n            add(\"15:20\", \"16:00\")\r\n            add(\"16:10\", \"16:50\")\r\n            add(\"17:00\", \"17:40\")\r\n            //晚自习\r\n            add(\"19:40\", \"20:20\")\r\n            add(\"20:30\", \"21:10\")\r\n        }\r\n    }\r\n\r\n    \r\n    private fun buildTimeTable(name: String, block: TimeTableBuilder.() -> Unit): TimeTable {\r\n        val builder = TimeTableBuilder(name)\r\n        builder.block()\r\n        return builder.build()\r\n    }\r\n\r\n    \r\n    private class TimeTableBuilder(private val name: String) {\r\n        private val timeList = mutableListOf<TimeDetail>()\r\n        private var nodeCounter = 1\r\n\r\n        fun add(startTime: String, endTime: String) {\r\n            timeList.add(TimeDetail(nodeCounter++, startTime, endTime))\r\n        }\r\n\r\n        fun build(): TimeTable {\r\n            return TimeTable(name, timeList)\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/GXICParser.kt b/src/main/java/parser/GXICParser.kt
--- a/src/main/java/parser/GXICParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/GXICParser.kt	(date 1745507183752)
@@ -16,7 +16,7 @@
  * @date 2025.01.14
  * 如有BUG问题请联系我：https://github.com/JiuXia2025
  */
-class WakeupParser(source: String) : Parser(source) {
+class WakeupParser(source: String) : Parser() {
 
     private val sundayFirstDayMap = arrayOf(0, 7, 1, 2, 3, 4, 5, 6)
     private var sundayFirst = false
@@ -92,14 +92,14 @@
                         courseList.add(
                             Course(
                                 name = courseName,
+                                day = colIndex,
                                 room = room,
                                 teacher = teacher,
-                                day = colIndex, 
                                 startNode = startNode,
-                                endNode = startNode + 1, 
+                                endNode = startNode + 1,
                                 startWeek = startWeek,
                                 endWeek = endWeek,
-                                type = type
+                                type = type,
                             )
                         )
                     }
Index: src/main/java/parser/HNUSTParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport Common\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\n\r\n// 湖南科技大学\r\n// 湖南科技大学潇湘学院\r\nclass HNUSTParser(source: String) : Parser(source) {\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val doc = Jsoup.parse(source)\r\n        val kbtable = doc.getElementById(\"kbtable\")\r\n        val trs = kbtable.getElementsByTag(\"tr\")\r\n        var courseNamePreIndex = -1\r\n\r\n        for (tr in trs) {\r\n            val tds = tr.getElementsByTag(\"td\")\r\n            if (tds.isEmpty()) {\r\n                continue\r\n            }\r\n\r\n            var day = -1\r\n\r\n            for (td in tds) {\r\n                day++\r\n                val divs = td.getElementsByTag(\"div\")\r\n                for (div in divs) {\r\n                    if (div.text().isBlank() || !Common.weekPattern2.containsMatchIn(div.text())) continue\r\n                    val split = div.html().split(\"<br>\")\r\n                    var preIndex = -1\r\n\r\n                    fun toCourse() {\r\n                        if (preIndex == -1) return\r\n                        val courseName = Jsoup.parse(split[preIndex - courseNamePreIndex]).text().trim()\r\n                        val room = Jsoup.parse(split[preIndex + 1]).text().trim()\r\n                        val teacher = Jsoup.parse(split[preIndex - 1]).text().trim()\r\n\r\n                        val timeInfo = Jsoup.parse(split[preIndex]).text().trim().split(\",\")\r\n                        timeInfo.forEach {\r\n                            val weekStr = it.trim().substringBefore('周')\r\n                            val startWeek =\r\n                                if (weekStr.contains('-')) weekStr.split('-')[0].toInt() else weekStr.toInt()\r\n                            val endWeek = if (weekStr.contains('-')) weekStr.split('-')[1].toInt() else weekStr.toInt()\r\n                            val startNode = div.attr(\"id\").split('-')[0].toInt() * 2 - 1\r\n                            courseList.add(\r\n                                Course(\r\n                                    name = courseName, teacher = teacher,\r\n                                    room = room, day = day,\r\n                                    startNode = startNode, endNode = startNode + 1,\r\n                                    startWeek = startWeek, endWeek = endWeek,\r\n                                    type = 0\r\n                                )\r\n                            )\r\n                        }\r\n                    }\r\n\r\n                    for (i in split.indices) {\r\n                        if (Common.weekPattern2.containsMatchIn(split[i])) {\r\n                            if (preIndex != -1) {\r\n                                toCourse()\r\n                            }\r\n                            if (courseNamePreIndex == -1 && preIndex == -1) {\r\n                                courseNamePreIndex = i\r\n                            }\r\n                            preIndex = i\r\n                        }\r\n                        if (i == split.size - 1) {\r\n                            toCourse()\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/HNUSTParser.kt b/src/main/java/parser/HNUSTParser.kt
--- a/src/main/java/parser/HNUSTParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/HNUSTParser.kt	(date 1745507183525)
@@ -6,7 +6,7 @@
 
 // 湖南科技大学
 // 湖南科技大学潇湘学院
-class HNUSTParser(source: String) : Parser(source) {
+class HNUSTParser(source: String) : Parser() {
 
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
@@ -46,11 +46,11 @@
                             val startNode = div.attr("id").split('-')[0].toInt() * 2 - 1
                             courseList.add(
                                 Course(
-                                    name = courseName, teacher = teacher,
-                                    room = room, day = day,
+                                    name = courseName, day = day,
+                                    room = room, teacher = teacher,
                                     startNode = startNode, endNode = startNode + 1,
                                     startWeek = startWeek, endWeek = endWeek,
-                                    type = 0
+                                    type = 0,
                                 )
                             )
                         }
Index: src/main/java/parser/JNUParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport Common\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\n\r\n// 暨南大学\r\nclass JNUParser(source: String) : Parser(source) {\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n\r\n        val xml = source.substringAfter(\"</html>\")\r\n        val doc = Jsoup.parse(xml)\r\n        val frame = doc.getElementById(\"oReportCell\")\r\n        val table = frame.getElementsByClass(\"a8\")\r\n        val trs = table[0].getElementsByTag(\"tr\").subList(3, 10)\r\n\r\n        var courseName: String\r\n        var room: String\r\n        var type: Int\r\n        for (i in trs.indices) {\r\n            val tds = trs[i].getElementsByTag(\"td\")\r\n            if (tds.isNullOrEmpty()) continue\r\n            for (j in tds.indices) {\r\n                val str = tds[j].getElementsByTag(\"div\").text()?.trim()\r\n                if (str.isNullOrEmpty() || j == 0) continue\r\n                type = when {\r\n                    str.contains(\"单周\") -> {\r\n                        1\r\n                    }\r\n                    str.contains(\"双周\") -> {\r\n                        2\r\n                    }\r\n                    else -> {\r\n                        0\r\n                    }\r\n                }\r\n                room = if (type != 0) {\r\n                    str.substringAfter('周').trim().substringBefore(' ')\r\n                } else {\r\n                    str.substringBefore(' ')\r\n                }\r\n                courseName = str.substringAfter(\"课程：\").substringBeforeLast('(')\r\n                val c = Course(\r\n                    name = courseName, day = i + 1, room = room, teacher = \"\", startNode = j,\r\n                    endNode = j, startWeek = 1, endWeek = 18, type = type\r\n                )\r\n                if (courseList.isNotEmpty() && Common.judgeContinuousCourse(courseList.last(), c)) {\r\n                    courseList.last().endNode++\r\n                } else {\r\n                    courseList.add(c)\r\n                }\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/JNUParser.kt b/src/main/java/parser/JNUParser.kt
--- a/src/main/java/parser/JNUParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/JNUParser.kt	(date 1745507183721)
@@ -6,7 +6,7 @@
 import parser.Parser
 
 // 暨南大学
-class JNUParser(source: String) : Parser(source) {
+class JNUParser(source: String) : Parser() {
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
 
@@ -43,8 +43,8 @@
                 }
                 courseName = str.substringAfter("课程：").substringBeforeLast('(')
                 val c = Course(
-                    name = courseName, day = i + 1, room = room, teacher = "", startNode = j,
-                    endNode = j, startWeek = 1, endWeek = 18, type = type
+                    name = courseName, day = i + 1, room = room, startNode = j, endNode = j,
+                    startWeek = 1, endWeek = 18, type = type,
                 )
                 if (courseList.isNotEmpty() && Common.judgeContinuousCourse(courseList.last(), c)) {
                     courseList.last().endNode++
Index: src/main/java/parser/USTCGraduateParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport Common.TimeHM\r\nimport bean.Course\r\nimport main.java.bean.TimeDetail\r\nimport main.java.bean.TimeTable\r\nimport org.jsoup.nodes.Element\r\nimport parser.Parser\r\n\r\n/*\r\n   Date: 2023/10/22\r\n    URL: https://yjs1.ustc.edu.cn\r\n    URL: https://www.teach.ustc.edu.cn/calendar/16868.html\r\n\r\n初代适配者第一次写Java程序，效率、corner case适配等问题在所难免，敬请后来者积极改进.\r\n编写了FindNode，因为有的课程安排跟时间表并不对齐. 如果开源版parser允许\r\nstartNode, startTime 二选一，烦请随之简化对应代码.\r\n\r\n中国科学技术大学新研究生系统，在左侧 培养-课表查询应用-学生课表查询 中看课表.\r\n看上去并不那么直观，但降低了机器处理的难度.\r\n\r\n给两个脱敏后的例子.\r\n课堂号,课堂名称,起止周,教师,上课时间地点\r\nE***2\t***)\t2~6(双),7~15;3~5(单)\t***\tG***1: *(11,12,13);G***1: *(11,12,13)\r\nP***5\t***理\t2~3,6~10;6\t***\tG***8: 5(18:40~21:55);G***8: *(18:40~21:55)\r\n */\r\n\r\n\r\nclass USTCGraduateParser(source: String) : Parser(source) {\r\n    override fun getNodes(): Int = generateTimeTable().timeList.size\r\n\r\n    override fun getTableName(): String = \"中国科学技术大学研究生\"\r\n\r\n    override fun generateTimeTable(): TimeTable {\r\n        val ttbName = \"中国科学技术大学研究生\"\r\n        val ttbList = arrayListOf<TimeDetail>()\r\n        var seq = 0\r\n        listOf(\"7:50\",\"8:40\",\"9:45\",\"10:35\",\"11:25\",\r\n            \"14:00\",\"14:50\",\"15:55\",\"16:45\",\"17:35\",\r\n            \"19:30\",\"20:20\",\"21:10\").forEach {\r\n                var h = TimeHM(it)\r\n                ttbList.add(TimeDetail(node = ++seq, startTime = h.toString(),\r\n                    endTime = (h+45).toString()))\r\n        }\r\n        return TimeTable(name = ttbName, timeList = ttbList.toList())\r\n    }\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val timeList = generateTimeTable().timeList.map { listOf(it.startTime, it.endTime) }.toList()\r\n        var retList = arrayListOf<Int>()\r\n\r\n        fun FindNode(_t1: String, _t2: String): List<Int> {\r\n            val t1 = TimeHM(_t1)\r\n            val t2 = TimeHM(_t2)\r\n            var retList = arrayListOf<Int>()\r\n            for (i in timeList.indices) {\r\n                if (retList.isEmpty() && t1.timeCmp(timeList[i][1]) < 0) retList.add(i + 1)\r\n                else if (t2.timeCmp(timeList[i][0]) < 0) retList.add(i)\r\n            }\r\n            val i = timeList.lastIndex + 1\r\n            while (retList.lastIndex <= 2) retList.add(i)\r\n            return retList.toList()\r\n        }\r\n\r\n        //使用jsoup解析源码\r\n        val doc = org.jsoup.Jsoup.parse(source)\r\n        // 实际课表藏在iframe内，其具有唯一id\r\n        val _iframe = doc.select(\"iframe#iframeContent_kbcxappustcxskbcx\").first().attr(\"srcdoc\")\r\n        val table = org.jsoup.Jsoup.parse(_iframe).select(\"table\").first()\r\n\r\n        val trs = table.getElementsByTag(\"tr\")\r\n        val result = arrayListOf<Course>()\r\n\r\n        // table没有表头，第一行就是课程\r\n        for (tr in trs) {\r\n            val tds = tr.getElementsByTag(\"td\")\r\n            if (tds.lastIndex<8) {\r\n                System.err.println(\"W: 下列行 单元格数不足 (${tds.size}/9)，若对应了请报告bug\\n${tr.outerHtml()}\\n\")\r\n                continue\r\n            }\r\n            // 1,5,6,7,8\r\n            // 课堂号,课堂名称,起止周,教师,上课时间地点\r\n            val _tds = tds.map<Element, String> {\r\n                try {\r\n                    it.select(\"span\").first().text()\r\n                } catch (e: java.lang.NullPointerException) {\r\n                    it.html()\r\n                }\r\n            }\r\n            val className = _tds[5]\r\n            val note = _tds[1]      // 课堂号\r\n            val teacher = _tds[7]\r\n\r\n            val weeks = _tds[6].split(\";\")\r\n            val periods = _tds[8].split(\";\")\r\n            for (i in periods.indices) {\r\n                val period = periods[i]\r\n                val items = period.split(\": \", \"(\", \",\", \")\")\r\n                val classroom = items[0]\r\n                val weekday = items[1].toInt()\r\n                var startNode = 0\r\n                var endNode = 0\r\n                var startTime = \"\"\r\n                var endTime = \"\"\r\n                try {\r\n                    startNode = items[2].toInt()\r\n                    endNode = items[items.lastIndex - 1].toInt()\r\n                } catch (e: java.lang.NumberFormatException) {\r\n                    // 上课时间与上课铃不对齐\r\n                    val time0 = items[2].split(\"~\").toTypedArray<String>()\r\n                    time0.forEachIndexed { ind, it -> time0[ind] = TimeHM(it).toString() }\r\n                    startTime = time0[0]\r\n                    endTime = time0[1]\r\n                    // 寻找最合适的 node\r\n                    val foundNodes = FindNode(startTime, endTime)\r\n                    startNode = foundNodes[0]\r\n                    endNode = foundNodes[1]\r\n                }\r\n\r\n                val weeks0 = weeks[i].split(\",\")\r\n                for (week in weeks0) {\r\n                    var weeksArr = arrayListOf<Int>()\r\n                    val weeks1 = week.split(\"~\")\r\n                    var startWeek = weeks1[0].toInt()\r\n                    var endWeek: Int\r\n                    var j = weeks1.lastIndex\r\n                    if (weeks1[j] == \"\") {\r\n                        j -= 1\r\n                    }\r\n                    try {\r\n                        endWeek = weeks1[j].toInt()\r\n                        weeksArr.add(startWeek)\r\n                        weeksArr.add(endWeek)\r\n                    } catch (e: java.lang.NumberFormatException) {\r\n                        // 区分单双周\r\n                        val weeks2 = weeks1[j].split(\"(\")\r\n                        endWeek = weeks2[0].toInt()\r\n                        val isSingle = weeks2[1].startsWith(\"单\")\r\n                        if ((startWeek and 1) != (if (isSingle) 1 else 0))\r\n                            startWeek += 1\r\n                        for (i in startWeek..endWeek step 2) {\r\n                            weeksArr.add(i)\r\n                            weeksArr.add(i)\r\n                        }\r\n                    }\r\n\r\n                    for (i in weeksArr.indices step 2) result.add(\r\n                        Course(\r\n                            name = className,\r\n                            day = weekday,\r\n                            room = classroom,\r\n                            teacher = teacher,\r\n                            startNode = startNode,\r\n                            endNode = endNode,\r\n                            startTime = startTime,\r\n                            endTime = endTime,\r\n                            startWeek = weeksArr[i],\r\n                            endWeek = weeksArr[i + 1],\r\n                            note = note,\r\n                            type = 0\r\n                        )\r\n                    )\r\n                }\r\n\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/USTCGraduateParser.kt b/src/main/java/parser/USTCGraduateParser.kt
--- a/src/main/java/parser/USTCGraduateParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/USTCGraduateParser.kt	(date 1745507183761)
@@ -26,7 +26,7 @@
  */
 
 
-class USTCGraduateParser(source: String) : Parser(source) {
+class USTCGraduateParser(source: String) : Parser() {
     override fun getNodes(): Int = generateTimeTable().timeList.size
 
     override fun getTableName(): String = "中国科学技术大学研究生"
@@ -152,12 +152,12 @@
                             teacher = teacher,
                             startNode = startNode,
                             endNode = endNode,
-                            startTime = startTime,
-                            endTime = endTime,
                             startWeek = weeksArr[i],
                             endWeek = weeksArr[i + 1],
+                            type = 0,
                             note = note,
-                            type = 0
+                            startTime = startTime,
+                            endTime = endTime,
                         )
                     )
                 }
Index: src/main/java/parser/HFUTParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport com.google.gson.Gson\r\nimport main.java.bean.HFUTCourse\r\nimport parser.Parser\r\n\r\nclass HFUTParser(sourse : String) : Parser(sourse) {\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = ArrayList<Course>()\r\n        val datumResponse = Gson().fromJson(source, HFUTCourse::class.java)\r\n        val scheduleList = datumResponse.result.scheduleList\r\n        val lessonList = datumResponse.result.lessonList\r\n        val scheduleGroupList = datumResponse.result.scheduleGroupList\r\n\r\n        for (i in scheduleList.indices) {\r\n            var starttime = scheduleList[i].startTime.toString()\r\n            starttime = starttime.substring(0, starttime.length - 2) + \":\" + starttime.substring(starttime.length - 2)\r\n            var endtimes = scheduleList[i].endTime.toString()\r\n            endtimes = endtimes.substring(0, endtimes.length - 2) + \":\" + endtimes.substring(endtimes.length - 2)\r\n\r\n            val room = scheduleList[i].room.nameZh\r\n            val person = scheduleList[i].personName\r\n            var scheduleid = scheduleList[i].lessonId.toString()\r\n\r\n            var periods = scheduleList[i].periods\r\n            var lessonType = scheduleList[i].lessonType\r\n\r\n            for (k in 0 until scheduleGroupList.size) {\r\n                val id = scheduleGroupList[k].lessonId.toString()\r\n                val std = scheduleGroupList[k].stdCount\r\n                if (scheduleid == id) {\r\n                    periods = std\r\n                }\r\n            }\r\n\r\n            for (j in 0 until lessonList.size) {\r\n                val lessonlist_id = lessonList[j].id\r\n                val name = lessonList[j].courseName\r\n                val courseTypeName = lessonList[j].courseTypeName\r\n                if (scheduleid == lessonlist_id) {\r\n                    scheduleid = name\r\n                    lessonType = courseTypeName\r\n                }\r\n            }\r\n\r\n            val week = scheduleList[i].weekIndex\r\n            val day = scheduleList[i].weekday\r\n            val startNode = when(scheduleList[i].startTime) {\r\n                800 -> 1\r\n                1010 -> 3\r\n                1400 -> 5\r\n                1600 -> 7\r\n                1900 -> 9\r\n                else -> 0\r\n            }\r\n            val endNode = when(scheduleList[i].startTime) {\r\n                800 -> 2\r\n                1010 -> 4\r\n                1400 -> 6\r\n                1600 -> 8\r\n                1900 -> 10\r\n                else -> 0\r\n            }\r\n\r\n            if(starttime == \"8:00\") starttime = \"08:00\"\r\n\r\n            courseList.add(Course(\r\n                name = scheduleid,\r\n                room = room,\r\n                startTime = starttime,\r\n                endTime = endtimes,\r\n                type = 0,\r\n                teacher = person,\r\n                note = \"人数:${periods} 类型:${lessonType}\",\r\n                startWeek = week,\r\n                endWeek = week,\r\n                day = day,\r\n                startNode = startNode,\r\n                endNode = endNode\r\n            ))\r\n        }\r\n\r\n        return courseList\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/HFUTParser.kt b/src/main/java/parser/HFUTParser.kt
--- a/src/main/java/parser/HFUTParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/HFUTParser.kt	(date 1745507183661)
@@ -5,7 +5,7 @@
 import main.java.bean.HFUTCourse
 import parser.Parser
 
-class HFUTParser(sourse : String) : Parser(sourse) {
+class HFUTParser(sourse : String) : Parser() {
     override fun generateCourseList(): List<Course> {
         val courseList = ArrayList<Course>()
         val datumResponse = Gson().fromJson(source, HFUTCourse::class.java)
@@ -67,17 +67,17 @@
 
             courseList.add(Course(
                 name = scheduleid,
+                day = day,
                 room = room,
-                startTime = starttime,
-                endTime = endtimes,
-                type = 0,
                 teacher = person,
-                note = "人数:${periods} 类型:${lessonType}",
+                startNode = startNode,
+                endNode = endNode,
                 startWeek = week,
                 endWeek = week,
-                day = day,
-                startNode = startNode,
-                endNode = endNode
+                type = 0,
+                note = "人数:${periods} 类型:${lessonType}",
+                startTime = starttime,
+                endTime = endtimes,
             ))
         }
 
Index: src/main/java/parser/HrbeuGraduateParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport parser.Parser\r\n\r\n/**\r\n * 哈尔滨工程大学研究生院\r\n *\r\n * 仅根据哈尔滨工程大学研究生院课表解析而来，不代表全部可用\r\n */\r\nclass HrbeuGraduateParser(source: String) : Parser(source) {\r\n    private val moreTeacher = \"一班多师\"\r\n    private val brTrimRegex = Regex(\"(^<br>)|(<br>$)\")\r\n    private val numNodeRegex = Regex(\"(\\\\d+)(-(\\\\d+))?\")\r\n    private val numWeekRegex = Regex(\"(\\\\d+)(-(\\\\d+))?\")\r\n    private val teachRegex = Regex(\"[(（](.*)[)）]\")\r\n    private val gradeRegex = Regex(\"(\\\\d+班)\")\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val doc = org.jsoup.Jsoup.parse(source)\r\n        val table1 = doc.getElementById(\"StuCul_TimetableQry_TimeTable\").getElementsByClass(\"WtbodyZlistS\")[0]\r\n        val trs = table1.getElementsByTag(\"tr\")\r\n        val courseList = mutableListOf<Course>()\r\n        trs.forEach { tr ->\r\n            val tds = tr.getElementsByTag(\"td\")\r\n            var dayIndex = 0\r\n            tds.drop(1).forEach { td ->\r\n                val courseSource = td.html().replace(brTrimRegex, \"\").trim()\r\n                if (courseSource.isNotEmpty()) {\r\n                    courseSource.split(Regex(\"<br>\\\\s*<br>\")).forEach { course ->\r\n                        val split = course.split(\"<br>\")\r\n                        if (split.size >= 5) {\r\n                            courseList.addAll(parseCourseInfo(split, dayIndex))\r\n                        }\r\n                    }\r\n                }\r\n                dayIndex++\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n\r\n    private fun parseCourseInfo(split: List<String>, dayIndex: Int): MutableList<Course> {\r\n        //去除类型词\r\n        val splitEnd = split.map { it.substringAfter(':').trim() }.toMutableList()\r\n        //获取信息\r\n        //增加班级文字\r\n        val grade = gradeRegex.find(splitEnd[1])?.groupValues?.get(1)\r\n        if (grade != null) {\r\n            splitEnd[0] += \"($grade)\"\r\n        }\r\n\r\n        val resList = mutableListOf<Course>()\r\n        // 获取所有课程区间\r\n        val allNodeList = numNodeRegex.findAll(splitEnd[2]).map { matchResult ->\r\n            val startNode = matchResult.groupValues[1].toInt()\r\n            val endNode = matchResult.groupValues[3].takeIf { it.isNotEmpty() }?.toInt() ?: startNode\r\n            intArrayOf(startNode, endNode)\r\n        }.toMutableList()\r\n\r\n        mergeInterval(allNodeList).forEach { (startNode, endNode) ->\r\n            if (moreTeacher in splitEnd[1]) {\r\n                for (item in splitEnd[3].split(\";\")) {\r\n                    val teacher = teachRegex.find(item)?.groupValues?.get(1) ?: \"\"\r\n                    resList.addAll(parseItem(item, splitEnd, dayIndex, teacher, startNode, endNode, split))\r\n                }\r\n            } else {\r\n                val teacher = splitEnd[1].substringBeforeLast(\" \").trim()\r\n                resList.addAll(parseItem(splitEnd[3], splitEnd, dayIndex, teacher, startNode, endNode, split))\r\n            }\r\n        }\r\n\r\n        return resList\r\n    }\r\n\r\n    private fun parseItem(\r\n        item: String, splitEnd: MutableList<String>, dayIndex: Int,\r\n        teacher: String, startNode: Int, endNode: Int, split: List<String>\r\n    ): List<Course> {\r\n        // 所有周\r\n        val allWeekList = numWeekRegex.findAll(item).map { matchResult ->\r\n            val startWeek = matchResult.groupValues[1].toInt()\r\n            val endWeek = matchResult.groupValues[3].takeIf { it.isNotEmpty() }?.toInt() ?: startWeek\r\n            intArrayOf(startWeek, endWeek)\r\n        }.toMutableList()\r\n\r\n        return mergeInterval(allWeekList).map { (startWeek, endWeek) ->\r\n            Course(\r\n                splitEnd[0], dayIndex, splitEnd[4], teacher, startNode, endNode,\r\n                startWeek, endWeek, 0, 0f, split.subList(5, split.size).joinToString()\r\n            )\r\n        }.toList()\r\n    }\r\n\r\n    // 合并区间 [1,1]和[2,2] -> [1,2]\r\n    private fun mergeInterval(intervals: MutableList<IntArray>): MutableList<IntArray> {\r\n        // 排序\r\n        intervals.sortBy { it.first() }\r\n        val ans = mutableListOf<IntArray>()\r\n\r\n        for (i in intervals.indices) {\r\n            if (ans.none()) ans += intervals[i]\r\n            else {\r\n                val lastTo = ans.last()[1]\r\n                val (from, to) = intervals[i]\r\n                if (lastTo + 1 >= from)\r\n                    ans.last()[1] = lastTo.coerceAtLeast(to)\r\n                else {\r\n                    ans += intervals[i]\r\n                }\r\n            }\r\n        }\r\n        return ans\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/HrbeuGraduateParser.kt b/src/main/java/parser/HrbeuGraduateParser.kt
--- a/src/main/java/parser/HrbeuGraduateParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/HrbeuGraduateParser.kt	(date 1745507183745)
@@ -8,7 +8,7 @@
  *
  * 仅根据哈尔滨工程大学研究生院课表解析而来，不代表全部可用
  */
-class HrbeuGraduateParser(source: String) : Parser(source) {
+class HrbeuGraduateParser(source: String) : Parser() {
     private val moreTeacher = "一班多师"
     private val brTrimRegex = Regex("(^<br>)|(<br>$)")
     private val numNodeRegex = Regex("(\\d+)(-(\\d+))?")
@@ -87,7 +87,7 @@
         return mergeInterval(allWeekList).map { (startWeek, endWeek) ->
             Course(
                 splitEnd[0], dayIndex, splitEnd[4], teacher, startNode, endNode,
-                startWeek, endWeek, 0, 0f, split.subList(5, split.size).joinToString()
+                startWeek, endWeek, 0, note = split.subList(5, split.size).joinToString(),
             )
         }.toList()
     }
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"InspectionProjectProfileManager\">\r\n  <profile version=\"1.0\">\r\n    <option name=\"myName\" value=\"Project Default\" />\r\n    <inspection_tool class=\"JavaDoc\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\">\r\n      <option name=\"TOP_LEVEL_CLASS_OPTIONS\">\r\n        <value>\r\n          <option name=\"ACCESS_JAVADOC_REQUIRED_FOR\" value=\"none\" />\r\n          <option name=\"REQUIRED_TAGS\" value=\"\" />\r\n        </value>\r\n      </option>\r\n      <option name=\"INNER_CLASS_OPTIONS\">\r\n        <value>\r\n          <option name=\"ACCESS_JAVADOC_REQUIRED_FOR\" value=\"none\" />\r\n          <option name=\"REQUIRED_TAGS\" value=\"\" />\r\n        </value>\r\n      </option>\r\n      <option name=\"METHOD_OPTIONS\">\r\n        <value>\r\n          <option name=\"ACCESS_JAVADOC_REQUIRED_FOR\" value=\"none\" />\r\n          <option name=\"REQUIRED_TAGS\" value=\"@return@param@throws or @exception\" />\r\n        </value>\r\n      </option>\r\n      <option name=\"FIELD_OPTIONS\">\r\n        <value>\r\n          <option name=\"ACCESS_JAVADOC_REQUIRED_FOR\" value=\"none\" />\r\n          <option name=\"REQUIRED_TAGS\" value=\"\" />\r\n        </value>\r\n      </option>\r\n      <option name=\"IGNORE_DEPRECATED\" value=\"false\" />\r\n      <option name=\"IGNORE_JAVADOC_PERIOD\" value=\"true\" />\r\n      <option name=\"IGNORE_DUPLICATED_THROWS\" value=\"false\" />\r\n      <option name=\"IGNORE_POINT_TO_ITSELF\" value=\"false\" />\r\n      <option name=\"myAdditionalJavadocTags\" value=\"date\" />\r\n    </inspection_tool>\r\n  </profile>\r\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
--- a/.idea/inspectionProfiles/Project_Default.xml	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/.idea/inspectionProfiles/Project_Default.xml	(date 1746112980023)
@@ -32,5 +32,42 @@
       <option name="IGNORE_POINT_TO_ITSELF" value="false" />
       <option name="myAdditionalJavadocTags" value="date" />
     </inspection_tool>
+    <inspection_tool class="JavadocDeclaration" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="ADDITIONAL_TAGS" value="date" />
+    </inspection_tool>
+    <inspection_tool class="MissingJavadoc" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="PACKAGE_SETTINGS">
+        <Options>
+          <option name="ENABLED" value="false" />
+        </Options>
+      </option>
+      <option name="MODULE_SETTINGS">
+        <Options>
+          <option name="ENABLED" value="false" />
+        </Options>
+      </option>
+      <option name="TOP_LEVEL_CLASS_SETTINGS">
+        <Options>
+          <option name="ENABLED" value="false" />
+        </Options>
+      </option>
+      <option name="INNER_CLASS_SETTINGS">
+        <Options>
+          <option name="ENABLED" value="false" />
+        </Options>
+      </option>
+      <option name="METHOD_SETTINGS">
+        <Options>
+          <option name="REQUIRED_TAGS" value="@return@param@throws or @exception" />
+          <option name="ENABLED" value="false" />
+        </Options>
+      </option>
+      <option name="FIELD_SETTINGS">
+        <Options>
+          <option name="ENABLED" value="false" />
+        </Options>
+      </option>
+    </inspection_tool>
+    <inspection_tool class="UnusedSymbol" enabled="false" level="WARNING" enabled_by_default="false" />
   </profile>
 </component>
\ No newline at end of file
Index: src/main/java/parser/OldQzParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport Common\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\n\r\nclass OldQzParser(source: String) : Parser(source) {\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val doc = Jsoup.parse(source)\r\n        val kbtable = doc.getElementById(\"kbtable\")\r\n        val trs = kbtable.getElementsByTag(\"tr\")\r\n\r\n        for (tr in trs) {\r\n            val tds = tr.getElementsByTag(\"td\")\r\n            if (tds.isEmpty()) {\r\n                continue\r\n            }\r\n\r\n            var day = -1\r\n\r\n            for (td in tds) {\r\n                day++\r\n                val divs = td.getElementsByTag(\"div\")\r\n                for (div in divs) {\r\n                    if (div.text().isBlank() || !Common.weekPattern2.containsMatchIn(div.text())) continue\r\n                    val split = div.html().split(\"<br>\")\r\n                    var preIndex = -1\r\n\r\n                    fun toCourse() {\r\n                        if (preIndex == -1) return\r\n                        val courseName = Jsoup.parse(split[preIndex - 3]).text().trim()\r\n                        val room = Jsoup.parse(split[preIndex + 1]).text().trim()\r\n                        val teacher = Jsoup.parse(split[preIndex - 1]).text().trim()\r\n                        val timeInfo = Jsoup.parse(split[preIndex]).text().trim().split(\"周[\")\r\n                        val startWeek =\r\n                            if (timeInfo[0].contains('-')) timeInfo[0].split('-')[0].toInt() else timeInfo[0].toInt()\r\n                        val endWeek =\r\n                            if (timeInfo[0].contains('-')) timeInfo[0].split('-')[1].toInt() else timeInfo[0].toInt()\r\n                        val startNode = timeInfo[1].split('-')[0].toInt()\r\n                        val endNode = timeInfo[1].split('-')[1].substringBefore('节').toInt()\r\n\r\n                        courseList.add(\r\n                            Course(\r\n                                name = courseName, room = room,\r\n                                teacher = teacher, day = day,\r\n                                startNode = startNode, endNode = endNode,\r\n                                startWeek = startWeek, endWeek = endWeek,\r\n                                type = 0\r\n                            )\r\n                        )\r\n                    }\r\n\r\n                    for (i in split.indices) {\r\n                        if (split[i].contains('[') && split[i].contains(']') && split[i].contains('节') && split[i].contains(\r\n                                '周'\r\n                            )\r\n                        ) {\r\n                            if (preIndex != -1) {\r\n                                toCourse()\r\n                            }\r\n                            preIndex = i\r\n                        }\r\n                        if (i == split.size - 1) {\r\n                            toCourse()\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/OldQzParser.kt b/src/main/java/parser/OldQzParser.kt
--- a/src/main/java/parser/OldQzParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/OldQzParser.kt	(date 1745507183764)
@@ -4,7 +4,7 @@
 import bean.Course
 import org.jsoup.Jsoup
 
-class OldQzParser(source: String) : Parser(source) {
+class OldQzParser(source: String) : Parser() {
 
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
@@ -43,11 +43,11 @@
 
                         courseList.add(
                             Course(
-                                name = courseName, room = room,
-                                teacher = teacher, day = day,
+                                name = courseName, day = day,
+                                room = room, teacher = teacher,
                                 startNode = startNode, endNode = endNode,
                                 startWeek = startWeek, endWeek = endWeek,
-                                type = 0
+                                type = 0,
                             )
                         )
                     }
Index: src/main/java/parser/CNUParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\n/**\r\n *\r\n * 适配长春师范大学本科教务系统\r\n * 在主页-->全校课表-->选择自己的专业-->查询本学期课表-->导入\r\n *\r\n * @author xiangxiang\r\n * @version 1.0\r\n * @date 2023-08-28\r\n */\r\nclass CNUParser(source: String) : Parser(source) {\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val doc = Jsoup.parse(source)\r\n        val trs = doc.getElementsByTag(\"tbody\")[0].getElementsByTag(\"tr\")\r\n        trs.forEach { tr ->\r\n            val tds = tr.getElementsByTag(\"td\")\r\n            var count = if (tds.size == 8) -1 else -2\r\n            tds.forEach { td ->\r\n                count++\r\n                if (!td.getElementsByClass(\"curriculum-item\").isEmpty()) {\r\n                    val courseName = td.getElementsByTag(\"span\").text().split(\" 查看更多\")[0]\r\n                    val data = td.getElementsByTag(\"div\")\r\n                    val time = data[3].text()\r\n                    val weekNode = time.split('周')\r\n                    val startWeek= weekNode[0].split('-')[0].toInt()\r\n                    val endWeek = weekNode[0].split('-')[1].toInt()\r\n//                  val nodeTimeString = weekNode[1].substring(1, weekNode[1].length-2).split('-')\r\n                    val nodeTimeString = weekNode[1].split('节')[0]\r\n                    val nodeTime = nodeTimeString.substring(1, nodeTimeString.length).split('-')\r\n                    val startNode = nodeTime[0].toInt()\r\n                    val endNode = nodeTime[1].toInt()\r\n\r\n                    courseList.add(\r\n                        Course(\r\n                            name = courseName,\r\n                            day = count,\r\n                            room = data[4].text(),\r\n                            teacher = data[2].text(),\r\n                            startNode = startNode,\r\n                            endNode = endNode,\r\n                            startWeek = startWeek,\r\n                            endWeek = endWeek,\r\n                            type = 0\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/CNUParser.kt b/src/main/java/parser/CNUParser.kt
--- a/src/main/java/parser/CNUParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/CNUParser.kt	(date 1745507183611)
@@ -12,7 +12,7 @@
  * @version 1.0
  * @date 2023-08-28
  */
-class CNUParser(source: String) : Parser(source) {
+class CNUParser(source: String) : Parser() {
 
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
@@ -46,7 +46,7 @@
                             endNode = endNode,
                             startWeek = startWeek,
                             endWeek = endWeek,
-                            type = 0
+                            type = 0,
                         )
                     )
                 }
Index: src/main/java/parser/AHNUParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport Common\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\n\r\nclass AHNUParser(source: String) : Parser(source) {\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val doc = Jsoup.parse(source)\r\n        val kbtable = doc.select(\"table[id=kcb]\").first()\r\n        val kcb = kbtable.getElementsByTag(\"tbody\").first()\r\n        for (tr in kcb.getElementsByTag(\"tr\")) {\r\n            if (tr.className() == \"thtd\") continue\r\n\r\n            val td = tr.getElementsByTag(\"td\")\r\n            for (st in td) {\r\n                if (st.childNodeSize() <= 1) continue\r\n                var courseName: String = \"\";\r\n                var day = 0;\r\n                var room = \"\";\r\n                var teacher = \"\";\r\n                var startNode = 0;\r\n                var endNode = 0;\r\n                var endWeek = 0;\r\n                var startWeek = 0;\r\n                val classInfo = st.html().split(\"<br>\")\r\n                var cnt = 1\r\n                var t = 0\r\n                classInfo.forEach {\r\n                    val info = Jsoup.parse(it).text().trim().split(' ')\r\n                    if (cnt == 1) courseName = info.toString()\r\n                    else if (cnt == 3) teacher = info.toString()\r\n                    else if (cnt == 4) room = info.toString()\r\n                    else if (cnt == 2) {\r\n                        Common.chineseWeekList.forEachIndexed { index, s ->\r\n                            if (index != 0)\r\n                                if (info.toString().contains(s)) {\r\n                                    day = index\r\n                                    return@forEachIndexed\r\n                                }\r\n                        }\r\n                        t = when {\r\n                            info.toString().contains('单') -> 1\r\n                            info.toString().contains('双') -> 2\r\n                            else -> 0\r\n                        }\r\n                        val matchWeek = Common.weekPattern.find(info.toString())\r\n                        if (matchWeek != null) {\r\n                            val res = matchWeek.value\r\n                            startWeek = res.substringBefore('-').substringAfter('第').toInt()\r\n                            endWeek = res.substringAfter('-').substringBefore('周').toInt()\r\n                        }\r\n                        val p = info.toString().substringAfter('第').substringBefore('节');\r\n                        val startTime = p.substringBefore(',')\r\n                        val endTime = p.substringAfterLast(',')\r\n                        startNode = startTime.toInt()\r\n                        endNode = endTime.toInt()\r\n                    }\r\n                    else if (cnt == 5 && classInfo.size >= 8) {\r\n                        courseList.add(\r\n                            Course(\r\n                                name = courseName.removeSurrounding(\"[\", \"]\"),\r\n                                day = day,\r\n                                room = room.removeSurrounding(\"[\", \"]\"),\r\n                                teacher = teacher.removeSurrounding(\"[\", \"]\"),\r\n                                startNode = startNode,\r\n                                endNode = endNode,\r\n                                startWeek = startWeek,\r\n                                endWeek = endWeek,\r\n                                type = t\r\n                            )\r\n                        )\r\n                    } else if (cnt == 6) courseName = info.toString()\r\n                    else if (cnt == 7) {\r\n                        Common.chineseWeekList.forEachIndexed { index, s ->\r\n                            if (index != 0)\r\n                                if (info.toString().contains(s)) {\r\n                                    day = index\r\n                                    return@forEachIndexed\r\n                                }\r\n                        }\r\n                        t = when {\r\n                            info.toString().contains('单') -> 1\r\n                            info.toString().contains('双') -> 2\r\n                            else -> 0\r\n                        }\r\n                        val matchWeek = Common.weekPattern.find(info.toString())\r\n                        if (matchWeek != null) {\r\n                            val res = matchWeek.value\r\n                            startWeek = res.substringBefore('-').substringAfter('第').toInt()\r\n                            endWeek = res.substringAfter('-').substringBefore('周').toInt()\r\n                        }\r\n                        val p = info.toString().substringAfter('第').substringBefore('节');\r\n                        startNode = p[0].toInt() - 48\r\n                        endNode = p[p.lastIndex].toInt() - 48\r\n                    } else if (cnt == 8) teacher = info.toString()\r\n                    else if (cnt == 9) room = info.toString()\r\n                    cnt += 1\r\n                }\r\n                courseList.add(\r\n                    Course(\r\n                        name = courseName.removeSurrounding(\"[\", \"]\"),\r\n                        day = day,\r\n                        room = room.removeSurrounding(\"[\", \"]\"),\r\n                        teacher = teacher.removeSurrounding(\"[\", \"]\"),\r\n                        startNode = startNode,\r\n                        endNode = endNode,\r\n                        startWeek = startWeek,\r\n                        endWeek = endWeek,\r\n                        type = t\r\n                    )\r\n                )\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/AHNUParser.kt b/src/main/java/parser/AHNUParser.kt
--- a/src/main/java/parser/AHNUParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/AHNUParser.kt	(date 1745507183799)
@@ -4,7 +4,7 @@
 import bean.Course
 import org.jsoup.Jsoup
 
-class AHNUParser(source: String) : Parser(source) {
+class AHNUParser(source: String) : Parser() {
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
         val doc = Jsoup.parse(source)
@@ -68,7 +68,7 @@
                                 endNode = endNode,
                                 startWeek = startWeek,
                                 endWeek = endWeek,
-                                type = t
+                                type = t,
                             )
                         )
                     } else if (cnt == 6) courseName = info.toString()
@@ -108,7 +108,7 @@
                         endNode = endNode,
                         startWeek = startWeek,
                         endWeek = endWeek,
-                        type = t
+                        type = t,
                     )
                 )
             }
Index: src/main/java/parser/NWPUGraduateParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport main.java.bean.TimeDetail\r\nimport main.java.bean.TimeTable\r\nimport org.jsoup.nodes.Element\r\nimport parser.Parser\r\nimport java.time.LocalDate\r\n\r\n/**\r\n *   Date: 2023/09/11\r\n * Author: @ludoux\r\n */\r\n\r\n/**\r\n * 由于无法直接登录研究生教务系统，需要先从翱翔门户（https://ecampus.nwpu.edu.cn/main.html#/Index）登录\r\n * 后进入【研究生教育】应用，自动打开研究生教务系统主页（https://yjsjy.nwpu.edu.cn/pyxx/home/index）\r\n * 之后再依次选择【课程与成绩】->【选课结果查询】，跳转至最终页面 https://yjsjy.nwpu.edu.cn/pyxx/pygl/xkjg/index\r\n * source 即为上述【选课结果查询】最终页面的网页源代码\r\n */\r\nclass NWPUGraduateParser(source: String) : Parser(source) {\r\n    var changanCount = 0\r\n    var youyiCount = 0\r\n    var currentSemesterText = \"1970-1971秋\"\r\n\r\n    override fun getNodes(): Int = 13\r\n\r\n    override fun getMaxWeek(): Int = 22\r\n\r\n    override fun getTableName(): String = \"西工大研 $currentSemesterText\"\r\n\r\n    override fun generateTimeTable(): TimeTable {\r\n        val changanTimeList = TimeTable(\r\n            name = \"西工大长安\", timeList = listOf(\r\n                TimeDetail(1, \"08:30\", \"09:15\"),\r\n                TimeDetail(2, \"09:25\", \"10:10\"),\r\n                TimeDetail(3, \"10:30\", \"11:15\"),\r\n                TimeDetail(4, \"11:25\", \"12:10\"),\r\n                TimeDetail(5, \"12:20\", \"13:05\"),\r\n                TimeDetail(6, \"13:05\", \"13:50\"),\r\n                TimeDetail(7, \"14:00\", \"14:45\"),\r\n                TimeDetail(8, \"14:55\", \"15:40\"),\r\n                TimeDetail(9, \"16:00\", \"16:45\"),\r\n                TimeDetail(10, \"16:55\", \"17:40\"),\r\n                TimeDetail(11, \"19:00\", \"19:45\"),\r\n                TimeDetail(12, \"19:55\", \"20:40\"),\r\n                TimeDetail(13, \"20:40\", \"21:25\")\r\n            )\r\n        )\r\n        val youyiWinterTimeList = TimeTable(\r\n            name = \"西工大友谊冬(10.1-4.30)\", timeList = listOf(\r\n                TimeDetail(1, \"08:00\", \"08:50\"),\r\n                TimeDetail(2, \"09:00\", \"09:50\"),\r\n                TimeDetail(3, \"10:10\", \"11:00\"),\r\n                TimeDetail(4, \"11:10\", \"12:00\"),\r\n                TimeDetail(5, \"12:10\", \"13:00\"),//友谊本无中午，为了通用而已\r\n                TimeDetail(6, \"13:10\", \"14:00\"),//友谊本无中午，为了通用而已\r\n                TimeDetail(7, \"14:00\", \"14:50\"),\r\n                TimeDetail(8, \"15:00\", \"15:50\"),\r\n                TimeDetail(9, \"16:10\", \"17:00\"),\r\n                TimeDetail(10, \"17:10\", \"18:00\"),\r\n                TimeDetail(11, \"19:00\", \"19:50\"),\r\n                TimeDetail(12, \"20:00\", \"20:50\"),\r\n                TimeDetail(13, \"20:50\", \"21:25\")//友谊本无13节课，为了通用而已\r\n            )\r\n        )\r\n        val youyiSummerTimeList = TimeTable(\r\n            name = \"西工大友谊夏(5.1-9.30)\", timeList = listOf(\r\n                TimeDetail(1, \"08:00\", \"08:50\"),\r\n                TimeDetail(2, \"09:00\", \"09:50\"),\r\n                TimeDetail(3, \"10:10\", \"11:00\"),\r\n                TimeDetail(4, \"11:10\", \"12:00\"),\r\n                TimeDetail(5, \"12:10\", \"13:10\"),//友谊本无中午，为了通用而已\r\n                TimeDetail(6, \"13:20\", \"14:20\"),//友谊本无中午，为了通用而已\r\n                TimeDetail(7, \"14:30\", \"15:20\"),\r\n                TimeDetail(8, \"15:30\", \"16:20\"),\r\n                TimeDetail(9, \"16:40\", \"17:30\"),\r\n                TimeDetail(10, \"17:40\", \"18:30\"),\r\n                TimeDetail(11, \"19:30\", \"20:20\"),\r\n                TimeDetail(12, \"20:30\", \"21:20\"),\r\n                TimeDetail(13, \"20:40\", \"21:25\")//友谊本无13节课，为了通用而已\r\n            )\r\n        )\r\n        val date = LocalDate.now()\r\n        return if (changanCount >= youyiCount) {\r\n            changanTimeList\r\n        } else if (date.monthValue >= 5 && date.monthValue <= 9) {\r\n            youyiSummerTimeList\r\n        } else {\r\n            youyiWinterTimeList\r\n        }\r\n    }\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val rt = arrayListOf<Course>()\r\n\r\n        val doc = org.jsoup.Jsoup.parse(source)\r\n        doc.outputSettings().indentAmount(0).prettyPrint(false);\r\n        currentSemesterText = doc.getElementById(\"xq\").getElementsByTag(\"option\").filter { it.hasAttr(\"selected\") }[0].text()\r\n        val table = doc.getElementById(\"sample-table-1\")\r\n        val headThs = table.getElementsByTag(\"thead\")[0].getElementsByTag(\"tr\")[0].getElementsByTag(\"th\")\r\n        val bodyTrs = table.getElementsByTag(\"tbody\")[0].getElementsByTag(\"tr\")\r\n        for (tr in bodyTrs) {\r\n            var noteCollege = \"\"\r\n            var noteCourseId = \"\"\r\n            var noteDesc = \"\"\r\n            var nameCourseName = \"\"\r\n            var nameClassName = \"\"\r\n            var teacher = \"\"\r\n            var credit = 0.0f\r\n\r\n            val tds = tr.getElementsByTag(\"td\")\r\n            var detailedTimeText = \"\"\r\n            for ((i,td) in tds.withIndex()) {\r\n                // 使用以下方式，使得在导出时候，br作为换行符\r\n                val brs = td.select(\"br\")\r\n                for (br in brs) {\r\n                    br.replaceWith(Element(\"br\").text(\"\\n\"))\r\n                }\r\n\r\n                val curText = td.wholeText().trim()\r\n                val curHeadTxt = headThs[i].wholeText().trim()\r\n                if (curHeadTxt.contains(\"院系\")) {\r\n                    noteCollege = curText\r\n                } else if (curHeadTxt.contains(\"课程编号\")) {\r\n                    noteCourseId = curText\r\n                } else if (curHeadTxt.contains(\"课程名称\")) {\r\n                    nameCourseName = curText\r\n                } else if (curHeadTxt.contains(\"班级名称\")) {\r\n                    nameClassName = curText\r\n                } else if (curHeadTxt.contains(\"主讲教师\")) {\r\n                    teacher = curText\r\n                } else if (curHeadTxt.contains(\"学分\")) {\r\n                    credit = curText.toFloat()\r\n                } else if (curHeadTxt.contains(\"班级说明\")) {\r\n                    noteDesc = curText\r\n                } else if (curHeadTxt.contains(\"上课时间\")) {\r\n                    // 在其它列都判断完后，最后再分析此列\r\n                    detailedTimeText = curText\r\n                }\r\n            }\r\n            //开始分析\r\n            if (detailedTimeText.contains(\"长安\")) {\r\n                changanCount++\r\n            } else if (detailedTimeText.contains(\"友谊\")) {\r\n                youyiCount++\r\n            }\r\n            /**\r\n             * 目前来看只有单周和连续周，且时间一定是在括号内。可能有多行，同行也可能有多个星期\r\n             * (第6-6周 单周 星期日 上1,上2,上3,上4,下1,下2,下3,下4)\r\n             * (第6-6周 连续周 星期日 晚1,晚2,晚3)\r\n             * (第1-3周 单周 星期日 上1,上2,上3,上4,下1,下2,下3,下4)\r\n             *\r\n             * (第4-4周 单周 星期二 晚1,晚2,晚3)\r\n             *\r\n             * (第3-3周 单周 星期六 上1,上2,上3,上4,下1,下2,下3,下4,晚1,晚2,晚3 星期日 上1,上2,上3,上4,下1,下2,下3,下4,晚1,晚2,晚3)\r\n             *\r\n             * 如下是有地点的。也有没有地点的，比如上面的那些。也需要注意同行可能有多个星期\r\n             * 长安-教学东楼D座-教东D1-203(第2-13周 连续周 星期三上3,上4<10:30-12:10> 星期五下1,下2<14:00-15:40>)\r\n             *\r\n             * 长安-教学西楼D座-D101(第3-12周 连续周 星期五晚1,晚2,晚3<19:00-21:25>)\r\n             * 长安-教学西楼D座-D101(第13-13周 单周 星期五晚1,晚2<19:00-20:40>)\r\n             */\r\n            /**\r\n             * 学校改了时间的显示，如下：\r\n             * 长安-教学西楼A座-A101(第2-4周 连续周 星期一11、12、13<19:00-21:25> 星期三11、12、13<19:00-21:25>)\r\n             */\r\n            for (line in detailedTimeText.split('\\n')) {\r\n                val lineTrimmed = line.trim()\r\n\r\n                var room = \"无地点\"\r\n                var startWeek: Int\r\n                var endWeek: Int\r\n                var type: Int\r\n                if (!lineTrimmed.startsWith(\"(\")) {\r\n                    //通常情况，有地点，如 长安-教学东楼D座-教东D1-203(第2-13周 连续周 星期三上3,上4<10:30-12:10> 星期五下1,下2<14:00-15:40>)\r\n                    room = lineTrimmed.split(\"(\")[0].replace(\"-\",\" \")\r\n                }\r\n                // 括号内的文本\r\n                val timeText = lineTrimmed.substringAfter(\"(\").substringBefore(\")\")\r\n                val weekRegex = \"\"\"第(\\d+)-(\\d+)周\"\"\".toRegex()\r\n                val weekFound = weekRegex.find(timeText)\r\n                startWeek = weekFound?.groupValues?.get(1)?.toInt() ?: 0\r\n                endWeek = weekFound?.groupValues?.get(2)?.toInt() ?: 0\r\n                type = if (startWeek == endWeek) {/*防止wakeup处理异常，强制把仅一周的课设定为连续周*/\r\n                    0\r\n                } else if (timeText.contains(\"单周\")) {\r\n                    1\r\n                } else if (timeText.contains(\"双周\")) {\r\n                    2\r\n                } else {/*默认为连续周*/\r\n                    0\r\n                }\r\n                // 考虑多 “星期”\r\n                val dayNodeRegex = \"\"\"星期.+?(?=<|星期|${'$'})\"\"\".toRegex()// 星期.+?(?=<|星期|$)\r\n                val dayNodeFound = dayNodeRegex.findAll(timeText)\r\n                dayNodeFound.forEach {\r\n                    val dayNodeText = it.value.trim() // 例如 星期六 上1,上2,上3,上4,下1,下2,下3,下4,晚1,晚2,晚3\r\n                    val courseDay = Common.otherHeader.indexOf(dayNodeText.substring(0,3))\r\n                    val nodePrefixToNode = mapOf(\"上\" to 0, \"中\" to 4, \"下\" to 6, \"晚\" to 10)\r\n                    val nodeTextRegex = \"\"\"[上中下晚]?\\d+\"\"\".toRegex()\r\n                    val nodeTextFound = nodeTextRegex.findAll(dayNodeText)\r\n\r\n                    val nodesList = mutableListOf<Int>()\r\n                    nodeTextFound.forEach {itt ->\r\n                        val nodeText = itt.value.trim()\r\n                        var curNode = 1\r\n                        if (nodeText.length>1 && nodePrefixToNode[nodeText.substring(0, 1)] != null) {\r\n                            // 为上1,上2,上3,上4,下1,下2,下3,下4,晚1,晚2,晚3\r\n                            curNode = nodePrefixToNode[nodeText.substring(0, 1)]!!.toInt() + (nodeText.substring(1).toInt())\r\n                        } else if (nodeText[0] in '0'..'9') {\r\n                            //为 11、12、13\r\n                            curNode = nodeText.toInt()\r\n                        } else {\r\n                            throw Exception(\"课程节数识别失败\")\r\n                        }\r\n                        nodesList.add(curNode)\r\n                    }\r\n                    // 原则上，课的Node应该是连续的。但是为了以防万一，还是做了不连续的话就截断，添加多个同名课程的处理\r\n                    if (nodesList.count() <= 0) {\r\n                        throw Exception(\"课程节数识别失败\")\r\n                    }\r\n                    nodesList.sort()\r\n                    var startNode = -1\r\n                    var endNode = -1\r\n                    var lastNode = -1\r\n                    for ((i, node) in nodesList.withIndex()) {\r\n                        if (i == 0) {\r\n                            startNode = node\r\n                            endNode = node\r\n                        } else if (lastNode + 1 == node) {\r\n                            // 依旧连续，继续\r\n                            endNode = node\r\n                        } else if (lastNode + 1 != node) {\r\n                            // 断开了，把前面连续的添加\r\n                            rt.add(\r\n                                Course(\r\n                                    name = \"$nameCourseName($nameClassName)\".trim(),\r\n                                    day = courseDay,\r\n                                    room = room.trim(),\r\n                                    teacher = teacher.trim(),\r\n                                    startNode = startNode,\r\n                                    endNode = endNode,\r\n                                    startWeek = startWeek,\r\n                                    endWeek = endWeek,\r\n                                    type = type,\r\n                                    credit = credit,\r\n                                    note = \"$noteCollege $noteCourseId $noteDesc\".trim()\r\n                                )\r\n                            )\r\n                            // 从当前开始重新计算连续\r\n                            startNode = node\r\n                            endNode = node\r\n                        }\r\n                        if (i == nodesList.count() - 1) {\r\n                            //末尾了，也需要添加\r\n                            rt.add(\r\n                                Course(\r\n                                    name = \"$nameCourseName($nameClassName)\".trim(),\r\n                                    day = courseDay,\r\n                                    room = room.trim(),\r\n                                    teacher = teacher.trim(),\r\n                                    startNode = startNode,\r\n                                    endNode = endNode,\r\n                                    startWeek = startWeek,\r\n                                    endWeek = endWeek,\r\n                                    type = type,\r\n                                    credit = credit,\r\n                                    note = \"$noteCollege $noteCourseId $noteDesc\".trim()\r\n                                )\r\n                            )\r\n                        }\r\n                        lastNode = node\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return rt\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/NWPUGraduateParser.kt b/src/main/java/parser/NWPUGraduateParser.kt
--- a/src/main/java/parser/NWPUGraduateParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/NWPUGraduateParser.kt	(date 1745507183716)
@@ -18,7 +18,7 @@
  * 之后再依次选择【课程与成绩】->【选课结果查询】，跳转至最终页面 https://yjsjy.nwpu.edu.cn/pyxx/pygl/xkjg/index
  * source 即为上述【选课结果查询】最终页面的网页源代码
  */
-class NWPUGraduateParser(source: String) : Parser(source) {
+class NWPUGraduateParser(source: String) : Parser() {
     var changanCount = 0
     var youyiCount = 0
     var currentSemesterText = "1970-1971秋"
@@ -245,7 +245,7 @@
                                     endWeek = endWeek,
                                     type = type,
                                     credit = credit,
-                                    note = "$noteCollege $noteCourseId $noteDesc".trim()
+                                    note = "$noteCollege $noteCourseId $noteDesc".trim(),
                                 )
                             )
                             // 从当前开始重新计算连续
@@ -266,7 +266,7 @@
                                     endWeek = endWeek,
                                     type = type,
                                     credit = credit,
-                                    note = "$noteCollege $noteCourseId $noteDesc".trim()
+                                    note = "$noteCollege $noteCourseId $noteDesc".trim(),
                                 )
                             )
                         }
Index: src/main/java/parser/ZjvtitParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\nimport Common\r\nimport bean.Course\r\nimport bean.CourseBaseBean\r\nimport bean.CourseDetailBean\r\nimport parser.Parser\r\n\r\nclass ZjvtitParser(source: String) : Parser(source) {\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val course: MutableList<Course> = mutableListOf()\r\n        val doc = org.jsoup.Jsoup.parse(source)\r\n        val courseTable = doc.select(\"table[class=scheduleTable table table-bordered table-hover]\")//整个课程表\r\n        val courses = courseTable.select(\"div.courseInfo\")\r\n        val courseNames: MutableList<String> = mutableListOf()\r\n        val courseBaseBeans: MutableList<CourseBaseBean> = mutableListOf()\r\n        val courseDetailBeans: MutableList<CourseDetailBean> = mutableListOf()\r\n        var courseNum = 0\r\n        for(courseInfo in courses){\r\n            val courseName = courseInfo.select(\"span:not([class])\").text().trim()\r\n            if(courseName !in courseNames){\r\n                courseNames.add(courseName)\r\n                courseBaseBeans.add(CourseBaseBean(courseNum,courseName,\"\",0,\"\"))\r\n                courseNum++\r\n            }\r\n        }\r\n        for(i in courseBaseBeans)\r\n            println(i)\r\n\r\n        for(courseInfoList in courseTable.select(\"[week]\")) {\r\n            var courseId: Int = -1\r\n            var courseName: String\r\n            var courseDay: Int\r\n            var courseRoom: String\r\n            var courseTeacher: String\r\n            var courseNode: Int\r\n            var courseStartWeek: Int\r\n            var courseEndWeek: Int\r\n            var courseType: Int\r\n            for(courseInfo in courseInfoList.select(\".courseInfo\")){\r\n                if (courseInfo.text() != \"\"){\r\n                    println(\"-----------------------------------------------------\")\r\n                    println(courseInfo)\r\n                    println(\"=====================================================\")\r\n                    courseName = courseInfo.select(\"span:not([class])\").text().trim()\r\n                    println(\"课程名称: $courseName\")\r\n                    //寻找课程名字对应的id\r\n                    for (i in courseBaseBeans) {\r\n                        if (i.courseName == courseName)\r\n                            courseId = i.id\r\n                    }\r\n                    courseDay = Common.englishAbbrWeekList.indexOf(courseInfoList.select(\"td\")[0].attr(\"week\"))\r\n                    courseRoom = courseInfo.select(\".place\")[0].text()\r\n                    courseTeacher = courseInfo.select(\".teacher\")[0].text()\r\n                    courseNode = courseInfoList.select(\"[lesson]\")[0].attr(\"lesson\").toInt()\r\n                    val betweenWeeks = divideName(courseInfo.select(\".WeekDetail\")[0].text())\r\n                    for (i in betweenWeeks) {\r\n                        courseType = i.first\r\n                        courseStartWeek = i.second.first\r\n                        courseEndWeek = i.second.second\r\n                        //添加detailNode\r\n\r\n                        println(\"添加detailNode: $courseId ,$courseTeacher \")\r\n                        courseDetailBeans.add(\r\n                            CourseDetailBean(\r\n                                courseId,\r\n                                courseDay,\r\n                                courseRoom,\r\n                                courseTeacher,\r\n                                courseNode,\r\n                                1,\r\n                                courseStartWeek,\r\n                                courseEndWeek,\r\n                                courseType,\r\n                                0\r\n                            )\r\n                        )\r\n                }\r\n            }\r\n            }\r\n        }\r\n        //合并重复课程\r\n            for(i in 0 until courseDetailBeans.size-1){\r\n                for (j in i+1 until  courseDetailBeans.size){\r\n                    if(\r\n                        (courseDetailBeans[i].id == courseDetailBeans[j].id) and\r\n                        (courseDetailBeans[i].day == courseDetailBeans[j].day) and\r\n                        (courseDetailBeans[i].room == courseDetailBeans[j].room) and\r\n                        (courseDetailBeans[i].teacher == courseDetailBeans[j].teacher) and\r\n                        (courseDetailBeans[i].startWeek == courseDetailBeans[j].startWeek) and\r\n                        (courseDetailBeans[i].endWeek == courseDetailBeans[j].endWeek)\r\n                    ){\r\n                        if(courseDetailBeans[i].startNode+courseDetailBeans[i].step==courseDetailBeans[j].startNode){\r\n                            courseDetailBeans[i].step+=courseDetailBeans[j].step\r\n                            courseDetailBeans[j] = CourseDetailBean(-1,1,\"1\",\"\",1,1,1,1,1,1)\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        //删除多余\r\n        val it = courseDetailBeans.iterator()\r\n        while(it.hasNext()){\r\n            if(it.next().id==-1)\r\n                it.remove()\r\n        }\r\n\r\n        //装填课程\r\n        for(i in courseDetailBeans){\r\n            var name = \"\"\r\n            for(j in courseBaseBeans){\r\n                if(i.id==j.id)\r\n                    name = j.courseName\r\n            }\r\n            course.add(\r\n                Course(name,\r\n                    i.day,\r\n                    i.room!!,\r\n                    i.teacher!!,\r\n                    i.startNode,\r\n                    i.startNode+i.step-1,\r\n                    i.startWeek,\r\n                    i.endWeek,\r\n                    i.type\r\n                )\r\n            )\r\n        }\r\n        return course\r\n    }\r\n    private fun divideName(name:String): MutableList<Pair<Int,Pair<Int,Int>>> {\r\n        val divide = name.split(\",\")\r\n        var flag: Int\r\n        val betweenWeeks: MutableList<Pair<Int, Pair<Int, Int>>> = mutableListOf()\r\n        var startWeek: Int\r\n        var endWeek: Int\r\n        for (node in divide) {\r\n            if(node==node.split(\"-\")[0]){\r\n                //第18周\r\n                if(node.indexOf(\"第\")==-1 && node.indexOf(\"周\")==-1){\r\n                    startWeek =  node.toInt()\r\n                    endWeek = startWeek\r\n                    betweenWeeks.add(Pair(0,Pair(startWeek,endWeek)))\r\n                }\r\n                else if(node.indexOf(\"第\")==-1 && node.indexOf(\"周\")!=-1){\r\n                    startWeek =  node.split(\"周\")[0].toInt()\r\n                    endWeek = startWeek\r\n                    betweenWeeks.add(Pair(0,Pair(startWeek,endWeek)))\r\n                }\r\n                else if(node.indexOf(\"第\")!=-1 && node.indexOf(\"周\")==-1){\r\n                    startWeek =  node.split(\"第\")[1].toInt()\r\n                    endWeek = startWeek\r\n                    betweenWeeks.add(Pair(0,Pair(startWeek,endWeek)))\r\n                }else if(node.indexOf(\"第\")!=-1 && node.indexOf(\"周\")!=-1){\r\n                    startWeek = node.split(\"第\")[1].split(\"周\")[0].toInt()\r\n                    endWeek = startWeek\r\n                    betweenWeeks.add(Pair(0,Pair(startWeek,endWeek)))\r\n                }\r\n\r\n            }\r\n            else {\r\n                //8-18 第8-18周 8-18周 第8-18 18周 8-18(单周)\r\n                val lNode = node.split(\"-\")[0]//第8 8\r\n                startWeek = if(lNode.indexOf(\"第\")==-1){//8\r\n                    //[\"8\",\"18周\"]\r\n                    lNode.toInt()\r\n                }else {\r\n                    lNode.split(\"第\")[1].toInt()\r\n                }\r\n                //18 18周 18(单周)\r\n                val rNode = node.split(\"-\")[1]//17周\r\n                endWeek = if (rNode.indexOf(\"周\")>2){\r\n                    rNode.split(\"(\")[0].toInt()\r\n                }else {\r\n                    //18周 18(单周)\r\n                    rNode.split(\"周\")[0].toInt()\r\n                }\r\n\r\n                flag = when {\r\n                    Common.countStr(node, \"单周\") != 0 -> 1\r\n                    Common.countStr(node, \"双周\") != 0 -> 2\r\n                    else -> 0\r\n                }\r\n                betweenWeeks.add(Pair(flag, Pair(startWeek, endWeek)))\r\n            }\r\n        }\r\n        return betweenWeeks\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/ZjvtitParser.kt b/src/main/java/parser/ZjvtitParser.kt
--- a/src/main/java/parser/ZjvtitParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/ZjvtitParser.kt	(date 1745507183639)
@@ -5,7 +5,7 @@
 import bean.CourseDetailBean
 import parser.Parser
 
-class ZjvtitParser(source: String) : Parser(source) {
+class ZjvtitParser(source: String) : Parser() {
 
     override fun generateCourseList(): List<Course> {
         val course: MutableList<Course> = mutableListOf()
@@ -113,7 +113,8 @@
                     name = j.courseName
             }
             course.add(
-                Course(name,
+                Course(
+                    name,
                     i.day,
                     i.room!!,
                     i.teacher!!,
@@ -121,7 +122,7 @@
                     i.startNode+i.step-1,
                     i.startWeek,
                     i.endWeek,
-                    i.type
+                    i.type,
                 )
             )
         }
Index: src/main/java/parser/FSTVCParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport Common.acquireInBlock\r\nimport bean.Course\r\nimport com.google.gson.GsonBuilder\r\nimport com.google.gson.annotations.SerializedName\r\nimport kotlinx.coroutines.*\r\nimport kotlinx.coroutines.sync.Semaphore\r\nimport main.java.bean.TimeDetail\r\nimport main.java.bean.TimeTable\r\nimport org.jsoup.Connection.Method\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport kotlin.math.ceil\r\n\r\n\r\n/**\r\n * 福州软件职业技术学院\r\n *\r\n * 注意：调用 `generateCourseList()` 后，其他重载函数才会返回正确信息\r\n *\r\n * @author LgCookie <lgc2333@126.com>\r\n */\r\nclass FSTVCParser(\r\n    phpSessionId: String,  // from cookies\r\n) : Parser(\"\") {\r\n    private val gson = GsonBuilder().create()\r\n    private val cookies = mapOf(\"PHPSESSID\" to phpSessionId)\r\n    private val baseUrl = \"https://jw.fzrjxy.com\"\r\n    private val studyPlanUrl = \"${baseUrl}/studentportal.php/Jxxx/xxjdxx\"\r\n\r\n    private val nodeNum = 12\r\n    private val maxWeek = 20\r\n\r\n    // 错峰第一批次专业表\r\n    private val firstPeakDepartments = setOf(\r\n        // 智能产业学院\r\n        \"软件技术\",\r\n        \"移动互联应用技术\",\r\n        \"信息安全技术应用\",\r\n        \"智能产品开发与应用\",\r\n        \"人工智能技术应用\",\r\n        // 智能建造产业学院\r\n        \"建设工程管理\",\r\n        \"建筑室内设计\",\r\n        \"工程造价\",\r\n        \"建筑智能化工程技术\",\r\n        \"智能建造技术\",\r\n        // 现代通信产业学院\r\n        \"现代通信技术\",\r\n        \"现代移动通信技术\",\r\n        \"智能互联网络技术\",\r\n        \"网络规划与优化技术\",\r\n        // 数据产业学院\r\n        \"大数据技术\",\r\n        \"区块链技术应用\",\r\n        \"云计算技术应用\",\r\n        \"工业软件开发技术\",\r\n    )\r\n\r\n    private data class StudyPlan(\r\n        /** 班级描述 */\r\n        @SerializedName(\"skbjmc\") val className: String,\r\n        @SerializedName(\"kcmc\") val courseName: String,\r\n        @SerializedName(\"skjsxm\") val teacher: String,\r\n        @SerializedName(\"zc\") val week: Int,\r\n        @SerializedName(\"skrq\") val date: String,\r\n        /** 课程节数，`-` 分隔 */\r\n        @SerializedName(\"jcshow\") val nodes: String,\r\n        @SerializedName(\"skcdmc\") val room: String?,\r\n        // @SerializedName(\"sknl\") val content: String,\r\n        @SerializedName(\"xq\") val semester: Int,\r\n        @SerializedName(\"xqs\") val day: Int,\r\n        @SerializedName(\"xn\") val schoolYear: String,\r\n    ) {\r\n        private var _nodesLi: List<Int>? = null\r\n        private val nodesLi: List<Int>\r\n            get() {\r\n                if (_nodesLi == null) {\r\n                    _nodesLi = nodes.split(\"-\").map { it.toInt() }\r\n                }\r\n                return _nodesLi!!\r\n            }\r\n        val startNode: Int get() = nodesLi.first()\r\n        val endNode: Int get() = nodesLi.last()\r\n    }\r\n\r\n    private data class StudyPlanAPIReturn(\r\n        val rows: List<StudyPlan>,\r\n        val total: Int,\r\n    )\r\n\r\n    private var tableName: String? = null\r\n    private var startDate: String? = null\r\n    private var timeTable: TimeTable? = null\r\n\r\n    private fun setTimeTable(isFirstTablePeak: Boolean) {\r\n        timeTable = if (isFirstTablePeak) {\r\n            TimeTable(\r\n                \"福软错峰第一批次时间表\", listOf(\r\n                    TimeDetail(1, \"08:25\", \"09:10\"),\r\n                    TimeDetail(2, \"09:15\", \"10:00\"),\r\n                    TimeDetail(3, \"10:10\", \"10:55\"),\r\n                    TimeDetail(4, \"11:00\", \"11:45\"),\r\n                    TimeDetail(5, \"13:50\", \"14:35\"),\r\n                    TimeDetail(6, \"14:40\", \"15:25\"),\r\n                    TimeDetail(7, \"15:35\", \"16:20\"),\r\n                    TimeDetail(8, \"16:25\", \"17:10\"),\r\n                    TimeDetail(9, \"18:30\", \"19:15\"),\r\n                    TimeDetail(10, \"19:25\", \"20:10\"),\r\n                    TimeDetail(11, \"20:20\", \"21:05\"),\r\n                    TimeDetail(12, \"21:15\", \"22:00\"),\r\n                )\r\n            )\r\n        } else {\r\n            TimeTable(\r\n                \"福软错峰第二批次时间表\", listOf(\r\n                    TimeDetail(1, \"08:45\", \"09:30\"),\r\n                    TimeDetail(2, \"09:35\", \"10:20\"),\r\n                    TimeDetail(3, \"10:30\", \"11:15\"),\r\n                    TimeDetail(4, \"11:20\", \"12:05\"),\r\n                    TimeDetail(5, \"13:50\", \"14:35\"),\r\n                    TimeDetail(6, \"14:40\", \"15:25\"),\r\n                    TimeDetail(7, \"15:35\", \"16:20\"),\r\n                    TimeDetail(8, \"16:25\", \"17:10\"),\r\n                    TimeDetail(9, \"18:30\", \"19:15\"),\r\n                    TimeDetail(10, \"19:25\", \"20:10\"),\r\n                    TimeDetail(11, \"20:20\", \"21:05\"),\r\n                    TimeDetail(12, \"21:15\", \"22:00\"),\r\n                )\r\n            )\r\n        }\r\n    }\r\n\r\n    private suspend fun getStudyPlanApiUrl(): String {\r\n        val soup = withContext(Dispatchers.IO) {\r\n            Jsoup.connect(studyPlanUrl).cookies(cookies).get()\r\n        }\r\n        val apiData = soup\r\n            .selectFirst(\"table#mainlist\")\r\n            .attr(\"data-options\")\r\n        val path = Regex(\"url:'(?<url>.+?)'\").find(apiData)!!.groups[\"url\"]!!.value\r\n        return \"${baseUrl}${path}\"\r\n    }\r\n\r\n    private suspend fun fetchStudyPlans(apiUrl: String, weekNum: Int? = null): List<StudyPlan> {\r\n        val limit = 30\r\n\r\n        suspend fun task(page: Int): StudyPlanAPIReturn {\r\n            val raw = withContext(Dispatchers.IO) {\r\n                Jsoup\r\n                    .connect(apiUrl)\r\n                    .cookies(cookies)\r\n                    .data(\r\n                        mapOf(\r\n                            \"page\" to page.toString(),\r\n                            \"rows\" to limit.toString(),\r\n                            \"zc\" to (weekNum ?: 0).toString(),\r\n                            \"sort\" to \"skrq\", // 日期从低到高\r\n                            \"order\" to \"asc\",\r\n                        )\r\n                    )\r\n                    .method(Method.POST)\r\n                    .execute()\r\n                    .body()\r\n            }\r\n            return gson.fromJson(raw, StudyPlanAPIReturn::class.java)\r\n        }\r\n\r\n        val firstData = task(1)\r\n        if (firstData.rows.size >= firstData.total) return firstData.rows\r\n\r\n        val totalPage = ceil(firstData.total.toDouble() / limit).toInt()\r\n        val sem = Semaphore(4)\r\n        return coroutineScope {\r\n            firstData.rows + (2..totalPage)\r\n                .map { page -> async { sem.acquireInBlock { task(page) } } }\r\n                .awaitAll()\r\n                .flatMap { it.rows }\r\n        }\r\n    }\r\n\r\n    private fun transformPlanToCourse(plan: StudyPlan): Course = Course(\r\n        name = plan.courseName,\r\n        day = plan.day,\r\n        room = plan.room ?: \"\",\r\n        teacher = plan.teacher,\r\n        startNode = plan.startNode,\r\n        endNode = plan.endNode,\r\n        startWeek = plan.week,\r\n        endWeek = plan.week,\r\n        type = 0,\r\n        // note = normalizeLineEnds(plan.content.trim())\r\n    )\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val apiUrl = runBlocking { getStudyPlanApiUrl() }\r\n        val plans = runBlocking { fetchStudyPlans(apiUrl) }  // 0 为全部周次\r\n\r\n        val p0 = plans.first()\r\n        tableName = \"福软${p0.className}课程表（${p0.schoolYear}第${p0.semester}学期）\"\r\n        val p0Date = SimpleDateFormat(\"yyyy-MM-dd\").parse(p0.date)\r\n        startDate = SimpleDateFormat(\"yyyy-MM-dd\").format(\r\n            Date(\r\n                p0Date.time\r\n                        - ((p0.week - 1).toLong() * 604800000)  // * 7 * 24 * 60 * 60 * 1000\r\n                        - ((p0.day - 1).toLong() * 86400000) // * 24 * 60 * 60 * 1000\r\n            )\r\n        )\r\n        val isFirstTablePeak = firstPeakDepartments.any { p0.className.contains(it) }\r\n        setTimeTable(isFirstTablePeak)\r\n\r\n        return plans.map(::transformPlanToCourse)\r\n    }\r\n\r\n    override fun getTableName(): String? = tableName\r\n\r\n    override fun getNodes(): Int = nodeNum\r\n\r\n    override fun getMaxWeek(): Int = maxWeek\r\n\r\n    override fun getStartDate(): String? = startDate\r\n\r\n    override fun generateTimeTable(): TimeTable? = timeTable\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/FSTVCParser.kt b/src/main/java/parser/FSTVCParser.kt
--- a/src/main/java/parser/FSTVCParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/FSTVCParser.kt	(date 1745507183623)
@@ -25,7 +25,7 @@
  */
 class FSTVCParser(
     phpSessionId: String,  // from cookies
-) : Parser("") {
+) : Parser() {
     private val gson = GsonBuilder().create()
     private val cookies = mapOf("PHPSESSID" to phpSessionId)
     private val baseUrl = "https://jw.fzrjxy.com"
@@ -191,7 +191,7 @@
         endNode = plan.endNode,
         startWeek = plan.week,
         endWeek = plan.week,
-        type = 0,
+        type = 0,,
         // note = normalizeLineEnds(plan.content.trim())
     )
 
Index: src/main/java/parser/JXNUParser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser;\r\n\r\nimport bean.Course;\r\nimport org.jetbrains.annotations.NotNull;\r\nimport org.jsoup.Jsoup;\r\nimport org.jsoup.nodes.Document;\r\nimport org.jsoup.nodes.Element;\r\nimport org.jsoup.select.Elements;\r\nimport parser.Parser;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\n/**\r\n * @author realzns\r\n * @date 2022/05/03\r\n */\r\npublic class JXNUParser extends Parser {\r\n    String source;\r\n    Document doc;\r\n\r\n    public JXNUParser(@NotNull String source) {\r\n        super(source);\r\n        this.source = source;\r\n        doc = Jsoup.parse(source);\r\n    }\r\n\r\n    @NotNull\r\n    @Override\r\n    public List<Course> generateCourseList() {\r\n        List<Course> courses = new ArrayList<>();\r\n        Elements trs = doc.getElementById(\"_ctl1_NewKcb\").select(\"tr\");\r\n        for (int row = 1; row < trs.size(); row++) {\r\n            Elements tds = trs.get(row).select(\"td\");\r\n            for (Element td : tds) {\r\n                if (td.attr(\"bgcolor\").equals(\"#66FFCC\")) {\r\n                    int day = tds.indexOf(td);\r\n                    int startNode = getStartNode(row);\r\n                    int duration = getDuration(startNode);\r\n\r\n                    if (row == 1 || row == 6) {\r\n                        //表格这两行多了一列\r\n                        day--;\r\n                    }\r\n\r\n                    System.out.printf(\"第%d天 第%d节: \", day, getStartNode(row));\r\n                    Course c = getCourse(td);\r\n                    System.out.println(\"|\" + startNode + \"|\" + (startNode + duration));\r\n                    c.setStartNode(startNode);\r\n                    c.setEndNode(startNode + duration - 1);\r\n                    courses.add(c);\r\n                    //System.out.println(c);\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"Done.\");\r\n\r\n\r\n        return courses;\r\n    }\r\n\r\n    private Course getCourse(Element td) {\r\n        /**\r\n         * 本适配方式依赖于HTML中课程信息的如下格式\r\n         *\r\n         * <div align=\"center\">\r\n         *  课程名\r\n         *  <br>( xxxx教室 )\r\n         *  <br>班级信息 &nbsp;\r\n         * </div>\r\n         *\r\n         * 若有更改可联系 realzns[at]jxnu.edu.cn 请求适配\r\n         */\r\n        //System.out.println(td.html());\r\n        String name, room, teacher;\r\n        Pattern p = Pattern.compile(\">\\\\s*(.*)\\\\s*<br>\\\\((.*)\\\\)\\\\s*<br>(.*)\\\\s*</div>\");\r\n        Matcher m = p.matcher(td.html());\r\n        m.find();\r\n        name = m.group(1);\r\n        room = m.group(2).trim();\r\n        teacher = m.group(3).replace(\" &nbsp;\", \"\");\r\n        System.out.print(name + \"|\" + room + \"|\" + teacher);\r\n\r\n        //本方法中只填入 name、room、teacher\r\n        //startWeek、endWeek、credit 在此 html 中获取不到\r\n        return new Course(name, 0, room, teacher,\r\n                0, 0, 1, 20, 0, 0f, \"\", \"\", \"\");\r\n    }\r\n\r\n    private int getStartNode(int row) {\r\n        return switch (row) {\r\n            case 1, 6 -> row;\r\n            case 2, 3, 4, 7 -> row + 1;\r\n\r\n            //晚课\r\n            case 8 -> 10;\r\n            default -> -1;\r\n        };\r\n    }\r\n\r\n    private int getDuration(int startNode) {\r\n        return switch (startNode) {\r\n            case 1, 6, 8, 10 -> 2;\r\n            default -> 1;\r\n        };\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/JXNUParser.java b/src/main/java/parser/JXNUParser.java
--- a/src/main/java/parser/JXNUParser.java	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/JXNUParser.java	(date 1745507183817)
@@ -22,7 +22,7 @@
     Document doc;
 
     public JXNUParser(@NotNull String source) {
-        super(source);
+        super();
         this.source = source;
         doc = Jsoup.parse(source);
     }
@@ -86,7 +86,7 @@
         //本方法中只填入 name、room、teacher
         //startWeek、endWeek、credit 在此 html 中获取不到
         return new Course(name, 0, room, teacher,
-                0, 0, 1, 20, 0, 0f, "", "", "");
+                0, 0, 1, 20, 0, 0f, "", "", "", );
     }
 
     private int getStartNode(int row) {
Index: src/main/java/parser/ECNUParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\n\r\nclass ECNUParser(source: String) : Parser(source) {\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val document = Jsoup.parse(source)\r\n\r\n        val table = document.select(\"table.table\")[1]\r\n        val tableData = table.select(\"thead\")[1]\r\n\r\n        val rows = tableData.select(\"tr\")\r\n        for (i in 1 until rows.size) {\r\n            val row = rows[i]\r\n            val tds = row.select(\"td\")\r\n\r\n            if (tds.size < 7) continue\r\n\r\n            val name = tds[0].text()\r\n            val courseCode = tds[1].text()\r\n            val className = tds[2].text()\r\n            val classCode = tds[3].text()\r\n            val teacher = tds[4].text()\r\n            val timeLocation = tds[5].text()\r\n            val comment = tds[6].text()\r\n\r\n            val timeLocationList = timeLocation.split(\"；\").dropLast(1)\r\n\r\n            for (tl in timeLocationList) {\r\n                val course = parseCourse(name, teacher, tl)\r\n                courseList.addAll(course)\r\n            }\r\n        }\r\n\r\n        return courseList\r\n    }\r\n\r\n    private fun parseCourse(name: String, teacher: String, timeLocation: String): List<Course> {\r\n        val courses = mutableListOf<Course>()\r\n        val parts = timeLocation.split(\"，\")\r\n\r\n        var weeks = listOf<Int>()\r\n        var days = listOf<Int>()\r\n        var sections = listOf<Int>()\r\n        var position = \"\"\r\n\r\n        for (part in parts) {\r\n            when {\r\n                part.contains(\"星期\") -> {\r\n                    days = parseDays(part)\r\n                }\r\n                part.contains(\"周\") && !part.contains(\"星期\") -> {\r\n                    weeks = parseWeeks(part)\r\n                }\r\n                part.contains(\"节\") -> {\r\n                    sections = parseSections(part)\r\n                }\r\n                else -> {\r\n                    position += \"$part,\"\r\n                }\r\n            }\r\n        }\r\n\r\n        position = position.trimEnd(',')\r\n\r\n        for (day in days) {\r\n            for (week in weeks) {\r\n                for (section in sections) {\r\n                    courses.add(Course(\r\n                        name = name,\r\n                        day = day,\r\n                        room = position,\r\n                        teacher = teacher,\r\n                        startNode = section,\r\n                        endNode = section,\r\n                        startWeek = week,\r\n                        endWeek = week,\r\n                        type = 0,\r\n                        credit = 0f,\r\n                        note = \"\",\r\n                    ))\r\n                }\r\n            }\r\n        }\r\n\r\n        return courses\r\n    }\r\n\r\n    private fun parseDays(part: String): List<Int> {\r\n        val dayMap = mapOf(\r\n            \"星期一\" to 1, \"星期二\" to 2, \"星期三\" to 3, \"星期四\" to 4,\r\n            \"星期五\" to 5, \"星期六\" to 6, \"星期日\" to 7, \"星期天\" to 7\r\n        )\r\n        return part.split(\"每周\").flatMap { dayPart ->\r\n            dayMap.filter { (key, _) -> dayPart.contains(key) }.values\r\n        }\r\n    }\r\n\r\n    private fun parseWeeks(part: String): List<Int> {\r\n        val weekRanges = part.split(\",\")\r\n        return weekRanges.flatMap { range ->\r\n            val weeks = range.split(\"-\").map { it.replace(Regex(\"[^0-9]\"), \"\").toInt() }\r\n            if (weeks.size == 1) listOf(weeks[0]) else (weeks[0]..weeks[1]).toList()\r\n        }\r\n    }\r\n\r\n    private fun parseSections(part: String): List<Int> {\r\n        val sectionRange = part.replace(Regex(\"[^0-9-]\"), \"\").split(\"-\")\r\n        return if (sectionRange.size == 1) {\r\n            listOf(sectionRange[0].toInt())\r\n        } else {\r\n            (sectionRange[0].toInt()..sectionRange[1].toInt()).toList()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/ECNUParser.kt b/src/main/java/parser/ECNUParser.kt
--- a/src/main/java/parser/ECNUParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/ECNUParser.kt	(date 1745507183545)
@@ -4,7 +4,7 @@
 import org.jsoup.Jsoup
 import parser.Parser
 
-class ECNUParser(source: String) : Parser(source) {
+class ECNUParser(source: String) : Parser() {
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
         val document = Jsoup.parse(source)
@@ -78,9 +78,7 @@
                         endNode = section,
                         startWeek = week,
                         endWeek = week,
-                        type = 0,
-                        credit = 0f,
-                        note = "",
+                        type = 0,,
                     ))
                 }
             }
Index: src/main/java/parser/ZhengFangParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport Common\r\nimport bean.Course\r\nimport java.io.File\r\n\r\nclass ZhengFangParser(source: String, private val type: Int) : Parser(source) {\r\n\r\n    private val brRegex = Regex(\"(<br>){3,}\")\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val doc = org.jsoup.Jsoup.parse(source)\r\n        val table1 = doc.getElementById(\"Table1\") ?: doc.getElementById(\"kbgrid_table\")\r\n        val trs = table1.getElementsByTag(\"tr\")\r\n        val importBeanList = ArrayList<ImportBean>()\r\n        var node: Int = -1\r\n        for (tr in trs) {\r\n            val tds = tr.getElementsByTag(\"td\")\r\n            var countFlag = false\r\n            var countDay = 0\r\n            for (td in tds) {\r\n                val courseSource = td.text().trim()\r\n                if (courseSource.length <= 1) {\r\n                    if (countFlag) {\r\n                        countDay++\r\n                    }\r\n                    continue\r\n                }\r\n                if (Common.otherHeader.contains(courseSource)) {\r\n                    //other list\r\n                    continue\r\n                }\r\n                val result = Common.parseHeaderNodeString(courseSource)\r\n                if (result != -1) {\r\n                    node = result\r\n                    countFlag = true\r\n                    continue\r\n                }\r\n                countDay++\r\n                when (type) {\r\n                    0 -> importBeanList.addAll(parseImportBean(countDay, td.html(), node))\r\n                    1 -> importBeanList.addAll(parseImportBean1(countDay, courseSource, node))\r\n                }\r\n            }\r\n        }\r\n        return importList2CourseList(importBeanList, source)\r\n    }\r\n\r\n    private fun parseImportBean(cDay: Int, html: String, node: Int): ArrayList<ImportBean> {\r\n        val courses = ArrayList<ImportBean>()\r\n        var isAbnormal = false\r\n        val courseSplits = if (html.substringBeforeLast(\"</td>\").contains(brRegex)) {\r\n            isAbnormal = true\r\n            html.substringBeforeLast(\"</td>\").split(brRegex.find(html)!!.groupValues[0], \"<br><br>\")\r\n        } else {\r\n            html.substringBeforeLast(\"</td>\").split(\"<br><br>\")\r\n        }\r\n        for (courseStr in courseSplits) {\r\n            val split = courseStr.substringAfter(\"\\\">\").substringBeforeLast(\"</a>\").split(\"<br>\")\r\n            if (split.isEmpty() || split.size < 3) continue\r\n            val temp = if (split[1] in Common.courseProperty) {\r\n                if (split.size == 4) {\r\n                    ImportBean(\r\n                        startNode = node, name = split[0],\r\n                        timeInfo = split[2],\r\n                        room = split[3], teacher = \"\", cDay = cDay\r\n                    )\r\n                } else {\r\n                    ImportBean(\r\n                        startNode = node, name = split[0],\r\n                        timeInfo = split[2],\r\n                        room = split[4], teacher = split[3], cDay = cDay\r\n                    )\r\n                }\r\n            } else {\r\n                if (split.size == 3) {\r\n                    if (!isAbnormal) {\r\n                        ImportBean(\r\n                            startNode = node, name = split[0],\r\n                            timeInfo = split[1],\r\n                            room = split[2], teacher = \"\", cDay = cDay\r\n                        )\r\n                    } else {\r\n                        ImportBean(\r\n                            startNode = node, name = split[0],\r\n                            timeInfo = split[1],\r\n                            room = \"\", teacher = split[2], cDay = cDay\r\n                        )\r\n                    }\r\n                } else {\r\n                    ImportBean(\r\n                        startNode = node, name = split[0],\r\n                        timeInfo = split[1],\r\n                        room = split[3], teacher = split[2], cDay = cDay\r\n                    )\r\n                }\r\n            }\r\n            courses.add(temp)\r\n        }\r\n        return courses\r\n    }\r\n\r\n    private fun parseImportBean1(cDay: Int, source: String, node: Int): ArrayList<ImportBean> {\r\n        val courses = ArrayList<ImportBean>()\r\n        val split = source.split(\" \".toRegex()).dropLastWhile { it.isEmpty() }\r\n        var preIndex = -1\r\n        var hasTypeFlag = false\r\n        for (i in split.indices) {\r\n            if (split[i].contains('{') && split[i].contains('}')) {\r\n                if (preIndex != -1) {\r\n                    if (split[preIndex - 1] in Common.courseProperty) {\r\n                        hasTypeFlag = true\r\n                    }\r\n                    val temp = ImportBean(\r\n                        startNode = node,\r\n                        name = if (hasTypeFlag && preIndex >= 2) split[preIndex - 2] else split[preIndex - 1],\r\n                        timeInfo = split[preIndex],\r\n                        room = \"\",\r\n                        teacher = \"\",\r\n                        cDay = cDay\r\n                    )\r\n                    if ((i - preIndex - 2) == 1) {\r\n                        temp.teacher = split[preIndex + 1]\r\n                    } else {\r\n                        temp.teacher = split[preIndex + 1]\r\n                        temp.room = split[preIndex + 2]\r\n                    }\r\n                    courses.add(temp)\r\n                    preIndex = i\r\n                } else {\r\n                    preIndex = i\r\n                }\r\n            }\r\n            if (i == split.size - 1) {\r\n                if (split[preIndex - 1] in Common.courseProperty) {\r\n                    hasTypeFlag = true\r\n                }\r\n                val temp = ImportBean(\r\n                    startNode = node,\r\n                    name = if (hasTypeFlag && preIndex >= 2) split[preIndex - 2] else split[preIndex - 1],\r\n                    timeInfo = split[preIndex],\r\n                    room = \"\",\r\n                    teacher = \"\",\r\n                    cDay = cDay\r\n                )\r\n                if ((i - preIndex) == 1) {\r\n                    temp.teacher = split[preIndex + 1]\r\n                } else {\r\n                    temp.teacher = split[preIndex + 1]\r\n                    temp.room = split[preIndex + 2]\r\n                }\r\n                courses.add(temp)\r\n            }\r\n        }\r\n        return courses\r\n    }\r\n\r\n    private fun importList2CourseList(importList: ArrayList<ImportBean>, source: String): List<Course> {\r\n        val retryList = arrayListOf<Int>()\r\n        val result = arrayListOf<Course>()\r\n        for (i in importList) {\r\n            val time = parseTime(i, i.timeInfo, i.startNode, source, i.name)\r\n            val day = if (i.timeInfo.substring(0, 2) in Common.chineseWeekList) time[0] else i.cDay\r\n            result.add(\r\n                Course(\r\n                    name = i.name, day = day, room = i.room ?: \"\",\r\n                    teacher = i.teacher ?: \"\", startNode = i.startNode,\r\n                    endNode = i.startNode + time[1] - 1,\r\n                    type = time[4],\r\n                    startWeek = time[2],\r\n                    endWeek = time[3]\r\n                )\r\n            )\r\n            if (day == 0) {\r\n                retryList.add(importList.size - 1)\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n    private fun parseTime(\r\n        importBean: ImportBean,\r\n        time: String,\r\n        startNode: Int,\r\n        source: String,\r\n        courseName: String\r\n    ): Array<Int> {\r\n        val result = Array(5) { 0 }\r\n        //按顺序分别为day, step, startWeek, endWeek, type\r\n\r\n        //day\r\n        if (time[0] == '周') {\r\n            val dayStr = time.substring(0, 2)\r\n            val day = Common.getWeekFromChinese(dayStr)\r\n            result[0] = day\r\n        }\r\n        if (result[0] == 0) {\r\n            var startIndex = source.indexOf(\">第${startNode}节</td>\")\r\n            if (startIndex == -1) {\r\n                startIndex = source.indexOf(\">第${Common.getNodeStr(startNode)}节</td>\")\r\n            }\r\n            var endIndex = 0\r\n            if (startIndex != -1) {\r\n                endIndex = source.indexOf(courseName, startIndex)\r\n            }\r\n            if (startIndex != -1 && endIndex != -1) {\r\n                result[0] = Common.countStr(source.substring(startIndex, endIndex), \"Center\")\r\n            }\r\n        }\r\n\r\n        //step\r\n        var step = 0\r\n        when {\r\n            time.contains(\"节/\") -> {\r\n                val numLocate = time.indexOf(\"节/\")\r\n                step = time.substring(numLocate - 1, numLocate).toInt()\r\n            }\r\n            time.contains(\",\") -> {\r\n                var locate = 0\r\n                step = 1\r\n                while (time.indexOf(\",\", locate) != -1 && locate < time.length) {\r\n                    step += 1\r\n                    locate = time.indexOf(\",\", locate) + 1\r\n                }\r\n            }\r\n            time.contains(\"第${startNode}节\") -> {\r\n                step = 1\r\n            }\r\n            time.contains(Common.singleNodePattern) -> {\r\n                val accStartNode = Common.singleNodePattern.find(time)!!.groupValues[1].toInt()\r\n                if (startNode != accStartNode) {\r\n                    importBean.startNode = accStartNode\r\n                    step = 1\r\n                }\r\n            }\r\n        }\r\n        if (step == 0) {\r\n            val matchResult = Common.nodePattern.find(time)\r\n            if (matchResult != null) {\r\n                val nodeInfo = matchResult.value\r\n                val nodes =\r\n                    nodeInfo.substring(1, nodeInfo.length - 1).split(\"-\".toRegex()).dropLastWhile { it.isEmpty() }\r\n                if (nodes.isNotEmpty()) {\r\n                    importBean.startNode = nodes[0].toInt()\r\n                }\r\n                if (nodes.size > 1) {\r\n                    step = nodes[1].toInt() - importBean.startNode + 1\r\n                }\r\n            }\r\n        }\r\n        result[1] = step\r\n\r\n        //周数\r\n        var startWeek = 1\r\n        var endWeek = 20\r\n        val matchResult = Common.weekPattern.find(time)\r\n        if (matchResult != null) {\r\n            val weekInfo = matchResult.value //{第2-16周\r\n            val weeks = weekInfo.substring(2, weekInfo.length - 1).split(\"-\".toRegex()).dropLastWhile { it.isEmpty() }\r\n            if (weeks.isNotEmpty()) {\r\n                startWeek = weeks[0].toInt()\r\n                result[2] = startWeek\r\n            }\r\n            if (weeks.size > 1) {\r\n                endWeek = weeks[1].toInt()\r\n                result[3] = endWeek\r\n            }\r\n        }\r\n\r\n        //单双周\r\n        if (time.contains(\"单周\")) {\r\n            result[4] = 1\r\n        } else if (time.contains(\"双周\")) {\r\n            result[4] = 2\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n}\r\n\r\ndata class ImportBean(\r\n    var name: String,\r\n    var timeInfo: String,\r\n    var teacher: String?,\r\n    var room: String?,\r\n    var startNode: Int,\r\n    var cDay: Int = 0\r\n)\r\n\r\nfun main() {\r\n    val file = File(\"./苏大医学.html\")\r\n    val parser = ZhengFangParser(file.readText(), 0)\r\n    parser.saveCourse()\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/ZhengFangParser.kt b/src/main/java/parser/ZhengFangParser.kt
--- a/src/main/java/parser/ZhengFangParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/ZhengFangParser.kt	(date 1745507183783)
@@ -4,7 +4,7 @@
 import bean.Course
 import java.io.File
 
-class ZhengFangParser(source: String, private val type: Int) : Parser(source) {
+class ZhengFangParser(source: String, private val type: Int) : Parser() {
 
     private val brRegex = Regex("(<br>){3,}")
 
@@ -166,9 +166,9 @@
                     name = i.name, day = day, room = i.room ?: "",
                     teacher = i.teacher ?: "", startNode = i.startNode,
                     endNode = i.startNode + time[1] - 1,
-                    type = time[4],
                     startWeek = time[2],
-                    endWeek = time[3]
+                    endWeek = time[3],
+                    type = time[4],
                 )
             )
             if (day == 0) {
Index: src/main/java/parser/ECJTUParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\n\r\n// 华东交大\r\nclass ECJTUParser(source: String) : Parser(source) {\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val doc = Jsoup.parse(source)\r\n        val kbtable = doc.select(\"table[class=table_border]\").first()\r\n        var teacher = \"\"\r\n        for (tr in kbtable.getElementsByTag(\"tr\")) {\r\n            val tds = tr.getElementsByTag(\"td\")\r\n            if (tds.size == 8) {\r\n                if (tds[0].text().trim() == \"节次\")\r\n                    continue\r\n                var courseName = \"\"\r\n                var startWeek = 1\r\n                var endWeek = 16\r\n                var startNode = 1\r\n                var endNode = 2\r\n                var type = 0\r\n                var day = -1\r\n                var room = \"\"\r\n                tds.forEach {\r\n                    day++\r\n                    if (day == 0) return@forEach\r\n                    //val courseInfo = Jsoup.parse(it).text().trim().split(\"<br>\")\r\n                    val courseInfo = it.html().split(\"<br>\").dropLast(1)\r\n                    if (courseInfo.isEmpty()) return@forEach\r\n                    var lastIndex = -1\r\n                    for (i in courseInfo.indices) {\r\n                        if (!courseInfo[i].contains('@') && courseInfo[i].trim().last().isDigit()) {\r\n                            val detail = courseInfo[i].trim().split(\" \")\r\n                            courseName = if (lastIndex == -1) {\r\n                                courseInfo[0].trim()\r\n                            } else {\r\n                                courseInfo[lastIndex + 1].trim()\r\n                            }\r\n                            if (detail.size == 2) {\r\n                                if (courseInfo[i - 1].contains('@')) {\r\n                                    teacher = courseInfo[i - 1].substringBefore('@').trim()\r\n                                    room = courseInfo[i - 1].substringAfter('@').trim()\r\n                                } else {\r\n                                    teacher = \"\"\r\n                                    room = \"\"\r\n                                }\r\n                            } else if (detail.size == 3) {\r\n                                teacher = detail[0]\r\n                                room = \"\"\r\n                            } else {\r\n                                teacher = \"\"\r\n                                room = \"\"\r\n                            }\r\n                            type = when {\r\n                                detail[detail.size - 2].contains('单') -> 1\r\n                                detail[detail.size - 2].contains('双') -> 2\r\n                                else -> 0\r\n                            }\r\n                            startWeek = detail[detail.size - 2].substringBefore('-').trim().toInt()\r\n                            endWeek = if (type == 0) {\r\n                                detail[detail.size - 2].substringAfter('-').trim().toInt()\r\n                            } else {\r\n                                detail[detail.size - 2].substringAfter('-').substringBefore('(').trim().toInt()\r\n                            }\r\n                            startNode = detail.last().trim().substringBefore(',').toInt()\r\n                            endNode = detail.last().trim().substringAfterLast(',').toInt()\r\n\r\n                            courseList.add(\r\n                                Course(\r\n                                    name = courseName, day = day, room = room,\r\n                                    teacher = teacher, startNode = startNode,\r\n                                    endNode = endNode, startWeek = startWeek,\r\n                                    endWeek = endWeek, type = type\r\n                                )\r\n                            )\r\n\r\n                            lastIndex = i\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/ECJTUParser.kt b/src/main/java/parser/ECJTUParser.kt
--- a/src/main/java/parser/ECJTUParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/ECJTUParser.kt	(date 1745507183615)
@@ -5,7 +5,7 @@
 import parser.Parser
 
 // 华东交大
-class ECJTUParser(source: String) : Parser(source) {
+class ECJTUParser(source: String) : Parser() {
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
         val doc = Jsoup.parse(source)
@@ -73,7 +73,7 @@
                                     name = courseName, day = day, room = room,
                                     teacher = teacher, startNode = startNode,
                                     endNode = endNode, startWeek = startWeek,
-                                    endWeek = endWeek, type = type
+                                    endWeek = endWeek, type = type,
                                 )
                             )
 
Index: src/main/java/parser/NFUParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\nimport java.util.regex.Pattern\r\n\r\nval pattern = Pattern.compile(\"第[0-9]*周\")\r\n\r\nclass NFUParser(source: String):Parser(source) {\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n\r\n        val courseList = arrayListOf<Course>()\r\n        val courseStrList = arrayListOf<String>()\r\n        var courseStr:String\r\n        var name:String\r\n        var dayOfWeek:Int\r\n        var type:Int\r\n        var startWeek:Int\r\n        var endWeek:Int\r\n        var startNode:Int\r\n        var endNode:Int\r\n        var teacher:String\r\n        var place:String\r\n\r\n        val doc = Jsoup.parse(source)\r\n        val trs = doc.select(\"tr.ui-widget-content\")\r\n\r\n        for (i in 0 until trs.size){\r\n            courseStrList.clear()\r\n            val tr = trs[i]\r\n            val span = tr.select(\"span\")\r\n\r\n            name = span.first().text()\r\n\r\n            for (j in 3..9){\r\n                var str = span[j].text()\r\n\r\n                if (str != \"\"){\r\n                    if (str.contains(\"/\")){\r\n                        str = str.replace(\"/ \",\"/\")\r\n                        val strs = str.split(\"/\").map {\r\n                            it + \" ${j-2}\"\r\n                        }\r\n                        courseStrList.addAll(strs)\r\n                    }else{\r\n                        courseStrList.add((str+\" ${j-2}\"))\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (c in courseStrList){\r\n                courseStr = c\r\n                if (courseStr.contains(\"单\")){\r\n                    type = 1\r\n                    courseStr = courseStr.replace(\" 单周\",\"\")\r\n                }else if (courseStr.contains(\"双\")){\r\n                    type =2\r\n                    courseStr = courseStr.replace(\" 双周\",\"\")\r\n                }else{\r\n                    type = 0\r\n                }\r\n\r\n                if (courseStr.contains(\"第\")){\r\n                    val matcher = pattern.matcher(courseStr)\r\n                    if (matcher.find()){\r\n                        val onlyWeek = matcher.group()\r\n                        val onlyWeekNum = onlyWeek.subSequence(1,onlyWeek.length-1)\r\n                        courseStr = courseStr.replace(\"第${onlyWeekNum}周\",\"${onlyWeekNum}-${onlyWeekNum}周\")\r\n                    }\r\n                }\r\n\r\n                val info = courseStr.split(\" \")\r\n\r\n                val weekInfo = info[0].trim('周')\r\n                val nodeInfo = info[1].trim('节')\r\n\r\n                val week = weekInfo.split(\"-\")\r\n                val node = nodeInfo.split(\"-\")\r\n\r\n                startNode = node[0].toInt()\r\n                endNode = node[1].toInt()\r\n\r\n                startWeek = week[0].toInt()\r\n                endWeek = week[1].toInt()\r\n\r\n                teacher = info[2]\r\n                if (info.size < 5){\r\n                    place = \"\"\r\n                    dayOfWeek = info[3].toInt()\r\n                }else{\r\n                    place = info[3]\r\n                    dayOfWeek = info[4].toInt()\r\n                }\r\n\r\n\r\n                courseList.add(\r\n                    Course(\r\n                        name = name, room = place,\r\n                        teacher = teacher, day = dayOfWeek,\r\n                        startNode = startNode, endNode = endNode,\r\n                        startWeek = startWeek, endWeek = endWeek,\r\n                        type = type\r\n                    )\r\n                )\r\n                //print(\"$name  ${startWeek}-${endWeek}周  ${type}  星期${dayOfWeek}  ${startNode}-${endNode}节  ${teacher}  ${place}\\n\")\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/NFUParser.kt b/src/main/java/parser/NFUParser.kt
--- a/src/main/java/parser/NFUParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/NFUParser.kt	(date 1745507183602)
@@ -7,7 +7,7 @@
 
 val pattern = Pattern.compile("第[0-9]*周")
 
-class NFUParser(source: String):Parser(source) {
+class NFUParser(source: String):Parser() {
 
     override fun generateCourseList(): List<Course> {
 
@@ -97,11 +97,11 @@
 
                 courseList.add(
                     Course(
-                        name = name, room = place,
-                        teacher = teacher, day = dayOfWeek,
+                        name = name, day = dayOfWeek,
+                        room = place, teacher = teacher,
                         startNode = startNode, endNode = endNode,
                         startWeek = startWeek, endWeek = endWeek,
-                        type = type
+                        type = type,
                     )
                 )
                 //print("$name  ${startWeek}-${endWeek}周  ${type}  星期${dayOfWeek}  ${startNode}-${endNode}节  ${teacher}  ${place}\n")
Index: src/main/java/parser/KingosoftZXParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport Common\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\nimport java.io.File\r\n\r\n// 青果正选结果解析\r\nclass KingosoftZXParser(source: String) : Parser(source) {\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n\r\n        source.split(\"<head>\", \"</head>\").forEach forHTML@{ html ->\r\n            val doc = Jsoup.parse(html)\r\n            doc.getElementById(\"pageRpt\")?.getElementsByTag(\"table\")?.forEach forTable@{ table ->\r\n                if (!table.text().trimStart().startsWith(\"选定\")) return@forTable\r\n                table.select(\"tr[style]\").forEach { tr ->\r\n                    val courseName = tr.child(1).text().trim().substringAfterLast(']')\r\n                    if (courseName.isEmpty()) return@forEach\r\n                    val teacher = tr.child(4).text().substringBefore('[').trim()\r\n                    val infos = tr.child(10).html().split(\"<br>\")\r\n                    val credit = try {\r\n                        tr.child(2).text().trim().toFloat()\r\n                    } catch (e: Exception) {\r\n                        0f\r\n                    }\r\n                    infos.forEach forInfo@{ info ->\r\n                        if (info.isBlank()) return@forInfo\r\n                        val infoSplit = info.split('/')\r\n                        var room = \"\"\r\n                        if (infoSplit.size > 1) {\r\n                            room = infoSplit[1].trim()\r\n                        }\r\n                        if (courseName.startsWith('m') && room.isEmpty()) {\r\n                            room = \"在线\"\r\n                        }\r\n                        val timeText = infoSplit[0]\r\n                        val weekText = timeText.substringBefore(\"星期\")\r\n                        val weekdayAndSectionText = timeText.substringAfter(\"星期\")\r\n\r\n                        var type = 0\r\n                        if (weekText.contains('单')) {\r\n                            type = 1\r\n                        } else if (weekText.contains('双')) {\r\n                            type = 2\r\n                        }\r\n\r\n                        val day = Common.getWeekFromChinese(\"周${weekdayAndSectionText[0]}\")\r\n                        val nodes = weekdayAndSectionText.substringAfter('[').substringBefore('节').split('-')\r\n                        val startNode = nodes.first().toInt()\r\n                        val endNode = nodes.last().toInt()\r\n                        val weeks = weekText.substringAfterLast('[').substringBefore('周')\r\n                                .removeSuffix(\"单\").removeSuffix(\"双\").split('-')\r\n                        val startWeek = weeks.first().toInt()\r\n                        val endWeek = weeks.last().toInt()\r\n\r\n                        courseList.add(Course(name = courseName, day = day, room = room, teacher = teacher,\r\n                                startNode = startNode, endNode = endNode, startWeek = startWeek, endWeek = endWeek,\r\n                                type = type, credit = credit))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return courseList\r\n    }\r\n\r\n}\r\n\r\nfun main() {\r\n    KingosoftZXParser(File(\"/Users/yzune/YZune_Git/database/python/65620.洛阳理工学院.html\").readText()).saveCourse()\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/KingosoftZXParser.kt b/src/main/java/parser/KingosoftZXParser.kt
--- a/src/main/java/parser/KingosoftZXParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/KingosoftZXParser.kt	(date 1745507183704)
@@ -7,7 +7,7 @@
 import java.io.File
 
 // 青果正选结果解析
-class KingosoftZXParser(source: String) : Parser(source) {
+class KingosoftZXParser(source: String) : Parser() {
 
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
@@ -56,9 +56,11 @@
                         val startWeek = weeks.first().toInt()
                         val endWeek = weeks.last().toInt()
 
-                        courseList.add(Course(name = courseName, day = day, room = room, teacher = teacher,
-                                startNode = startNode, endNode = endNode, startWeek = startWeek, endWeek = endWeek,
-                                type = type, credit = credit))
+                        courseList.add(Course(
+                            name = courseName, day = day, room = room, teacher = teacher,
+                            startNode = startNode, endNode = endNode, startWeek = startWeek, endWeek = endWeek,
+                            type = type, credit = credit,
+                        ))
                     }
                 }
             }
Index: src/main/java/parser/GDBYXYParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport Common\r\nimport bean.Course\r\nimport com.google.gson.JsonArray\r\n//import jdk.nashorn.internal.parser.JSONParser\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\nimport java.io.File\r\nimport java.util.*\r\nimport java.util.regex.Pattern\r\n\r\n\r\nclass GDBYXYParser(source: String) : Parser(source) {\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val list = ArrayList<Course>()\r\n        var course: Course? = null\r\n\r\n\r\n        //正则匹配\r\n        //“[2,6-10,14,18周]四[7-8节]双”，获取星期几;获取第几节开始和结束，以及单双周;周\\u5468节\\u8282\r\n        val pTimeInfo = Pattern.compile(\"^\\\\[(.+)\\\\u5468\\\\]([\\\\u4e00-\\\\u9fa5])\\\\[(.+)\\\\u8282\\\\]([\\\\u5355,\\\\u53cc]?)$\")\r\n\r\n        val doc = org.jsoup.Jsoup.parse(source)\r\n        //println(doc)\r\n        val tablepageRpt = doc.getElementById(\"pageRpt\")\r\n        //println(tablepageRpt)\r\n        //选中含有课程信息的table\r\n        val trueTable = tablepageRpt.child(0).child(0).child(0).child(2)\r\n        //从td元素提取字符串\r\n        val tds = trueTable.getElementsByTag(\"td\")\r\n\r\n        //遍历td元素\r\n        for (td in tds) {\r\n            val courseSource = td.text().trim()\r\n            //若td元素内字符串为空则进行下一次循环\r\n            if (courseSource.length <= 1) {\r\n                continue\r\n            }\r\n            //字符串去空格并被<br>分割\r\n            val temp = td.html().trim().split(\"<br>\".toRegex()).toTypedArray()\r\n            //遍历被<br>分割的字符串\r\n            for ((index, brstr) in temp.withIndex()) {\r\n                //若字符串为空则进行下一次循环\r\n                if (brstr.length <= 1) {\r\n                    continue\r\n                }\r\n                //若匹配到类似\"[B0241045]JSP\"字段则触发\r\n                if (brstr.matches(Regex(\"^\\\\[[A-Z][0-9]+\\\\].+$\"))) {\r\n                    //从\"]\"往后截取字符串\r\n                    val name: String = brstr.substring(brstr.indexOf(\"]\")+1)                 //课程名\r\n\r\n                    //temp[brstr的索引值+2]获取时间信息\r\n                    val mTimeInfo = pTimeInfo.matcher(temp[index + 2])\r\n                    if(mTimeInfo.find()){\r\n                        //从时间信息里获取周几\r\n                        val day: Int = Common.getWeekFromChinese(\"周\" + mTimeInfo.group(2))    //该课程的是星期几（7代表星期天）参数范围：1 - 7\r\n\r\n                        //temp[brstr的索引值+3]获取教室地方\r\n                        val room: String                                                                        //教室\r\n                        val strArray = temp[index + 3].trim().split(\"_\".toRegex()).toTypedArray()\r\n\r\n                        //test让控制台输出数组内容\r\n                        /*print(\"strArray:[\")\r\n                        for (str in strArray){\r\n                            print(\"'\" + str + \"',\")\r\n                        }\r\n                        print(\"]\")*/\r\n\r\n                        room = when{\r\n                            temp[index + 3] == \"\" ->{//针对地点为空的情况\r\n                                \"\"\r\n                            }\r\n                            temp[index + 3].indexOf(\"_\") == -1 ->{//针对类似 temp[index + 3]:\"西534定向越野71 \" + temp[index + 4]:\"田径场\",若不存在\"_\"\r\n                                temp[index + 3]+temp[index + 4]\r\n                            }\r\n                            else ->{\r\n                                strArray[0] + \"-\" + strArray[1]\r\n                            }\r\n                        }\r\n\r\n                        println(room)\r\n\r\n                        //temp[brstr的索引值+1]获取教师名字\r\n                        val teacher: String = temp[index + 1]                                                   //老师\r\n                        //println(teacher)\r\n                        //temp[brstr的索引值+2]获取类似\"[3-4节]双\"\r\n\r\n                        val startNode: Int                                 //开始为第几节课\r\n                        val endNode: Int                                   //结束时为第几节课\r\n                        val NodeNumstr = mTimeInfo.group(3)         //获取类似\"[12节]\"字段内的\"12\"\r\n                        //若只有数字则直接str转数字\r\n                        if (NodeNumstr.matches(Regex(\"^[0-9]{1,2}$\"))) {\r\n                            startNode = NodeNumstr.toInt()\r\n                            endNode = NodeNumstr.toInt()\r\n                        } else {\r\n                            //字符串去空格并被\"-\"分割\r\n                            val strArray = NodeNumstr.trim().split(\"-\".toRegex()).toTypedArray()\r\n                            startNode = strArray[0].toInt()\r\n                            endNode = strArray[1].toInt()\r\n                        }\r\n\r\n                        var type: Int               //单双周，每周为0，单周为1，双周为2\r\n                        type = when {\r\n                            mTimeInfo.group(4) == \"单\" -> {\r\n                                1\r\n                            }\r\n                            mTimeInfo.group(4) == \"双\" -> {\r\n                                2\r\n                            }\r\n                            else -> {\r\n                                0\r\n                            }\r\n                        }\r\n\r\n                        //字符串去空格并被\",\"分割\r\n                        val startendArray = mTimeInfo.group(1).trim().split(\",\".toRegex()).toTypedArray()\r\n                        //遍历字符串数组\r\n                        for (str: String in startendArray) {\r\n                            val startWeek: Int          //开始周\r\n                            val endWeek: Int            //结束周\r\n                            // 处理开始周和结束周\r\n                            //若只有数字则直接str转数字\r\n                            if (str.matches(Regex(\"^[0-9]{1,2}$\"))) {\r\n                                startWeek = str.toInt()\r\n                                endWeek = str.toInt()\r\n                                course = Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type)\r\n                                list.add(course)\r\n                            } else {\r\n                                //字符串去空格并被\"-\"分割\r\n                                val strArray = str.trim().split(\"-\".toRegex()).toTypedArray()\r\n                                startWeek = strArray[0].toInt()\r\n                                endWeek = strArray[1].toInt()\r\n                                course = Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type)\r\n                                list.add(course)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return list\r\n    }\r\n\r\n}\r\n\r\nfun main() {\r\n    // 示例中用了相对路径，Windows 下可能需要修改\r\n    // 建议从项目外引用 html 文件\r\n    // 提交时一定不要上传 html 文件，涉及隐私问题\r\n    val file = File(\"E:\\\\SoftwareDevelopment\\\\Html\\\\课程表2.html\")\r\n    val parser = GDBYXYParser(file.readText())\r\n    parser.saveCourse()\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/GDBYXYParser.kt b/src/main/java/parser/GDBYXYParser.kt
--- a/src/main/java/parser/GDBYXYParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/GDBYXYParser.kt	(date 1745507183808)
@@ -11,7 +11,7 @@
 import java.util.regex.Pattern
 
 
-class GDBYXYParser(source: String) : Parser(source) {
+class GDBYXYParser(source: String) : Parser() {
 
     override fun generateCourseList(): List<Course> {
         val list = ArrayList<Course>()
@@ -125,14 +125,14 @@
                             if (str.matches(Regex("^[0-9]{1,2}$"))) {
                                 startWeek = str.toInt()
                                 endWeek = str.toInt()
-                                course = Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type)
+                                course = Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type,)
                                 list.add(course)
                             } else {
                                 //字符串去空格并被"-"分割
                                 val strArray = str.trim().split("-".toRegex()).toTypedArray()
                                 startWeek = strArray[0].toInt()
                                 endWeek = strArray[1].toInt()
-                                course = Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type)
+                                course = Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type,)
                                 list.add(course)
                             }
                         }
Index: .idea/MarsCodeWorkspaceAppSettings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/MarsCodeWorkspaceAppSettings.xml b/.idea/MarsCodeWorkspaceAppSettings.xml
new file mode 100644
--- /dev/null	(date 1745490354912)
+++ b/.idea/MarsCodeWorkspaceAppSettings.xml	(date 1745490354912)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="com.codeverse.userSettings.MarscodeWorkspaceAppSettingsState">
+    <option name="ckgOperationStatus" value="SUCCESS" />
+    <option name="progress" value="0.9520958" />
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/parser/SUESParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport main.java.bean.TimeDetail\r\nimport main.java.bean.TimeTable\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\nimport java.time.LocalDate\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Locale\r\nimport kotlin.collections.ArrayList\r\n\r\nclass SUESParser(source: String) : Parser(source) {\r\n\r\n    //document.getElementById(\"main\").contentWindow.document.getElementById(\"contentListFrame\").contentWindow\r\n    private val dom = Jsoup.parse(source)\r\n\r\n    //“按照时间顺序处理课程”\r\n    var followTimeOrder = true\r\n\r\n    //类似“小爱课程表”的自定义课程数据类\r\n    data class MyCourse(\r\n        var name: String,\r\n        var position: String,\r\n        var teacher: String,\r\n        var weeks: ArrayList<Int>,\r\n        var day: Int,\r\n        var sections: ArrayList<Int>,\r\n        //当然，小爱没有下面这几个字段\r\n        var note: String = \"\",\r\n        var credit: Float = 0f,\r\n        var startTime: String = \"\",\r\n        var endTime: String = \"\"\r\n    )\r\n\r\n    private val courseInfos = arrayListOf<MyCourse>()\r\n\r\n    //将自定义课程类转换成需要的课程类\r\n    private fun myCourse2Course(courseInfos: ArrayList<MyCourse>): ArrayList<Course> {\r\n        val res = arrayListOf<Course>()\r\n\r\n        courseInfos.forEach { e ->\r\n            //将非连续的节次以及跨越中午的节次分段\r\n            var splitMidday = false\r\n            val sections = arrayListOf<List<Int>>()\r\n            val s = e.sections\r\n            if (s.isNotEmpty()) {\r\n                var temp = arrayListOf(s[0])\r\n                for (i in 1 until s.count()) {\r\n                    if (s[i - 1] + 1 != s[i] || s[i-1] == 4) {\r\n                        sections.add(temp)\r\n                        temp = arrayListOf(s[i])\r\n                    } else {\r\n                        temp.add(s[i])\r\n                    }\r\n                    if (s[i - 1] == 4 && s[i] == 5) {\r\n                        splitMidday = true\r\n                    }\r\n                }\r\n                sections.add(temp)\r\n            }\r\n\r\n            //按分段后的连续节次分别创建Course对象导入\r\n            sections.forEach {\r\n                Common.weekIntList2WeekBeanList(e.weeks).forEach { week ->\r\n                    res.add(\r\n                        Course(\r\n                            name = e.name,\r\n                            teacher = e.teacher,\r\n                            room = e.position,\r\n                            startNode = it.first(),\r\n                            endNode = it.last(),\r\n                            startWeek = week.start,\r\n                            endWeek = week.end,\r\n                            type = week.type,\r\n                            day = e.day,\r\n                            note = e.note,\r\n                            credit = e.credit,\r\n                            startTime = e.startTime,\r\n                            endTime = e.endTime\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    //转换课程节次\r\n    //“按时间顺序”时将9,10,11,12,13,14节调整为11,12,13,14,9,10\r\n    private fun getSection(s: Int): Int {\r\n        if (followTimeOrder) {\r\n            if (s < 8) {\r\n                return s + 1\r\n            } else if (s < 12) {\r\n                return s + 3\r\n            } else if (s < 14) {\r\n                return s - 3\r\n            }\r\n        }\r\n        return s + 1\r\n    }\r\n\r\n    private var termFrom = 0\r\n    private var termStart = 0\r\n    private var termEnd = 0\r\n    private var termLength = 0\r\n\r\n    //获取学期总周数，顺便保存处理validWeeks字符串所需的参数\r\n    override fun getMaxWeek(): Int? {\r\n        val termInfo = Regex(\"\"\"table0\\.marshalTable\\((.+?),(.+?),(.+?)\\);\"\"\").find(source)\r\n        return if (termInfo != null) {\r\n            termFrom = termInfo.groupValues[1].toInt() //validWeeks字符串的起始位置\r\n            termStart = termInfo.groupValues[2].toInt() //开始周（第一周）\r\n            termEnd = termInfo.groupValues[3].toInt() //结束周\r\n            termLength = termEnd - termStart + 1\r\n            termLength\r\n        } else null\r\n    }\r\n\r\n    //处理validWeeks字符串，返回weekIntList\r\n    private fun getWeeks(validWeeks: String): ArrayList<Int> {\r\n        val week = arrayListOf<Int>()\r\n        val str = validWeeks.repeat(2)\r\n        for (i in termStart..termEnd) {\r\n            if (str[termFrom + i - 2] == '1') {\r\n                week.add(i)\r\n            }\r\n        }\r\n        return week\r\n    }\r\n\r\n    //获取课程表名称，这里用日期命名\r\n    override fun getTableName(): String = \"${LocalDate.now()}导入的课表\"\r\n\r\n    //获取节点（时间表一天的课程节数？）\r\n    //generateTimeTable().timeList.count()\r\n    override fun getNodes(): Int = 14\r\n\r\n    //获取起始日期\r\n    //找到最早开始的课程。通过其“第一次上课时间”推断开学日期\r\n    //理论上任意课程都能推出来，后面研究一下\r\n    override fun getStartDate(): String {\r\n        //英文浏览器环境会显示Sep 6, 2022\r\n        //中文浏览器环境会显示2022-9-6\r\n        val cnFormatter = DateTimeFormatter.ofPattern(\"yyyy-M-d\")\r\n        val enFormatter = DateTimeFormatter.ofPattern(\"MMM d, yyyy\", Locale(\"en\"))\r\n\r\n        var firstCourseName = \"\"\r\n        var firstCourseDate = LocalDate.of(1970, 1, 1)\r\n        fun getDate(str: String): LocalDate? {\r\n            return if (str.count { it == '-' } == 2) {\r\n                LocalDate.parse(str, cnFormatter)\r\n            } else if (str.count { it == ',' } == 1) {\r\n                LocalDate.parse(str, enFormatter)\r\n            } else {\r\n                null\r\n            }\r\n        }\r\n\r\n        dom.select(\".listTable\")[1].select(\"tr\").drop(1).forEach {\r\n            val cells = it.select(\"td\").map { i -> i.text() }\r\n            val listCourseID = cells[5]\r\n            val listCourseName = cells[3] + if (listCourseID.isNotBlank()) \"($listCourseID)\" else \"\"\r\n            val listFirstDate = getDate(cells[8])\r\n            if (listFirstDate != null) {\r\n                if (firstCourseDate == LocalDate.of(1970, 1, 1) ||\r\n                    firstCourseDate > listFirstDate\r\n                ) {\r\n                    firstCourseName = listCourseName\r\n                    firstCourseDate = listFirstDate\r\n                }\r\n            }\r\n        }\r\n\r\n        var firstDay = 8\r\n        var firstWeek = termLength + 1\r\n        courseInfos.forEach {\r\n            if (it.name == firstCourseName) {\r\n                if (it.weeks[0] < firstWeek) {\r\n                    firstWeek = it.weeks[0]\r\n                    firstDay = it.day\r\n                } else if (it.weeks[0] == firstWeek && it.day < firstDay) {\r\n                    firstDay = it.day\r\n                }\r\n            }\r\n        }\r\n\r\n        if (firstDay < 8 && firstWeek <= termLength && firstCourseDate != LocalDate.of(1970, 1, 1)) {\r\n            firstCourseDate = firstCourseDate.minusDays(((firstWeek - 1) * 7 + firstDay - 1).toLong())\r\n            firstCourseDate = firstCourseDate.minusDays((firstCourseDate.dayOfWeek.value - 1).toLong())\r\n            return cnFormatter.format(firstCourseDate)\r\n        }\r\n        return \"2021-9-6\" //找不到就摆烂了，返回Generator原来包含的日期\r\n    }\r\n\r\n    //生成时间表\r\n    //被我写死了，时间安排应该一时半会儿不会有什么大变动\r\n    override fun generateTimeTable(): TimeTable {\r\n        //by stevenlele\r\n        /*\r\n        val timeList = arrayListOf<TimeDetail>()\r\n        dom.select(\".listTable\")[0].select(\"tr\")[1].select(\"td\").drop(1).forEachIndexed { i, td ->\r\n            val text = td.text()\r\n            val time = Regex(\"\"\"\\((.*?)~(.*?)\\)\"\"\").find(text)\r\n            if (time != null) {\r\n                timeList.add(\r\n                    TimeDetail(\r\n                        node = i + 1,\r\n                        startTime = time.groupValues[1],\r\n                        endTime = time.groupValues[2]\r\n                    )\r\n                )\r\n            }\r\n        }\r\n        */\r\n\r\n        //上课顺序:1,2,3,4,5,6,7,8,13,14,9,10,11,12。在课表界面显示如此，13、14就在最后。\r\n        val timeList: List<TimeDetail>\r\n        if (followTimeOrder) {\r\n            timeList = listOf(\r\n                TimeDetail(node = 1, startTime = \"08:15\", endTime = \"09:00\"),\r\n                TimeDetail(node = 2, startTime = \"09:00\", endTime = \"09:45\"),\r\n                TimeDetail(node = 3, startTime = \"10:05\", endTime = \"10:50\"),\r\n                TimeDetail(node = 4, startTime = \"10:50\", endTime = \"11:35\"),\r\n                TimeDetail(node = 5, startTime = \"13:00\", endTime = \"13:45\"),\r\n                TimeDetail(node = 6, startTime = \"13:45\", endTime = \"14:30\"),\r\n                TimeDetail(node = 7, startTime = \"14:50\", endTime = \"15:35\"),\r\n                TimeDetail(node = 8, startTime = \"15:35\", endTime = \"16:20\"),\r\n                TimeDetail(node = 9, startTime = \"16:30\", endTime = \"17:15\"),\r\n                TimeDetail(node = 10, startTime = \"17:15\", endTime = \"18:00\"),\r\n                TimeDetail(node = 11, startTime = \"18:00\", endTime = \"18:45\"),\r\n                TimeDetail(node = 12, startTime = \"18:45\", endTime = \"19:30\"),\r\n                TimeDetail(node = 13, startTime = \"19:30\", endTime = \"20:15\"),\r\n                TimeDetail(node = 14, startTime = \"20:15\", endTime = \"21:00\")\r\n            )\r\n            return TimeTable(name = \"调序时间表\", timeList = timeList)\r\n        } else {\r\n            timeList = listOf(\r\n                TimeDetail(node = 1, startTime = \"08:15\", endTime = \"09:00\"),\r\n                TimeDetail(node = 2, startTime = \"09:00\", endTime = \"09:45\"),\r\n                TimeDetail(node = 3, startTime = \"10:05\", endTime = \"10:50\"),\r\n                TimeDetail(node = 4, startTime = \"10:50\", endTime = \"11:35\"),\r\n                TimeDetail(node = 5, startTime = \"13:00\", endTime = \"13:45\"),\r\n                TimeDetail(node = 6, startTime = \"13:45\", endTime = \"14:30\"),\r\n                TimeDetail(node = 7, startTime = \"14:50\", endTime = \"15:35\"),\r\n                TimeDetail(node = 8, startTime = \"15:35\", endTime = \"16:20\"),\r\n                TimeDetail(node = 9, startTime = \"18:00\", endTime = \"18:45\"),\r\n                TimeDetail(node = 10, startTime = \"18:45\", endTime = \"19:30\"),\r\n                TimeDetail(node = 11, startTime = \"19:30\", endTime = \"20:15\"),\r\n                TimeDetail(node = 12, startTime = \"20:15\", endTime = \"21:00\"),\r\n                TimeDetail(node = 13, startTime = \"16:30\", endTime = \"17:15\"),\r\n                TimeDetail(node = 14, startTime = \"17:15\", endTime = \"18:00\")\r\n            )\r\n            return TimeTable(name = \"原始时间表\", timeList = timeList)\r\n        }\r\n    }\r\n\r\n    //生成课程列表\r\n    override fun generateCourseList(): List<Course> {\r\n        //把原来存在对象里的信息清空\r\n        courseInfos.clear()\r\n        getMaxWeek()\r\n        Regex(\"activity = new TaskActivity\").split(source).forEach { i ->\r\n            //教师编号、教师姓名、课程编号、课程名称、教室编号、教室名称、validWeeks字符串\r\n            val courseData = Regex(\"\"\"\\(\"(.*?)\",\"(.*?)\",\"(.*?)\",\"(.*?)\",\"(.*?)\",\"(.*?)\",\"(.*?)\"\\);\"\"\").find(i)\r\n\r\n            if (courseData != null) {\r\n                val courseName = courseData.groupValues[4]\r\n                val position = courseData.groupValues[6]\r\n                val teacher = courseData.groupValues[2]\r\n                val weeks = getWeeks(courseData.groupValues[7])\r\n                val sectionData = Regex(\"\"\"index =(.*?)\\*unitCount\\+(.*?);\"\"\").findAll(i)\r\n                val day = sectionData.first().groupValues[1].toInt() + 1\r\n                val sectionDays = arrayListOf<Int>()\r\n\r\n                sectionData.forEach {\r\n                    sectionDays.add(getSection(it.groupValues[2].toInt()))\r\n                }\r\n                sectionDays.sort()\r\n\r\n                //从课程列表单元格里找备注和学分\r\n                val courseList = dom.select(\".listTable\")[1]\r\n                var note = \"\"\r\n                var credit = 0f\r\n                courseList.select(\"tr\").drop(1).forEach {\r\n                    val cells = it.select(\"td\")\r\n                    val listCourseID = cells[5].text()\r\n                    val listCourseName = cells[3].text() + if (listCourseID.isNotBlank()) \"($listCourseID)\" else \"\"\r\n                    val listCredit = cells[4].text().toFloat()\r\n                    val listNote = cells[7].text()\r\n                    if (courseName == listCourseName) {\r\n                        note = listNote\r\n                        credit = listCredit\r\n                    }\r\n                }\r\n\r\n                //D、E、F楼的第3、4节课10:25开始，11:55下课\r\n                //J302、J303跟随DEF楼上下课时间\r\n                //但似乎该项目的生成流程会忽略startTime与endTime参数\r\n                var startTime = \"\"\r\n                var endTime = \"\"\r\n                if (Regex(\"\"\"^([DEF][0-9]{3}|J302|J303)(多|\\(中外教室）)$\"\"\").matches(position) &&\r\n                    sectionDays.first() == 3 &&\r\n                    sectionDays.last() == 4\r\n                ) {\r\n                    startTime = \"10:25\"\r\n                    endTime = \"11:55\"\r\n                }\r\n\r\n                //合并当天相同课程，转换时再分段拆开\r\n                val same = courseInfos.firstOrNull {\r\n                    it.name == courseName &&\r\n                            it.position == position &&\r\n                            it.teacher == teacher &&\r\n                            it.day == day &&\r\n                            it.weeks == weeks\r\n                }\r\n                if (same == null) {\r\n                    courseInfos.add(\r\n                        MyCourse(\r\n                            courseName,\r\n                            position,\r\n                            teacher,\r\n                            weeks,\r\n                            day,\r\n                            sectionDays,\r\n                            note,\r\n                            credit,\r\n                            startTime,\r\n                            endTime\r\n                        )\r\n                    )\r\n                } else {\r\n                    same.sections.addAll(sectionDays)\r\n                    same.sections.sort()\r\n                }\r\n            }\r\n        }\r\n        return myCourse2Course(courseInfos)\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/SUESParser.kt b/src/main/java/parser/SUESParser.kt
--- a/src/main/java/parser/SUESParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/SUESParser.kt	(date 1745507183738)
@@ -10,7 +10,7 @@
 import java.util.Locale
 import kotlin.collections.ArrayList
 
-class SUESParser(source: String) : Parser(source) {
+class SUESParser(source: String) : Parser() {
 
     //document.getElementById("main").contentWindow.document.getElementById("contentListFrame").contentWindow
     private val dom = Jsoup.parse(source)
@@ -66,18 +66,18 @@
                     res.add(
                         Course(
                             name = e.name,
+                            day = e.day,
+                            room = e.position,
                             teacher = e.teacher,
-                            room = e.position,
                             startNode = it.first(),
                             endNode = it.last(),
                             startWeek = week.start,
                             endWeek = week.end,
                             type = week.type,
-                            day = e.day,
+                            credit = e.credit,
                             note = e.note,
-                            credit = e.credit,
                             startTime = e.startTime,
-                            endTime = e.endTime
+                            endTime = e.endTime,
                         )
                     )
                 }
Index: src/main/java/bean/Course.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package bean\r\n\r\ndata class Course(\r\n    val name: String,            // 课程名\r\n    val day: Int,                // 该课程的是星期几（7代表星期天）参数范围：1 - 7\r\n    val room: String = \"\",       // 教室\r\n    val teacher: String = \"\",    // 老师\r\n    var startNode: Int,          // 开始为第几节课\r\n    var endNode: Int,            // 结束时为第几节课\r\n    var startWeek: Int,          // 开始周\r\n    var endWeek: Int,            // 结束周\r\n    var type: Int,               // 单双周，每周为0，单周为1，双周为2\r\n    var credit: Float = 0f,      // 学分\r\n    var note: String = \"\",       // 备注\r\n    var startTime: String = \"\",  // 不规则的开始时间，长度必须为5，如\"08:08\"\r\n    var endTime: String = \"\"     // 不规则的结束时间，长度必须为5，如\"08:08\"\r\n)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/bean/Course.kt b/src/main/java/bean/Course.kt
--- a/src/main/java/bean/Course.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/bean/Course.kt	(date 1745494732264)
@@ -13,5 +13,6 @@
     var credit: Float = 0f,      // 学分
     var note: String = "",       // 备注
     var startTime: String = "",  // 不规则的开始时间，长度必须为5，如"08:08"
-    var endTime: String = ""     // 不规则的结束时间，长度必须为5，如"08:08"
+    var endTime: String = "",     // 不规则的结束时间，长度必须为5，如"08:08"
+    val step: Int
 )
\ No newline at end of file
Index: src/main/java/parser/JinZhiParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\nimport java.io.File\r\n\r\nclass JinZhiParser(source: String) : Parser(source) {\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val doc = Jsoup.parse(source)\r\n        var courseName: String\r\n        var teacher: String\r\n        var detail: List<String>\r\n        var day = 1\r\n        var start = 1\r\n        var end = 1\r\n        var room: String\r\n        var startWeek = 1\r\n        var endWeek = 1\r\n        var type = 0\r\n        doc.getElementsByClass(\"wut_table\").first()\r\n            .getElementsByClass(\"mtt_arrange_item\").forEach { c ->\r\n                courseName = c.getElementsByClass(\"mtt_item_kcmc\")?.first()?.ownText()?.trim()?.substringAfter(' ')\r\n                    ?: return@forEach\r\n                teacher = c.getElementsByClass(\"mtt_item_jxbmc\")?.text()?.trim() ?: \"\"\r\n                detail = c.getElementsByClass(\"mtt_item_room\")?.first()?.text()?.trim()?.split(',')\r\n                    ?: return@forEach\r\n                val dayIndex = detail.indexOfFirst { it.trim().startsWith(\"星期\") }\r\n                day = try {\r\n                    detail[dayIndex].trim().takeLast(1).toInt()\r\n                } catch (e: Exception) {\r\n                    1\r\n                }\r\n                try {\r\n                    val nodeInfo = detail[dayIndex + 1].substringBefore('节').split('-')\r\n                    if (nodeInfo.size > 1) {\r\n                        start = nodeInfo[0].trim().toInt()\r\n                        end = nodeInfo.last().trim().toInt()\r\n                    } else {\r\n                        start = nodeInfo[0].trim().toInt()\r\n                        end = start\r\n                    }\r\n                } catch (e: Exception) {\r\n                    start = 1\r\n                    end = 1\r\n                }\r\n                room = if (detail.size - dayIndex > 3) detail[detail.size - 2] else detail.last()\r\n                for (i in 0 until dayIndex) {\r\n                    try {\r\n                        type = when {\r\n                            detail[i].contains('单') -> {\r\n                                1\r\n                            }\r\n                            detail[i].contains('双') -> {\r\n                                2\r\n                            }\r\n                            else -> {\r\n                                0\r\n                            }\r\n                        }\r\n                        val weekInfo = detail[i].substringBefore('周').split('-')\r\n                        val startWeekStr = weekInfo[0].trim()\r\n                        for (j in startWeekStr.indices.reversed()) {\r\n                            if (!startWeekStr[j].isDigit()) {\r\n                                startWeek = startWeekStr.substring(j + 1).toInt()\r\n                                break\r\n                            }\r\n                            if (j == 0) {\r\n                                startWeek = startWeekStr.toInt()\r\n                            }\r\n                        }\r\n                        endWeek = if (weekInfo.size > 1) {\r\n                            weekInfo.last().trim().toInt()\r\n                        } else {\r\n                            startWeek\r\n                        }\r\n                    } catch (e: Exception) {\r\n                        startWeek = 1\r\n                        endWeek = 1\r\n                    }\r\n                    courseList.add(\r\n                        Course(\r\n                            name = courseName, teacher = teacher, room = room,\r\n                            startWeek = startWeek, endWeek = endWeek,\r\n                            startNode = start, endNode = end, type = type, day = day\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n        return courseList\r\n    }\r\n\r\n}\r\n\r\nfun main() {\r\n    File(\"/Users/yzune/Downloads/金智列表1.txt\").readLines().forEach {\r\n        println(it)\r\n        JinZhiParser(File(\"/Users/yzune/YZune_Git/database/python/$it\").readText()).saveCourse()\r\n        println()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/JinZhiParser.kt b/src/main/java/parser/JinZhiParser.kt
--- a/src/main/java/parser/JinZhiParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/JinZhiParser.kt	(date 1745916439736)
@@ -5,7 +5,7 @@
 import parser.Parser
 import java.io.File
 
-class JinZhiParser(source: String) : Parser(source) {
+class JinZhiParser(source: String) : Parser() {
 
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
@@ -82,9 +82,9 @@
                     }
                     courseList.add(
                         Course(
-                            name = courseName, teacher = teacher, room = room,
-                            startWeek = startWeek, endWeek = endWeek,
-                            startNode = start, endNode = end, type = type, day = day
+                            name = courseName, day = day, room = room,
+                            teacher = teacher, startNode = start,
+                            endNode = end, startWeek = startWeek, endWeek = endWeek, type = type,
                         )
                     )
                 }
Index: src/main/java/parser/CSVParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport bean.Course\r\nimport com.github.doyaaaaaken.kotlincsv.dsl.csvReader\r\n\r\nclass CSVParser(source: String) : Parser(source) {\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val lines = csvReader().readAll(source)\r\n        for (i in 1 until lines.size) {\r\n            val line = lines[i]\r\n            if (line.size < 7) {\r\n                throw Exception(\"第 ${i + 1} 行数据不足\")\r\n            }\r\n            var startWeek = 0\r\n            var endWeek = 0\r\n            var type = 0\r\n            val weekList = line[6].split('、')\r\n            weekList.forEach { weekStr ->\r\n                if (weekStr.contains('-')) {\r\n                    val weeks = weekStr.split('-')\r\n                    startWeek = weeks[0].trim().toInt()\r\n                    when {\r\n                        weekStr.contains('单') -> {\r\n                            type = 1\r\n                            endWeek = weeks[1].substringBefore('单').trim().toInt()\r\n                        }\r\n\r\n                        weekStr.contains('双') -> {\r\n                            type = 2\r\n                            endWeek = weeks[1].substringBefore('双').trim().toInt()\r\n                        }\r\n\r\n                        else -> {\r\n                            type = 0\r\n                            endWeek = weeks[1].trim().toInt()\r\n                        }\r\n                    }\r\n                } else {\r\n                    startWeek = weekStr.trim().toInt()\r\n                    endWeek = weekStr.trim().toInt()\r\n                    type = 0\r\n                }\r\n                val startNode = line[2].trim().toInt()\r\n                val endNode = line[3].trim().toInt()\r\n                courseList.add(\r\n                    Course(\r\n                        name = line[0], day = line[1].trim().toInt(),\r\n                        startNode = startNode, endNode = endNode,\r\n                        teacher = line[4], room = line[5],\r\n                        startWeek = startWeek, endWeek = endWeek,\r\n                        type = type\r\n                    )\r\n                )\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/CSVParser.kt b/src/main/java/parser/CSVParser.kt
--- a/src/main/java/parser/CSVParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/CSVParser.kt	(date 1745507183587)
@@ -3,7 +3,7 @@
 import bean.Course
 import com.github.doyaaaaaken.kotlincsv.dsl.csvReader
 
-class CSVParser(source: String) : Parser(source) {
+class CSVParser(source: String) : Parser() {
 
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
@@ -47,10 +47,10 @@
                 courseList.add(
                     Course(
                         name = line[0], day = line[1].trim().toInt(),
+                        room = line[5], teacher = line[4],
                         startNode = startNode, endNode = endNode,
-                        teacher = line[4], room = line[5],
                         startWeek = startWeek, endWeek = endWeek,
-                        type = type
+                        type = type,
                     )
                 )
             }
Index: src/main/java/parser/Parser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport Common\r\nimport bean.Course\r\nimport bean.CourseBaseBean\r\nimport bean.CourseDetailBean\r\nimport main.java.Generator\r\nimport main.java.bean.TimeTable\r\n\r\nabstract class Parser(val source: String) {\r\n\r\n    private val _baseList: ArrayList<CourseBaseBean> = arrayListOf()\r\n    private val _detailList: ArrayList<CourseDetailBean> = arrayListOf()\r\n\r\n    abstract fun generateCourseList(): List<Course>\r\n\r\n    // TimeTable中的name属性将起到标识作用，如果在数据库中发现同名时间表，则不再覆盖写入\r\n    open fun generateTimeTable(): TimeTable? = null\r\n\r\n    open fun getTableName(): String? = null\r\n\r\n    open fun getNodes(): Int? = null\r\n\r\n    open fun getStartDate(): String? = null\r\n\r\n    open fun getMaxWeek(): Int? = null\r\n\r\n    private fun convertCourse() {\r\n        generateCourseList().forEach { course ->\r\n            var id = Common.findExistedCourseId(_baseList, course.name)\r\n            if (id == -1) {\r\n                id = _baseList.size\r\n                _baseList.add(\r\n                    CourseBaseBean(\r\n                        id = id, courseName = course.name,\r\n                        color = \"\",\r\n                        tableId = 0,\r\n                        note = course.note,\r\n                        credit = course.credit\r\n                    )\r\n                )\r\n            }\r\n            _detailList.add(\r\n                CourseDetailBean(\r\n                    id = id, room = course.room,\r\n                    teacher = course.teacher, day = course.day,\r\n                    step = course.endNode - course.startNode + 1,\r\n                    startWeek = course.startWeek, endWeek = course.endWeek,\r\n                    type = course.type, startNode = course.startNode,\r\n                    credit = course.credit,\r\n                    tableId = 0\r\n                )\r\n            )\r\n        }\r\n    }\r\n\r\n    fun saveCourse(printOut: Boolean = true): Int {\r\n        convertCourse()\r\n        if (printOut) {\r\n            println(\"成功导入 ${_baseList.size} 门课程\")\r\n            _baseList.forEach {\r\n                println(it)\r\n            }\r\n            _detailList.forEach {\r\n                println(it)\r\n            }\r\n            Generator(\r\n                _baseList,\r\n                _detailList,\r\n                generateTimeTable(),\r\n                getTableName(),\r\n                getNodes(),\r\n                getStartDate(),\r\n                getMaxWeek()\r\n            )\r\n        }\r\n        return _baseList.size\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/Parser.kt b/src/main/java/parser/Parser.kt
--- a/src/main/java/parser/Parser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/Parser.kt	(date 1745507183619)
@@ -7,7 +7,7 @@
 import main.java.Generator
 import main.java.bean.TimeTable
 
-abstract class Parser(val source: String) {
+abstract class Parser() {
 
     private val _baseList: ArrayList<CourseBaseBean> = arrayListOf()
     private val _detailList: ArrayList<CourseDetailBean> = arrayListOf()
Index: src/main/java/parser/THUParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport Common\r\nimport bean.Course\r\nimport com.google.gson.Gson\r\nimport main.java.bean.TimeDetail\r\nimport main.java.bean.TimeTable\r\nimport org.jsoup.HttpStatusException\r\nimport org.jsoup.Jsoup\r\n\r\nclass THUParser(source: String) : Parser(source) {\r\n\r\n    // 固定数据\r\n\r\n    val startNodeMap = arrayOf(0, 1, 3, 6, 8, 10, 12)\r\n    val endNodeMap = arrayOf(0, 2, 5, 7, 9, 11, 14)\r\n\r\n    override fun generateTimeTable(): TimeTable {\r\n        return TimeTable(\r\n            name = \"清华大学\", timeList = listOf(\r\n                TimeDetail(1, \"08:00\", \"08:45\"),\r\n                TimeDetail(2, \"08:50\", \"09:35\"),\r\n                TimeDetail(3, \"09:50\", \"10:35\"),\r\n                TimeDetail(4, \"10:40\", \"11:25\"),\r\n                TimeDetail(5, \"11:30\", \"12:15\"),\r\n                TimeDetail(6, \"13:30\", \"14:15\"),\r\n                TimeDetail(7, \"14:20\", \"15:05\"),\r\n                TimeDetail(8, \"15:20\", \"16:05\"),\r\n                TimeDetail(9, \"16:10\", \"16:55\"),\r\n                TimeDetail(10, \"17:05\", \"17:50\"),\r\n                TimeDetail(11, \"17:55\", \"18:40\"),\r\n                TimeDetail(12, \"19:20\", \"20:05\"),\r\n                TimeDetail(13, \"20:10\", \"20:55\"),\r\n                TimeDetail(14, \"21:00\", \"21:45\")\r\n            )\r\n        )\r\n    }\r\n\r\n    // 学期数据\r\n\r\n    fun semesterDataUrl(semester: String) = \"https://schedule-data.netlify.app/$semester.json\"\r\n\r\n    var reschedule = emptyArray<Reschedule>()\r\n\r\n    var weekCount = 16\r\n\r\n    // 课程表解析\r\n\r\n    var secondaryCoursesDetails = mapOf<String, CourseDetails>()  // contains teacher and notes\r\n\r\n    val semesterRegex = Regex(\"\"\"name=\"p_xnxq\" value=\"([\\d\\-]+?)\"\"\"\")\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        semesterRegex.find(source)?.run {\r\n            val json = try {\r\n                Jsoup.connect(semesterDataUrl(groupValues[1])).ignoreContentType(true).execute().body()\r\n            } catch (e: HttpStatusException) {\r\n                return@run\r\n            }\r\n            val data = Gson().fromJson(json, SemesterData::class.java) ?: return@run\r\n            data.weekCount?.let { weekCount = it }\r\n            data.parsedReschedule?.let { reschedule = it }\r\n        }\r\n\r\n        parseSecondaryCourseTable()  // generates secondaryCoursesDetails\r\n        return parseCourses()\r\n    }\r\n\r\n    val mainScriptRegex = Regex(\"\"\"setInitValue\\(\\).+setInitValue\"\"\", RegexOption.DOT_MATCHES_ALL)\r\n    val cellPositionRegex = Regex(\"\"\"a(\\d)_(\\d)\"\"\")\r\n    val blueTextRegex = Regex(\"\"\"<font color='blue'>([^<>]+?)</font>\"\"\")\r\n    val courseNumberRegex = Regex(\"\"\"\\d{10};(\\d{8})\"\"\")  // teacher ID; course number\r\n\r\n    fun parseCourses(): List<Course> {\r\n        val courseList = mutableListOf<Course>()\r\n        val totalWeeks = weekCount\r\n        val script = mainScriptRegex.find(source)!!.value\r\n        var courseInfo = CourseDetails()\r\n        for (line in script.lines()) {\r\n            if (\"strHTML += \\\"\" in line) {\r\n                if (\"<a \" in line) {\r\n                    courseInfo.number = courseNumberRegex.find(line)?.groupValues?.get(1) ?: \"\"\r\n                } else if (\"<b>\" in line) {\r\n                    courseInfo.name = line.substringAfter(\"<b>\").substringBefore(\"</b>\").trim()\r\n                }\r\n            } else if (\"strHTML1 +=\" in line) {\r\n                courseInfo.params.add(line.substringAfter(\"；\").substringBefore(\"\\\"\").trim())\r\n            } else if (\"blue_red_none\" in line) {\r\n                // secondary courses\r\n                var topic = \"\"\r\n                blueTextRegex.findAll(line).forEachIndexed { i, result ->\r\n                    when (i) {\r\n                        0 -> courseInfo.name = result.groupValues[1].trim()\r\n                        1 -> {\r\n                            var details = result.groupValues[1].trim()\r\n                            topic = details.substringBeforeLast('(')\r\n                            details = details.substringAfterLast('(').substringBefore(')').trim()\r\n                            details.split(\"；\").forEach {\r\n                                when {\r\n                                    \"周\" in it -> courseInfo.weeks = it\r\n                                    \"时间：\" in it -> courseInfo.time = it.removePrefix(\"时间：\")\r\n                                    courseInfo.location.isBlank() -> courseInfo.location = it.trim()\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (topic.isNotBlank()) courseInfo.location = \"${courseInfo.location}($topic)\"\r\n                secondaryCoursesDetails[courseInfo.name]?.let {\r\n                    courseInfo.teacher = it.teacher\r\n                    courseInfo.notes = it.notes\r\n                }\r\n            } else if (\"getElementById\" in line) {\r\n                // finalize\r\n                val (_, node, day) = cellPositionRegex.find(line)!!.groupValues\r\n                if (courseInfo.params.isNotEmpty()) {\r\n                    for (it in courseInfo.params.asReversed()) {\r\n                        when {\r\n                            // 倒数第一个以周结尾的是周数\r\n                            it.endsWith(\"周\") && courseInfo.weeks.isBlank() -> courseInfo.weeks = it\r\n                            // 上课教室在周数的后面\r\n                            courseInfo.weeks.isBlank() -> courseInfo.location = it\r\n                            // 周数前面的不是课程属性的是教师（有可能空）\r\n                            it !in Common.courseProperty -> courseInfo.teacher = it\r\n                        }\r\n                    }\r\n                }\r\n                val course = Course(\r\n                    name = courseInfo.name,\r\n                    day = day.toInt(),\r\n                    room = courseInfo.location,\r\n                    teacher = courseInfo.teacher,\r\n                    startNode = startNodeMap[node.toInt()],\r\n                    endNode = endNodeMap[node.toInt()],\r\n                    startWeek = 0,\r\n                    endWeek = 0,\r\n                    type = -1,\r\n                    credit = when (courseInfo.number) {\r\n                        \"\" -> 0.0f\r\n                        else -> courseInfo.number.last().toFloat() - 48 // char to float: ASCII\r\n                    },\r\n                    note = courseInfo.notes,\r\n                    startTime = when (courseInfo.time) {\r\n                        \"\" -> \"\"\r\n                        else -> courseInfo.time.substringBefore(\"-\").formatTime()\r\n                    },\r\n                    endTime = when (courseInfo.time) {\r\n                        \"\" -> \"\"\r\n                        else -> courseInfo.time.substringAfter(\"-\").formatTime()\r\n                    }\r\n                )\r\n                val weekIntList = parseWeeks(courseInfo.weeks.trim(), totalWeeks)\r\n                for (it in reschedule) {\r\n                    if (course.day == it.toDay && it.toWeek in weekIntList) {\r\n                        weekIntList.remove(it.toWeek)\r\n                    }\r\n                    if (course.day == it.fromDay && it.fromWeek in weekIntList) {\r\n                        weekIntList.remove(it.fromWeek)\r\n                        if (it.toWeek > 0) {\r\n                            if (course.day == it.toDay && it.toWeek !in weekIntList) {\r\n                                // 目标日的课程已被清除\r\n                                weekIntList.add(it.toWeek)\r\n                            } else {\r\n                                courseList.add(\r\n                                    course.copy(\r\n                                        day = it.toDay,\r\n                                        startWeek = it.toWeek,\r\n                                        endWeek = it.toWeek,\r\n                                        type = 0\r\n                                    )\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                weekIntList.sort()\r\n                Common.weekIntList2WeekBeanList(weekIntList).mapTo(courseList) { week ->\r\n                    course.copy(\r\n                        startWeek = week.start,\r\n                        endWeek = week.end,\r\n                        type = week.type\r\n                    )\r\n                }\r\n                courseInfo = CourseDetails()  // reset\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n\r\n    val secondaryCourseTableHeaderRegex = Regex(\"\"\"var gridColumns = \\[(.+)];\"\"\", RegexOption.DOT_MATCHES_ALL)\r\n    val secondaryCourseTableDataRegex = Regex(\"\"\"var gridData = \\[(.+)];\"\"\", RegexOption.DOT_MATCHES_ALL)\r\n    val bracketsRegex = Regex(\"\"\"\\[([^\\[\\]]+)]\"\"\")\r\n\r\n    fun parseSecondaryCourseTable() {\r\n        val result = mutableMapOf<String, CourseDetails>()\r\n        val header = secondaryCourseTableHeaderRegex.find(source)?.run { groupValues[1] } ?: return\r\n        val data = secondaryCourseTableDataRegex.find(source)?.run { groupValues[1] } ?: return\r\n        run {\r\n            var nameIndex = 0\r\n            var teacherIndex = 0\r\n            var notesIndex = 0\r\n            header.split(\",\").forEachIndexed { i, s ->\r\n                when {\r\n                    \"课程名\" in s -> nameIndex = i\r\n                    \"任课教师\" in s -> teacherIndex = i\r\n                    \"选课文字说明\" in s -> notesIndex = i\r\n                }\r\n            }\r\n            for (arrayMatch in bracketsRegex.findAll(data)) {\r\n                val array = arrayMatch.groupValues[1]\r\n                if (\"北大\" in array || \"北外\" in array) continue\r\n                val items = array.split(\",\")\r\n                val name = items[nameIndex].trim().removeSurrounding(\"\\\"\")\r\n                val teacher = items[teacherIndex].trim().removeSurrounding(\"\\\"\")\r\n                val notes = items[notesIndex].trim().removeSurrounding(\"\\\"\")\r\n                result[name] = CourseDetails(teacher = teacher, notes = notes)\r\n            }\r\n        }\r\n        secondaryCoursesDetails = result\r\n    }\r\n\r\n    fun parseWeeks(courseWeeks: String, totalWeeks: Int): MutableList<Int> {\r\n        return when (courseWeeks) {\r\n            \"全周\" -> 1..totalWeeks\r\n            \"前八周\" -> 1..8\r\n            \"后八周\" -> 9..totalWeeks\r\n            \"单周\" -> 1..totalWeeks step 2\r\n            \"双周\" -> 2..totalWeeks step 2\r\n            else -> {\r\n                if (!courseWeeks.endsWith(\"周\")) {\r\n                    return mutableListOf()\r\n                }\r\n                val courseWeeksRanges = courseWeeks\r\n                    .removePrefix(\"第\")\r\n                    .removeSuffix(\"周\")\r\n                    .split(\",\")\r\n                return courseWeeksRanges.flatMapTo(mutableListOf()) {\r\n                    when {\r\n                        '-' in it -> it.substringBefore('-').toInt()..it.substringAfter('-').toInt()\r\n                        else -> listOf(it.toInt())\r\n                    }\r\n                }\r\n            }\r\n        }.toMutableList()\r\n    }\r\n\r\n    class Reschedule(\r\n        val fromWeek: Int,\r\n        val fromDay: Int,\r\n        val toWeek: Int = 0,\r\n        val toDay: Int = 0\r\n    )\r\n\r\n    class CourseDetails(\r\n        var number: String = \"\",\r\n        var name: String = \"\",\r\n        var teacher: String = \"\",\r\n        var weeks: String = \"\",\r\n        var location: String = \"\", // 二级课程内容加在这里\r\n        var notes: String = \"\",\r\n        var time: String = \"\",\r\n        val params: MutableList<String> = mutableListOf()\r\n    )\r\n\r\n    class SemesterData(\r\n        val weekCount: Int?,\r\n        private val reschedule: Array<Array<Int>>?,\r\n    ) {\r\n        val parsedReschedule: Array<Reschedule>?\r\n            get() = reschedule?.run { Array(size) { i -> this[i].toReschedule() } }\r\n\r\n        private fun Array<Int>.toReschedule() = when (size) {\r\n            2 -> Reschedule(this[0], this[1])\r\n            else -> Reschedule(this[0], this[1], this[2], this[3])\r\n        }\r\n    }\r\n\r\n    fun String.formatTime(): String {\r\n        val time = replace('：', ':').trim()\r\n        return if (time.length == 4 && time[0].isDigit() && time[1] == ':' && time[2].isDigit() && time[3].isDigit()) {\r\n            \"0$time\"\r\n        } else {\r\n            time\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/THUParser.kt b/src/main/java/parser/THUParser.kt
--- a/src/main/java/parser/THUParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/THUParser.kt	(date 1745507183632)
@@ -8,7 +8,7 @@
 import org.jsoup.HttpStatusException
 import org.jsoup.Jsoup
 
-class THUParser(source: String) : Parser(source) {
+class THUParser(source: String) : Parser() {
 
     // 固定数据
 
@@ -147,7 +147,7 @@
                     endTime = when (courseInfo.time) {
                         "" -> ""
                         else -> courseInfo.time.substringAfter("-").formatTime()
-                    }
+                    },
                 )
                 val weekIntList = parseWeeks(courseInfo.weeks.trim(), totalWeeks)
                 for (it in reschedule) {
@@ -163,10 +163,11 @@
                             } else {
                                 courseList.add(
                                     course.copy(
-                                        day = it.toDay,
+                                        ,
+                                        day = it.toDay,,,
                                         startWeek = it.toWeek,
                                         endWeek = it.toWeek,
-                                        type = 0
+                                        type = 0,
                                     )
                                 )
                             }
@@ -176,9 +177,10 @@
                 weekIntList.sort()
                 Common.weekIntList2WeekBeanList(weekIntList).mapTo(courseList) { week ->
                     course.copy(
+                        ,,,,
                         startWeek = week.start,
                         endWeek = week.end,
-                        type = week.type
+                        type = week.type,
                     )
                 }
                 courseInfo = CourseDetails()  // reset
Index: src/main/java/parser/CCSUParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\n\r\nclass CSXYParser(source: String) : Parser(source) {\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val doc = Jsoup.parse(source)\r\n        var node = 1\r\n        var day: Int\r\n        while (node <= 5) {\r\n            day = 1\r\n            while (day <= 7) {\r\n                val s = doc.getElementById(\"$node-$day-2\").html().split(\"<br>\")\r\n                if (s[0] != \"&nbsp;\") {\r\n                    var i = 0\r\n                    while (i < s.size - 1) {\r\n                        val name = s[i++]\r\n                        i++\r\n                        var teacher = s[i++]\r\n                        teacher = teacher.substring(1, teacher.length - 2)\r\n                        var weekStr = s[i++]\r\n                        weekStr = weekStr.substring(1, weekStr.length - 3)\r\n                        val room = s[i++]\r\n                        val weeks = weekStr.split(\",\")\r\n                        for (week in weeks) {\r\n                            val split = week.split(\"-\")\r\n                            if (split.size == 1) {\r\n                                courseList.add(\r\n                                    Course(\r\n                                        name = name, day = day, room = room, teacher = teacher,\r\n                                        startNode = node * 2 - 1, endNode = node * 2, startWeek = week.toInt(),\r\n                                        endWeek = week.toInt(), type = 0\r\n                                    )\r\n                                )\r\n                            } else {\r\n                                courseList.add(\r\n                                    Course(\r\n                                        name = name, day = day, room = room, teacher = teacher,\r\n                                        startNode = node * 2 - 1, endNode = node * 2, startWeek = split[0].toInt(),\r\n                                        endWeek = split[1].toInt(), type = 0\r\n                                    )\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                day++\r\n            }\r\n            node++\r\n        }\r\n        return courseList\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/CCSUParser.kt b/src/main/java/parser/CCSUParser.kt
--- a/src/main/java/parser/CCSUParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/CCSUParser.kt	(date 1745507183700)
@@ -3,7 +3,7 @@
 import bean.Course
 import org.jsoup.Jsoup
 
-class CSXYParser(source: String) : Parser(source) {
+class CSXYParser(source: String) : Parser() {
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
         val doc = Jsoup.parse(source)
@@ -31,7 +31,7 @@
                                     Course(
                                         name = name, day = day, room = room, teacher = teacher,
                                         startNode = node * 2 - 1, endNode = node * 2, startWeek = week.toInt(),
-                                        endWeek = week.toInt(), type = 0
+                                        endWeek = week.toInt(), type = 0,
                                     )
                                 )
                             } else {
@@ -39,7 +39,7 @@
                                     Course(
                                         name = name, day = day, room = room, teacher = teacher,
                                         startNode = node * 2 - 1, endNode = node * 2, startWeek = split[0].toInt(),
-                                        endWeek = split[1].toInt(), type = 0
+                                        endWeek = split[1].toInt(), type = 0,
                                     )
                                 )
                             }
Index: src/main/java/parser/BFAforYJSParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport bean.Course\r\nimport main.java.bean.TimeDetail\r\nimport main.java.bean.TimeTable\r\nimport org.jsoup.Jsoup\r\n\r\n/**\r\n * 因为目前只是开源了自定义课程表解析器，但不知道查看课表的网址信息在哪设置，因此先在这里进行说明\r\n * 研究生的教务系统没有域名，只有IP地址，因此必须通过校园网或VPN访问\r\n * 1. 先进入教务系统登录网址：http://202.205.127.146:8881/#/login\r\n * 2. 然后进入学生课表查询网址：http://202.205.127.146:8881/#/secStudent/schemeManagement/subPage/studentTimetableQuery\r\n *   （当然，直接进入学生课表查询网址也会直接跳转到登录界面）\r\n */\r\n\r\n//北京电影学院-研究生教育管理系统\r\nclass BFAforYJSParser(source: String) : Parser(source) {\r\n    var maxWeek = 1 // 学期最大周数\r\n\r\n    // 课表名称，以“北京电影学院+当前学期”命名\r\n    override fun getTableName(): String {\r\n        val document = Jsoup.parse(source)\r\n        val currentSemesterText = document.getElementsByClass(\"ant-select-selection-selected-value\")[0].text()\r\n        return \"北京电影学院 $currentSemesterText\"\r\n    }\r\n\r\n    // 每天课程节数\r\n    override fun getNodes(): Int = 12\r\n\r\n    // 学期课程周数\r\n    override fun getMaxWeek(): Int = maxWeek\r\n\r\n    // 上课时间表\r\n    override fun generateTimeTable(): TimeTable {\r\n        return TimeTable(\r\n            name = \"北京电影学院\", timeList = listOf(\r\n                TimeDetail(1, \"08:30\", \"09:15\"),\r\n                TimeDetail(2, \"09:15\", \"10:00\"),\r\n                TimeDetail(3, \"10:15\", \"11:00\"),\r\n                TimeDetail(4, \"11:00\", \"11:45\"),\r\n                TimeDetail(5, \"13:30\", \"14:15\"),\r\n                TimeDetail(6, \"14:15\", \"15:00\"),\r\n                TimeDetail(7, \"15:15\", \"16:00\"),\r\n                TimeDetail(8, \"16:00\", \"16:45\"),\r\n                TimeDetail(9, \"18:00\", \"18:45\"),\r\n                TimeDetail(10, \"18:45\", \"19:30\"),\r\n                TimeDetail(11, \"19:45\", \"20:30\"),\r\n                TimeDetail(12, \"20:30\", \"21:15\")\r\n            )\r\n        )\r\n    }\r\n\r\n    // 提取课程信息\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = mutableListOf<Course>()\r\n        val document = Jsoup.parse(source)\r\n        val tableBox = document.getElementById(\"table\")\r\n        val tableContents =\r\n            tableBox.getElementsByClass(\"pages-sec-student-scheme-pages-student-timetable-query-timetable-index-tableContent\")\r\n        for (element in tableContents) {\r\n            val tdElements = element.select(\"td[_nk]:not([_nk=''])\")\r\n            for (tdElement in tdElements) {\r\n                // 处理课程表的每个格子元素\r\n                val courseText = tdElement.text()\r\n                if (courseText.isNotEmpty()) {\r\n                    // 有课程信息\r\n                    val textList = mutableListOf<String>()\r\n                    val textListElements = tdElement.child(0).children()\r\n                    //  单独提取每一行的课程信息\r\n                    for (textListElement in textListElements)\r\n                    {\r\n                        textList.add(textListElement.text())\r\n                    }\r\n                    textList.add(tdElement.child(1).text())\r\n                    //  存入课程信息\r\n                    val weekday = tdElements.indexOf(tdElement) + 1\r\n                    val campus = textList[0]\r\n                    val courseName = textList[1]\r\n                    val note = textList[2]\r\n                    val teacher = textList[3]\r\n\r\n                    // 提取方括号外的内容为教室（classroom）\r\n                    val classroom = textList[4].substringBefore(\"[\")\r\n\r\n                    // 提取方括号内的内容并分割为起始周和结束周（startWeek 和 endWeek）\r\n                    val bracketContent = textList[4].substringAfter(\"[\").substringBefore(\"]\")\r\n                    val (startWeek, endWeek) = bracketContent.split(\"-\").map { it.toInt() }\r\n\r\n                    // 使用正则表达式匹配数字并转换为整数列表\r\n                    val numbers = \"\\\\d+\".toRegex().findAll(textList[5]).map { it.value.toInt() }.toList()\r\n\r\n                    // 获取第一个数字作为起始节点（startNode），获取最后一个数字作为结束节点（endNode）\r\n                    val startNode: Int = numbers.firstOrNull()?.toInt() ?: 0\r\n                    val endNode: Int = numbers.lastOrNull()?.toInt() ?: 0\r\n\r\n                    // 计算学分（由于课程表界面没有显示学分，因此是通过学时粗略换算的，1学分=16学时，如果存在多节非连续课程，计算结果就不正确了）\r\n                    val credit = ((endWeek - startWeek + 1) * (endNode - startNode + 1) / 16).toFloat()\r\n\r\n                    // 更新最大周数\r\n                    maxWeek = if (maxWeek < endWeek) endWeek else maxWeek\r\n\r\n                    // 创建课程对象并添加到课程列表\r\n                    courseList.add(\r\n                        Course(\r\n                            day = weekday,\r\n                            name = courseName,\r\n                            note = note,\r\n                            teacher = teacher,\r\n                            room = classroom,\r\n                            startWeek = startWeek,\r\n                            endWeek = endWeek,\r\n                            startNode = startNode,\r\n                            endNode = endNode,\r\n                            credit = credit,\r\n                            type = 0\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/BFAforYJSParser.kt b/src/main/java/parser/BFAforYJSParser.kt
--- a/src/main/java/parser/BFAforYJSParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/BFAforYJSParser.kt	(date 1745510410271)
@@ -14,7 +14,7 @@
  */
 
 //北京电影学院-研究生教育管理系统
-class BFAforYJSParser(source: String) : Parser(source) {
+class BFAforYJSParser(source: String) : Parser() {
     var maxWeek = 1 // 学期最大周数
 
     // 课表名称，以“北京电影学院+当前学期”命名
@@ -30,7 +30,7 @@
     // 学期课程周数
     override fun getMaxWeek(): Int = maxWeek
 
-    // 上课时间表
+    // 学期课程周数
     override fun generateTimeTable(): TimeTable {
         return TimeTable(
             name = "北京电影学院", timeList = listOf(
@@ -102,17 +102,17 @@
                     // 创建课程对象并添加到课程列表
                     courseList.add(
                         Course(
-                            day = weekday,
                             name = courseName,
-                            note = note,
+                            day = weekday,
+                            room = classroom,
                             teacher = teacher,
-                            room = classroom,
+                            startNode = startNode,
+                            endNode = endNode,
                             startWeek = startWeek,
                             endWeek = endWeek,
-                            startNode = startNode,
-                            endNode = endNode,
+                            type = 0,
                             credit = credit,
-                            type = 0
+                            note = note,
                         )
                     )
                 }
Index: src/main/java/parser/SUSTechParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport com.google.gson.Gson\r\nimport org.jsoup.Connection\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\nimport java.util.regex.Pattern\r\n\r\n//年份为学年的起始年，学期[秋、春、夏]分别对应[1、2、3]，例如2021年夏季学期选择[2020 3]\r\nclass SUSTechParser(\r\n    private val sid: String,\r\n    private val pwd: String,\r\n    private val semesterYear: String,\r\n    private val semesterTerm: String\r\n) : Parser(\"\") {\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val userAgent =\r\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36\"\r\n        val timeout = 5000\r\n\r\n        //loginTIS\r\n        val casURL = \"https://cas.sustech.edu.cn/cas/login?service=https%3A%2F%2Ftis.sustech.edu.cn%2Fcas\"\r\n        val doc = Jsoup.connect(casURL).userAgent(userAgent).timeout(timeout).get()\r\n        val executionValue = doc.getElementsByAttributeValue(\"name\", \"execution\")[0].attributes().get(\"value\")\r\n        val cookies: Map<String, String>?\r\n        try {\r\n            val response = Jsoup.connect(casURL)\r\n                .userAgent(userAgent)\r\n                .data(\"username\", sid)\r\n                .data(\"password\", pwd)\r\n                .data(\"execution\", executionValue)\r\n                .data(\"_eventId\", \"submit\")\r\n                .data(\"geolocation\", \"\")\r\n                .timeout(timeout)\r\n                .ignoreHttpErrors(true)\r\n                .method(Connection.Method.POST)\r\n                .execute()\r\n            if (response.body().contains(\"必须录入用户名\") || response.body().contains(\"必须录入密码\")) {\r\n                throw Exception(\"必须录入用户名和密码\")\r\n            }\r\n            if (response.body().contains(\"认证信息无效\")) {\r\n                throw Exception(\"认证信息无效\")\r\n            }\r\n            if (response.statusCode() !in 200..399) {\r\n                throw Exception(\"HttpStatusCode \" + response.statusCode())\r\n            }\r\n            cookies = response.cookies()\r\n            cookies.remove(\"TGC\")\r\n        } catch (e: Exception) {\r\n            throw Exception(\"登录失败\\n$e\")\r\n        }\r\n\r\n        //getCourseList\r\n        val rd = Jsoup.connect(\"https://tis.sustech.edu.cn/xszykb/queryxszykbzong\")\r\n            .userAgent(userAgent)\r\n            .header(\"Accept\", \"*/*\")\r\n            .header(\"X-Requested-With\", \"XMLHttpRequest\")\r\n            .referrer(\"https://tis.sustech.edu.cn/authentication/main\")\r\n            .cookies(cookies)\r\n            .data(\"xn\", \"$semesterYear-\" + (Integer.parseInt(semesterYear) + 1).toString())\r\n            .data(\"xq\", semesterTerm)\r\n            .timeout(timeout)\r\n            .ignoreContentType(true)\r\n            .method(Connection.Method.POST)\r\n            .execute().body()\r\n\r\n        //parseCourseList\r\n        val gson = Gson()\r\n        val courseInfoList = gson.fromJson(rd, Array<CourseInfo>::class.java).asList()\r\n\r\n        if (courseInfoList.isEmpty()) {\r\n            throw Exception(\"未找到课表信息\")\r\n        }\r\n\r\n        val result = ArrayList<Course>()\r\n\r\n        for (course in courseInfoList) {\r\n            if (course.KEY == \"bz\") {\r\n                //忽略备注栏的课程\r\n                continue\r\n            }\r\n            result.addAll(parseCourseInfo(course.SKSJ, course.KEY))\r\n        }\r\n        return result\r\n    }\r\n\r\n    private fun parseCourseInfo(str: String, pos: String): List<Course> {\r\n        val result = ArrayList<Course>()\r\n        val name = str.substringBefore('[').trim()\r\n\r\n        var pattern = Pattern.compile(\"\\\\[(.*?)]\")\r\n        var matcher = pattern.matcher(str)\r\n        val arr = ArrayList<String>()\r\n        while (matcher.find()) {\r\n            arr.add(matcher.group(1))\r\n        }\r\n        if (arr.size != 5) {\r\n            throw Exception(\"数据格式不匹配\")\r\n        }\r\n\r\n        var noteCourseClass = \"\"\r\n        if (arr[1].contains('-')) {\r\n            noteCourseClass = arr[1].substring(arr[1].indexOf('-') + 1)\r\n        }\r\n\r\n        val day: Int\r\n        pattern = Pattern.compile(\"xq(\\\\d+)_jc\\\\d+\")\r\n        matcher = pattern.matcher(pos)\r\n        if (matcher.find()) {\r\n            day = Integer.parseInt(matcher.group(1))\r\n        } else {\r\n            throw Exception(\"数据格式不匹配\")\r\n        }\r\n\r\n        val nodeNum = arr[4].replace(\"[第节]\".toRegex(), \"\")\r\n        val startNode: Int\r\n        val endNode: Int\r\n        if (nodeNum.contains('-')) {\r\n            startNode = Integer.parseInt(nodeNum.substringBefore('-'))\r\n            endNode = Integer.parseInt(nodeNum.substringAfter('-'))\r\n        } else {\r\n            startNode = Integer.parseInt(nodeNum)\r\n            endNode = startNode\r\n        }\r\n\r\n        val weekList = arr[2].replace(\"周\", \"\").split(',')\r\n        for (item in weekList) {\r\n            val type = when {\r\n                item.endsWith(\"单\") -> 1\r\n                item.endsWith(\"双\") -> 2\r\n                else -> 0\r\n            }\r\n            val weekNum = item.replace(\"[单双]\".toRegex(), \"\")\r\n            val startWeek: Int\r\n            val endWeek: Int\r\n            if (weekNum.contains('-')) {\r\n                startWeek = Integer.parseInt(weekNum.substringBefore('-'))\r\n                endWeek = Integer.parseInt(weekNum.substringAfter('-'))\r\n            } else {\r\n                startWeek = Integer.parseInt(weekNum)\r\n                endWeek = startWeek\r\n            }\r\n            result.add(\r\n                Course(\r\n                    name,\r\n                    day,\r\n                    arr[3],\r\n                    arr[0],\r\n                    startNode,\r\n                    endNode,\r\n                    startWeek,\r\n                    endWeek,\r\n                    type,\r\n                    note = noteCourseClass\r\n                )\r\n            )\r\n        }\r\n        return result\r\n    }\r\n\r\n    data class CourseInfo(\r\n        val KCWZSM: String?,\r\n        val RWH: String?,\r\n        val FILEURL: String?,\r\n        val SKSJ: String,\r\n        val XB: Int?,\r\n        val SKSJ_EN: String?,\r\n        val KEY: String\r\n    )\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/SUSTechParser.kt b/src/main/java/parser/SUSTechParser.kt
--- a/src/main/java/parser/SUSTechParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/SUSTechParser.kt	(date 1745507183769)
@@ -13,7 +13,7 @@
     private val pwd: String,
     private val semesterYear: String,
     private val semesterTerm: String
-) : Parser("") {
+) : Parser() {
 
     override fun generateCourseList(): List<Course> {
         val userAgent =
@@ -153,7 +153,7 @@
                     startWeek,
                     endWeek,
                     type,
-                    note = noteCourseClass
+                    note = noteCourseClass,
                 )
             )
         }
Index: src/main/java/parser/XAUATParser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser;\r\n\r\nimport bean.Course;\r\nimport main.java.bean.TimeDetail;\r\nimport main.java.bean.TimeTable;\r\nimport org.jetbrains.annotations.NotNull;\r\nimport org.jetbrains.annotations.Nullable;\r\nimport org.jsoup.Jsoup;\r\nimport org.jsoup.nodes.Document;\r\nimport org.jsoup.nodes.Element;\r\nimport org.jsoup.select.Elements;\r\nimport parser.Parser;\r\n\r\nimport java.io.IOException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.*;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\n/**\r\n * 西安建筑科技大学研究生教务\r\n * 系统登录地址：https://gmis.xauat.edu.cn/pyxx（注：该系统要求IE10+或Chrome，需要调整UA，否则有弹窗无法登陆）\r\n * 在 教学与培养 -> 课表查询 导入\r\n * 若有适配不完善，可在本人fork的项目下提issue\r\n *\r\n * @author akhzz\r\n * @date 2023/9/8\r\n */\r\npublic class XAUATParser extends Parser {\r\n\r\n    private final String jsInitFunc;\r\n\r\n    private int maxWeek;\r\n    private List<Course> courseList;\r\n    private TimeTable timeTable;\r\n    private int maxNode;\r\n    private String tableName;\r\n    private String startDate;\r\n\r\n    public XAUATParser(@NotNull String source) {\r\n        super(source);\r\n        jsInitFunc = source.substring(source.indexOf(\"function init(){\"), source.indexOf(\"};\"));\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public String getStartDate() {\r\n        final HashMap<String, String> START_DATE = new HashMap<>();\r\n        START_DATE.put(\"2022-2023-1\", \"2022-8-28\");\r\n        START_DATE.put(\"2022-2023-2\", \"2023-2-12\");\r\n        START_DATE.put(\"2023-2024-1\", \"2023-8-27\");\r\n        START_DATE.put(\"2023-2024-2\", \"2024-2-25\");\r\n        START_DATE.put(\"2024-2025-1\", \"2024-8-25\");\r\n        if (startDate != null) {\r\n            return startDate;\r\n        }\r\n        if (tableName == null) {\r\n            tableName = getTableName();\r\n        }\r\n        // 优先使用手动录入的结果\r\n        // 来源：教务处，https://jwc.xauat.edu.cn/lszq/xljzxsj.htm\r\n        if (START_DATE.containsKey(tableName)) {\r\n            startDate = START_DATE.get(tableName);\r\n            return startDate;\r\n        }\r\n        // 如果没有手动录入的数据就使用教务处网页的数据，这个数据只有当前学期的（开学后过几天才会更新）\r\n        // 来源：教务处网页右上角的周数对应后台的input，https://jwc.xauat.edu.cn\r\n        Document doc;\r\n        try {\r\n            doc = Jsoup.connect(\"https://jwc.xauat.edu.cn/\").get();\r\n        } catch (IOException e) {\r\n            return null;\r\n        }\r\n        Elements elements = doc.select(\".top_one > div:nth-child(1) > div:nth-child(1) > input:nth-child(6)\");\r\n        String startDateFromJwc = elements.first().attr(\"value\");\r\n        if (\"\".equals(startDate)) {\r\n            return null;\r\n        }\r\n        // 2023-2024-1学期的设置的日期是2023-8-28，这一天是周一，但实际上学校使用周日作为一周的第一天，这里对数据做了修正\r\n        startDate = moveDay(startDateFromJwc, \"yyyy-M-dd\", -1);\r\n        return startDate;\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public Integer getNodes() {\r\n        if (maxNode == 0) {\r\n            timeTable = generateTimeTable();\r\n        }\r\n        return maxNode;\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public String getTableName() {\r\n        if (tableName != null) {\r\n            return tableName;\r\n        }\r\n        Document doc = Jsoup.parse(getSource());\r\n        Elements elements = doc.select(\"#drpxq > option[selected=\\\"selected\\\"]\");\r\n        return elements.first().text();\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public Integer getMaxWeek() {\r\n        if (maxWeek == 0) {\r\n            courseList = generateCourseList();\r\n        }\r\n        // 程序里面的maxWeek是按最晚结束课程算的，\r\n        // 统计了一下校历，一般教学周最短19周左右，如果太短就用19周代替，够19就加3防止后面记录考试啥的\r\n        return maxWeek >= 19 ? maxWeek + 3 : 19;\r\n    }\r\n\r\n    @NotNull\r\n    @Override\r\n    public List<Course> generateCourseList() {\r\n        if (courseList != null) {\r\n            return courseList;\r\n        }\r\n        String dayRegex = \"td_\\\\d_\\\\d{2}\";\r\n        List<Course> courseList = new ArrayList<>();\r\n        int startIndex;\r\n        int endIndex;\r\n        Pattern pattern = Pattern.compile(dayRegex);\r\n        Matcher matcher = pattern.matcher(jsInitFunc);\r\n        while (matcher.find()) {\r\n            // 提取当前条课程所在星期及节数\r\n            String dayStr = matcher.group().substring(3);\r\n            // 提取课程信息\r\n            startIndex = matcher.start();\r\n            startIndex = jsInitFunc.indexOf(\"+=\\\"课程\", startIndex);\r\n            endIndex = jsInitFunc.indexOf(\"\\\";\", startIndex);\r\n            String courseInfo = jsInitFunc.substring(startIndex + 3, endIndex);\r\n            courseList.add(parseItem(dayStr, courseInfo));\r\n        }\r\n\r\n        // 暴力合并相邻小节课程，辣鸡系统小节是单独的一条信息，我比较蔡，如果有更优雅的方法可以替换一下\r\n        // 在合并时，周范围一直的信息才会合并，周范围不一致的小节将不会合并（课表里应该没有这样的）\r\n        for (int i = courseList.size() - 1; i >= 0; i--) {\r\n            Course iCourse = courseList.get(i);\r\n            for (int j = 0; j < i; j++) {\r\n                Course jCourse = courseList.get(j);\r\n                // 检查是不是同一门课，各信息是否一致\r\n                if (!iCourse.getName().equals(jCourse.getName())\r\n                        || iCourse.getStartWeek() != jCourse.getStartWeek()\r\n                        || iCourse.getEndWeek() != jCourse.getEndWeek()\r\n                        || iCourse.getType() != jCourse.getType()\r\n                        || iCourse.getDay() != jCourse.getDay()\r\n                        || !iCourse.getTeacher().equals(jCourse.getTeacher())\r\n                        || !iCourse.getRoom().equals(jCourse.getRoom())) {\r\n                    continue;\r\n                }\r\n                if (iCourse.getEndNode() + 1 == jCourse.getStartNode()) {\r\n                    jCourse.setStartNode(iCourse.getStartNode());\r\n                }\r\n                if (jCourse.getEndNode() + 1 == iCourse.getStartNode()) {\r\n                    jCourse.setEndNode(iCourse.getEndNode());\r\n                }\r\n                courseList.remove(i);\r\n                break;\r\n            }\r\n        }\r\n        return courseList;\r\n    }\r\n\r\n    // 获取每一条课程的信息\r\n    private Course parseItem(String dayStr, String courseInfo) {\r\n        String name;      // 课程名\r\n        int day;       // 该课程的是星期几（7代表星期天）参数范围：1 - 7\r\n        String room;      // 教室\r\n        String teacher;   // 老师\r\n        int startNode;    // 开始为第几节课\r\n        int endNode;      // 结束时为第几节课\r\n        int startWeek;    // 开始周\r\n        int endWeek;      // 结束周\r\n        int type = 0;         // 单双周，每周为0，单周为1，双周为2\r\n\r\n        // 节数和星期是表格的id中包含的，例如：td_2_44，其中2代表周二，44代表第4节课（减去40）\r\n        String[] weekAndNode = dayStr.split(\"_\");\r\n        day = Integer.parseInt(weekAndNode[0]);\r\n        startNode = Integer.parseInt(weekAndNode[1]) - 40;\r\n        endNode = startNode;\r\n        String[] info = courseInfo.split(\"<br>\");\r\n        name = info[0].substring(3);\r\n        teacher = info[2].substring(5);\r\n        // 周数和地点在一起，后面用括号标注的周数，部分课程没有安排教室\r\n        // 教室:草堂校区-草堂14号楼-14-101(第3-5周 连续周 )\r\n        if (info[3].substring(info[3].indexOf(\":\") + 1).startsWith(\"(\")) {\r\n            room = \"\";\r\n        } else {\r\n            room = info[3].substring(info[3].indexOf(\":\") + 1, info[3].indexOf(\"(\"));\r\n            room = simplyRoom(room);\r\n        }\r\n        String[] weekInfo = info[3].substring(info[3].indexOf(\"(\") + 1, info[3].length() - 2).split(\" \");\r\n        startWeek = Integer.parseInt(weekInfo[0].substring(1, weekInfo[0].indexOf(\"-\")));\r\n        endWeek = Integer.parseInt(weekInfo[0].substring(weekInfo[0].indexOf(\"-\") + 1, weekInfo[0].length() - 1));\r\n\r\n        if (endWeek > maxWeek) {\r\n            maxWeek = endWeek;\r\n        }\r\n        // 没有发现单双周的数据，猜测显示的是“单周”和“双周”，暂时先留着\r\n        if (\"单周\".equals(weekInfo[1])) {\r\n            type = 1;\r\n        } else if (\"双周\".equals(weekInfo[1])) {\r\n            type = 2;\r\n        }\r\n\r\n        return new Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type, 0.0f,\r\n                \"\", \"\", \"\");\r\n    }\r\n\r\n    // 简化上课地址字符串，防止过长在app显示时遮挡\r\n    private String simplyRoom(String rawStr) {\r\n        // 草堂校区-草堂校区13号楼-草堂13-306\r\n        if (Pattern.compile(\"草堂校区-草堂校区\\\\d{1,2}号楼-草堂\\\\d{1,2}-\\\\d{1,3}\").matcher(rawStr).find()) {\r\n            rawStr = rawStr.replaceAll(\"草堂校区-草堂校区\\\\d{1,2}号楼-\", \"\");\r\n        }\r\n        // 草堂校区-草堂14号楼-14-101\r\n        if (Pattern.compile(\"草堂校区-草堂\\\\d{1,2}号楼-\\\\d{1,2}-\\\\d{1,3}\").matcher(rawStr).find()) {\r\n            rawStr = rawStr.replaceAll(\"号楼-\\\\d{1,2}\", \"\").substring(5);\r\n        }\r\n        // 草堂校区-学府城1-504-学府城1-504\r\n        if (Pattern.compile(\"草堂校区-(学府城\\\\d{1,2}-\\\\d{3}-?){2}\").matcher(rawStr).find()) {\r\n            rawStr = rawStr.replaceAll(\"草堂校区-学府城\\\\d{1,2}-\\\\d{3}-\", \"\");\r\n        }\r\n        // 草堂校区-16-405-16-405\r\n        if (Pattern.compile(\"草堂校区-(\\\\d{1,2}-\\\\d{3}-?){2}\").matcher(rawStr).find()) {\r\n            rawStr = rawStr.replaceAll(\"校区-\\\\d{1,2}-\\\\d{3}-\", \"\");\r\n        }\r\n        //草堂校区-13-13-315\r\n        if (Pattern.compile(\"草堂校区-(\\\\d{1,2}-){2}\\\\d{1,3}\").matcher(rawStr).find()) {\r\n            rawStr = rawStr.replaceAll(\"校区-\\\\d{1,2}-\", \"\");\r\n        }\r\n        // 雁塔校区-环境学院716-环境学院716\r\n        if (Pattern.compile(\"雁塔校区-(环境学院\\\\d+-?){2}\").matcher(rawStr).find()) {\r\n            rawStr = rawStr.replaceAll(\"雁塔校区-环境学院\\\\d+-\", \"\");\r\n        }\r\n        return rawStr.replace(\"雁塔校区-土木楼-\", \"\")\r\n                .replace(\"雁塔校区-教学大楼-\", \"\")\r\n                .replace(\"雁塔校区-南阶-\", \"\")\r\n                .replace(\"雁塔校区-东阶-\", \"\")\r\n                .replace(\"雁塔校区-西阶-\", \"\")\r\n                .replace(\"雁塔校区-教学大楼7楼中厅-\", \"\")\r\n                .replace(\"雁塔校区-东楼会议室A-\", \"\")\r\n                .replace(\"雁塔校区-建筑学院东楼-\", \"\")\r\n                .replace(\"雁塔校区-东楼-\", \"\")\r\n                .replace(\"雁塔校区-工科楼-\", \"\")\r\n                .replace(\"雁塔校区-青教-\", \"\")\r\n                .replace(\"雁塔校区-逸夫楼-\", \"\")\r\n                .replace(\"雁塔校区-膜院三楼会议室-\", \"\");\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public TimeTable generateTimeTable() {\r\n        if (timeTable != null) {\r\n            return timeTable;\r\n        }\r\n        Document document = Jsoup.parse(getSource());\r\n        int month = Calendar.getInstance().get(Calendar.MONTH) + 1;\r\n        Element tbody = document.select(\"table.table:nth-child(5) > tbody:nth-child(1)\").get(0);\r\n        Elements header = tbody.select(\"tr:nth-child(1) > td\");\r\n        HashMap<String, Integer> indexMap = new HashMap<>();\r\n        for (int i = 0; i < header.size(); i++) {\r\n            if (header.get(i).text().contains(\"雁塔\") && header.get(i).text().contains(\"冬\")) {\r\n                indexMap.put(\"雁塔冬季\", i);\r\n            } else if (header.get(i).text().contains(\"雁塔\") && header.get(i).text().contains(\"夏\")) {\r\n                indexMap.put(\"雁塔夏季\", i);\r\n            } else if (header.get(i).text().contains(\"草堂\")) {\r\n                indexMap.put(\"草堂\", i);\r\n            }\r\n        }\r\n        Elements trs = tbody.select(\"tr#swsjbzlb1\");\r\n        String district = null;\r\n        // 草堂不分冬夏\r\n        if (jsInitFunc.contains(\"草堂\")) {\r\n            district = \"草堂\";\r\n        }\r\n        // 雁塔夏季作息\r\n        else if (jsInitFunc.contains(\"雁塔\") && month >= 5 && month <= 9) {\r\n            district = \"雁塔夏季\";\r\n        }\r\n        // 雁塔冬季作息\r\n        else if (jsInitFunc.contains(\"雁塔\") && (month < 5 || month > 9)) {\r\n            district = \"雁塔冬季\";\r\n        }\r\n        // 如果课表里上课地点没有校区信息，则默认使用草堂的时间表\r\n        if (district == null) {\r\n            district = \"草堂\";\r\n        }\r\n        List<TimeDetail> timeDetailList = generateTimeList(trs, indexMap, district);\r\n        maxNode = timeDetailList.size();\r\n        return new TimeTable(district, timeDetailList);\r\n    }\r\n\r\n    private List<TimeDetail> generateTimeList(Elements trs, HashMap<String, Integer> indexMap, String district) {\r\n        if (!jsInitFunc.contains(district)) {\r\n            return defaultTimeList(district);\r\n        }\r\n        return timeDetailParser(trs, indexMap.get(district));\r\n    }\r\n\r\n    /**\r\n     * 处理每个校区的时间\r\n     *\r\n     * @param trs   整个表格tbody以内的部分\r\n     * @param index 校区对应的列\r\n     * @return 该校区的时间表\r\n     */\r\n    private List<TimeDetail> timeDetailParser(Elements trs, int index) {\r\n        List<TimeDetail> timeDetailList = new ArrayList<>();\r\n        for (int i = 0; i < trs.size(); i++) {\r\n            Element tr = trs.get(i);\r\n            String[] times = tr.select(\"td:nth-child(\" + index + \") > font\").text().split(\"-\");\r\n            // HTML的表格里有空行，用前一节课增加5分钟课间来作为这节课的开始时间\r\n            // 这种课统一按45分钟算，因为草堂每节课45分钟，HTML空格对应的草堂可能是有课的，而雁塔都是实实在在没有课\r\n            if (times.length != 2) {\r\n                timeDetailList.add(\r\n                        new TimeDetail(i + 1,\r\n                                moveMinute(timeDetailList.get(i - 1).getEndTime(), \"HH:mm\", 5),\r\n                                moveMinute(timeDetailList.get(i - 1).getEndTime(), \"HH:mm\", 45)));\r\n                continue;\r\n            }\r\n            timeDetailList.add(\r\n                    new TimeDetail(i + 1, addHourPrefixZero(times[0]), addHourPrefixZero(times[1])));\r\n        }\r\n        return timeDetailList;\r\n    }\r\n\r\n    private List<TimeDetail> defaultTimeList(String district) {\r\n        List<TimeDetail> defaultTimeList = new ArrayList<>();\r\n        // 草堂默认作息\r\n        if (\"草堂\".equals(district)) {\r\n            defaultTimeList.add(new TimeDetail(1, \"08:30\", \"09:15\"));\r\n            defaultTimeList.add(new TimeDetail(2, \"09:20\", \"10:05\"));\r\n            defaultTimeList.add(new TimeDetail(3, \"10:25\", \"11:10\"));\r\n            defaultTimeList.add(new TimeDetail(4, \"11:15\", \"12:00\"));\r\n            defaultTimeList.add(new TimeDetail(5, \"12:10\", \"12:55\"));\r\n            defaultTimeList.add(new TimeDetail(6, \"13:00\", \"13:45\"));\r\n            defaultTimeList.add(new TimeDetail(7, \"14:00\", \"14:45\"));\r\n            defaultTimeList.add(new TimeDetail(8, \"14:50\", \"15:35\"));\r\n            defaultTimeList.add(new TimeDetail(9, \"15:45\", \"16:30\"));\r\n            defaultTimeList.add(new TimeDetail(10, \"16:35\", \"17:20\"));\r\n            defaultTimeList.add(new TimeDetail(11, \"19:30\", \"20:15\"));\r\n            defaultTimeList.add(new TimeDetail(12, \"20:20\", \"21:05\"));\r\n        }\r\n        // 雁塔冬季默认作息\r\n        if (\"雁塔冬季\".equals(district)) {\r\n            defaultTimeList.add(new TimeDetail(1, \"08:40\", \"08:50\"));\r\n            defaultTimeList.add(new TimeDetail(2, \"08:55\", \"09:50\"));\r\n            defaultTimeList.add(new TimeDetail(3, \"10:10\", \"11:00\"));\r\n            defaultTimeList.add(new TimeDetail(4, \"11:10\", \"12:00\"));\r\n            // 雁塔中午不上课，所以作息表上没有时间，但是为了和草堂统一，第5-6节还是空出来的（学校这么安排的），这里时间是随便写的，雁塔夏季作息同理\r\n            defaultTimeList.add(new TimeDetail(5, \"12:10\", \"12:55\"));\r\n            defaultTimeList.add(new TimeDetail(6, \"13:00\", \"13:45\"));\r\n            defaultTimeList.add(new TimeDetail(7, \"14:00\", \"14:50\"));\r\n            defaultTimeList.add(new TimeDetail(8, \"15:00\", \"15:50\"));\r\n            defaultTimeList.add(new TimeDetail(9, \"16:00\", \"16:50\"));\r\n            defaultTimeList.add(new TimeDetail(10, \"17:00\", \"17:50\"));\r\n            defaultTimeList.add(new TimeDetail(11, \"19:30\", \"20:20\"));\r\n            defaultTimeList.add(new TimeDetail(12, \"20:30\", \"21:20\"));\r\n        }\r\n        // 雁塔夏季默认作息\r\n        if (\"雁塔夏季\".equals(district)) {\r\n            defaultTimeList.add(new TimeDetail(1, \"08:00\", \"08:50\"));\r\n            defaultTimeList.add(new TimeDetail(2, \"08:55\", \"09:50\"));\r\n            defaultTimeList.add(new TimeDetail(3, \"10:10\", \"11:00\"));\r\n            defaultTimeList.add(new TimeDetail(4, \"11:10\", \"12:00\"));\r\n            defaultTimeList.add(new TimeDetail(5, \"12:10\", \"12:55\"));\r\n            defaultTimeList.add(new TimeDetail(6, \"13:00\", \"13:45\"));\r\n            defaultTimeList.add(new TimeDetail(7, \"14:30\", \"15:20\"));\r\n            defaultTimeList.add(new TimeDetail(8, \"15:30\", \"16:20\"));\r\n            defaultTimeList.add(new TimeDetail(9, \"16:30\", \"17:20\"));\r\n            defaultTimeList.add(new TimeDetail(10, \"17:30\", \"18:20\"));\r\n            defaultTimeList.add(new TimeDetail(11, \"20:00\", \"20:50\"));\r\n            defaultTimeList.add(new TimeDetail(12, \"21:00\", \"21:50\"));\r\n        }\r\n        return defaultTimeList;\r\n    }\r\n\r\n    // 给时间增加前导零\r\n    private String addHourPrefixZero(String time) {\r\n        if (!time.startsWith(\"0\") && time.length() == 4) {\r\n            return \"0\" + time;\r\n        }\r\n        return time;\r\n    }\r\n\r\n    /**\r\n     * 获取\"HH:mm\"增加minute分钟后的时间\r\n     *\r\n     * @param inputTime 格式为\"HH:mm\"的时间\r\n     * @param minute    增肌的时间，格式同上\r\n     * @return 增加时间后的时间\r\n     */\r\n    private String moveMinute(String inputTime, String pattern, int minute) {\r\n        try {\r\n            SimpleDateFormat sdf = new SimpleDateFormat(pattern);\r\n            Date date = sdf.parse(inputTime);\r\n            Calendar calendar = Calendar.getInstance();\r\n            calendar.setTime(date);\r\n            calendar.add(Calendar.MINUTE, minute);\r\n            Date newDate = calendar.getTime();\r\n            return sdf.format(newDate);\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    private String moveDay(String inputDate, String pattern, int day) {\r\n        try {\r\n            SimpleDateFormat sdf = new SimpleDateFormat(pattern);\r\n            Date date = sdf.parse(inputDate);\r\n            Calendar calendar = Calendar.getInstance();\r\n            calendar.setTime(date);\r\n            calendar.add(Calendar.DATE, day);\r\n            Date newDate = calendar.getTime();\r\n            return sdf.format(newDate);\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/XAUATParser.java b/src/main/java/parser/XAUATParser.java
--- a/src/main/java/parser/XAUATParser.java	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/XAUATParser.java	(date 1745507183551)
@@ -38,7 +38,7 @@
     private String startDate;
 
     public XAUATParser(@NotNull String source) {
-        super(source);
+        super();
         jsInitFunc = source.substring(source.indexOf("function init(){"), source.indexOf("};"));
     }
 
@@ -207,7 +207,7 @@
         }
 
         return new Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type, 0.0f,
-                "", "", "");
+                "", "", "", );
     }
 
     // 简化上课地址字符串，防止过长在app显示时遮挡
Index: src/main/java/parser/SITParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\nimport org.jsoup.nodes.Document\r\nimport org.jsoup.nodes.Element\r\nimport org.jsoup.select.Elements\r\n\r\nclass SITParser(source: String) : Parser(source) {\r\n\r\n    private fun isBlankWithoutIndex(elements: Elements): Boolean {\r\n        val str = StringBuffer()\r\n        for (i in 1 until elements.size) {\r\n            str.append(elements[i].text())\r\n        }\r\n        return str.trim().isEmpty()\r\n    }\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val allResults = ArrayList<Course>() //用于存放所有的课程\r\n        val doc: Document = Jsoup.parse(source.substringAfterLast(\"<body>\"))\r\n        val tableElement: Element = doc.getElementsByTag(\"form\").first()\r\n        val tables: Elements = tableElement.getElementsByTag(\"table\")\r\n\r\n        //以下代码开始解析课表\r\n        val tableMain = tables[0]   //获取课程表的主表格\r\n        val trs: Elements = tableMain.getElementsByTag(\"tr\")    //获取课程表中的每一行\r\n        //从第二行开始为第一节课\r\n        for (i in 2 until trs.size) {\r\n            //获取每节课在整个星期的课程列表\r\n            val nodeCourses: Elements = trs[i].getElementsByTag(\"td\")\r\n            //若为第一节课，或者该节课每周都有，或者不为空\r\n            if (i == 2 || nodeCourses.size == 8) {\r\n                parseCoursesByTrs(nodeCourses).forEach {\r\n                    allResults.add(it)\r\n                }\r\n            } else if (!isBlankWithoutIndex(nodeCourses)) {\r\n                val lastNodeCourses: Elements = trs[i - 1].getElementsByTag(\"td\")\r\n                parseCourseByTrsWhenTdNumIsNot8(lastNodeCourses, nodeCourses).forEach {\r\n                    allResults.add(it)\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        //以下代码应用调课信息\r\n        //暂时懒得写\r\n        return allResults\r\n    }\r\n\r\n    private fun getRowSpan(td: Element): Int {\r\n        val rowSpan = td.attributes().get(\"rowspan\")\r\n        return if (rowSpan.isEmpty()) {\r\n            1\r\n        } else {\r\n            Integer.parseInt(rowSpan.toString())\r\n        }\r\n    }\r\n\r\n    //当一行中td的数目不等于8时，即不能与星期一一对应时，使用本解析器\r\n    private fun parseCourseByTrsWhenTdNumIsNot8(lastLineCourses: Elements, lineCourses: Elements): List<Course> {\r\n        val emptyCourse = Element(\"td\")\r\n        val fullElements = Elements()\r\n        val iter = lineCourses.iterator()\r\n        lastLineCourses.forEach {\r\n            val rowSpan = getRowSpan(it)\r\n            if (rowSpan == 1 && iter.hasNext()) {\r\n                fullElements.add(iter.next())\r\n            } else {\r\n                fullElements.add(emptyCourse)\r\n            }\r\n        }\r\n        return parseCoursesByTrs(fullElements)\r\n    }\r\n\r\n\r\n    //解析每节课在一周的课程列表，传入每一行的Elements，表格中的一个tr标签，下面有许多td标签\r\n    private fun parseCoursesByTrs(lineCourses: Elements): List<Course> {\r\n        val result = ArrayList<Course>()\r\n        val startNode = Integer.parseInt(lineCourses[0].text())      //开始于第几节课\r\n        for (i in 1 until lineCourses.size) { //i的含义为星期几\r\n            val rowSpan = lineCourses[i].attributes().get(\"rowspan\")\r\n            if (rowSpan.isEmpty()) {\r\n                //如果某天没课，那么直接跳过本次循环\r\n                continue\r\n            }\r\n            val nodeLength = Integer.parseInt(rowSpan)\r\n            val endNode = startNode + nodeLength - 1\r\n            val course = lineCourses[i].getElementsByAttributeValue(\"name\", \"d1\")\r\n            course.forEach {\r\n                val courseElement: Course = parseCourseElement(it, i, startNode, endNode)\r\n                result.add(courseElement)\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n\r\n    /*\r\n       * <pre>\r\n\r\n       courseDiv参数传入以下Element：\r\n           <div name=\"d1\" onmouseover=\"do1(this,45)\" onmouseout=\"do2(this,45)\">\r\n           高等数学（工）2\r\n           <br>第1-16周 一教A308\r\n           <br>1956448 李娟\r\n           </div>\r\n       * </pre>\r\n       * */\r\n    private fun parseCourseElement(courseDiv: Element, day: Int, startNode: Int, endNode: Int): Course {\r\n        val courseInfos = courseDiv.text().split(' ')\r\n        val name = courseInfos[0]\r\n\r\n        val weekParser = WeekParser(courseInfos[1])\r\n        val startWeek = weekParser.getStartWeek()\r\n        val endWeek = weekParser.getEndWeek()\r\n        val type = weekParser.getSingleDouble()\r\n\r\n        val room = courseInfos[2]\r\n        // 将课程序号与老师名称合并到一个teacher属性中\r\n        // val teacher = courseInfos[3] + ' ' + courseInfos[4]\r\n        val teacher = courseInfos[4]\r\n        return Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type)\r\n    }\r\n\r\n    class WeekParser(val source: String) {\r\n        //消除单双周数据，掐头去尾\r\n        private val mySource = source.replace(\"*\", \"\").substring(1).removeSuffix(\"周\")\r\n        private val EVERY_WEEK: Int = 0\r\n        private val SINGLE_WEEK: Int = 1\r\n        private val DOUBLE_WEEK: Int = 2\r\n\r\n        fun getStartWeek(): Int {\r\n            //有可能一周的这一天仅上一节课\r\n            return if (mySource.contains(\"-\"))\r\n                Integer.parseInt(mySource.split(\"-\")[0])\r\n            else\r\n                Integer.parseInt(mySource)\r\n\r\n        }\r\n\r\n        fun getEndWeek(): Int {\r\n            return if (mySource.contains(\"-\"))\r\n                Integer.parseInt(mySource.split(\"-\")[1])\r\n            else\r\n                Integer.parseInt(mySource)\r\n        }\r\n\r\n        fun getSingleDouble(): Int {\r\n            if (source.contains(\"**\")) {\r\n                return DOUBLE_WEEK\r\n            }\r\n            if (source.contains(\"*\")) {\r\n                return SINGLE_WEEK\r\n            }\r\n            return EVERY_WEEK\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/SITParser.kt b/src/main/java/parser/SITParser.kt
--- a/src/main/java/parser/SITParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/SITParser.kt	(date 1745507183509)
@@ -6,7 +6,7 @@
 import org.jsoup.nodes.Element
 import org.jsoup.select.Elements
 
-class SITParser(source: String) : Parser(source) {
+class SITParser(source: String) : Parser() {
 
     private fun isBlankWithoutIndex(elements: Elements): Boolean {
         val str = StringBuffer()
@@ -120,7 +120,7 @@
         // 将课程序号与老师名称合并到一个teacher属性中
         // val teacher = courseInfos[3] + ' ' + courseInfos[4]
         val teacher = courseInfos[4]
-        return Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type)
+        return Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type,)
     }
 
     class WeekParser(val source: String) {
Index: src/main/java/parser/JXAUParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport Common.getDayInt\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\n\r\nclass JXAUParser(source: String) : Parser(source){\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val doc = Jsoup.parse(source)\r\n        val table = doc.getElementById(\"KebiaoTable1\")\r\n        val trs = table.getElementsByTag(\"tr\").subList(2,9)\r\n        for(tr in trs) {\r\n            val day = getDayInt(tr.getElementsByClass(\"left1\")[0].text())\r\n            val tds = tr.getElementsByTag(\"td\")\r\n            var startNode = 1\r\n            tds.removeAt(0)\r\n            for(i in tds.indices) {\r\n                if(i == 4 || i == 6) {\r\n                    continue\r\n                }\r\n                val dls = tds[i].getElementsByTag(\"dl\")\r\n                for(dl in dls) {\r\n                    val name = dl.getElementsByTag(\"a\")[0].text()\r\n                    val teacher = dl.getElementsByTag(\"dd\")[0].text()\r\n                    val room = dl.getElementsByTag(\"b\")[0].text()\r\n                    val week = dl.getElementsByTag(\"dd\")[1].text().split(\"(\")[0].split(\",\")\r\n                    for(reg in week) {\r\n                        var startWeek : Int\r\n                        var endWeek : Int\r\n                        if(reg.contains(\"-\")) {\r\n                            val allweek = reg.split(\"-\")\r\n                            startWeek = allweek[0].toInt()\r\n                            endWeek = allweek[1].toInt()\r\n                        }else{\r\n                            startWeek = reg.toInt()\r\n                            endWeek = startWeek\r\n                        }\r\n                        val c = Course(\r\n                            name = name, day = day, room = room, teacher = teacher, startNode = startNode,\r\n                            endNode = startNode+1, startWeek = startWeek, endWeek = endWeek, type = 0\r\n                        )\r\n                        courseList.add(c)\r\n                    }\r\n                }\r\n                startNode += 2\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/JXAUParser.kt b/src/main/java/parser/JXAUParser.kt
--- a/src/main/java/parser/JXAUParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/JXAUParser.kt	(date 1745507183537)
@@ -5,7 +5,7 @@
 import org.jsoup.Jsoup
 import parser.Parser
 
-class JXAUParser(source: String) : Parser(source){
+class JXAUParser(source: String) : Parser() {
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
         val doc = Jsoup.parse(source)
@@ -39,7 +39,7 @@
                         }
                         val c = Course(
                             name = name, day = day, room = room, teacher = teacher, startNode = startNode,
-                            endNode = startNode+1, startWeek = startWeek, endWeek = endWeek, type = 0
+                            endNode = startNode+1, startWeek = startWeek, endWeek = endWeek, type = 0,
                         )
                         courseList.add(c)
                     }
Index: src/main/java/parser/SYSUParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport bean.Course\r\n\r\nclass SYSUParser(source: String) : Parser(source) {\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = ArrayList<Course>()\r\n\r\n        val doc = org.jsoup.Jsoup.parse(source)\r\n        val tables = doc.getElementsByClass(\"com-table class-schedule-table2\")\r\n        var table = tables[0]\r\n        val ths = table.getElementsByTag(\"tr\")[0].getElementsByTag(\"th\")\r\n\r\n        // day start from Sunday\r\n        val columnSpanList = ArrayList<Int>()\r\n        for (th in ths) {\r\n            if (th.className() == \"th2\")\r\n                continue\r\n            columnSpanList.add(th.attr(\"colspan\").toInt())\r\n        }\r\n        assert(columnSpanList.size == 7)\r\n\r\n        table = tables[1]\r\n        val tableTbody = table.getElementsByTag(\"tbody\")[0]\r\n        val trs = tableTbody.getElementsByTag(\"tr\")\r\n        for (i in trs.indices) {\r\n            var currentColumnSpan = 0\r\n            var countDay = 0\r\n            val tds = trs[i].getElementsByTag(\"td\")\r\n            for (td in tds) {\r\n                if (td.className() == \"td2-1\")\r\n                    continue\r\n\r\n                val colspan = td.attr(\"colspan\").toInt()\r\n                currentColumnSpan += colspan\r\n//              println(currentColumnSpan)\r\n                if (currentColumnSpan > columnSpanList[countDay]) {\r\n                    currentColumnSpan -= columnSpanList[countDay]\r\n                    countDay++\r\n                }\r\n                if (td.className() == \"11111\")\r\n                    continue\r\n\r\n                val rowspan = td.attr(\"rowspan\").toInt()\r\n                val infoStrings = ArrayList<String>()\r\n                val spans = td.getElementsByTag(\"span\")\r\n                for (span in spans) {\r\n                    val infoString = span.text().trim().replace(\"/\", \"\")\r\n                    infoStrings.add(infoString)\r\n                }\r\n\r\n                courseList.add(parseInfoStrings(infoStrings, i + 1, i + rowspan, countDay))\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n\r\n    private fun parseInfoStrings(infoStrings: ArrayList<String>, startNode: Int, endNode: Int, countDay: Int): Course {\r\n        var info = infoStrings[0]\r\n        var typeString = \"\"\r\n        var type = 0\r\n        when {\r\n            info.contains(\"每周\") -> {\r\n                typeString = \"每周\"\r\n                type = 0\r\n            }\r\n            info.contains(\"单周\") -> {\r\n                typeString = \"单周\"\r\n                type = 1\r\n            }\r\n            info.contains(\"双周\") -> {\r\n                typeString = \"双周\"\r\n                type = 2\r\n            }\r\n        }\r\n        val weekInfo = info.replace(typeString, \"\").split(\"-\")\r\n        val startWeek = weekInfo[0].toInt()\r\n        val endWeek = weekInfo[1].toInt()\r\n\r\n        info = infoStrings[1]\r\n        val nameInfo = info.split(Regex(\"[()]\"))\r\n        val name = nameInfo[2]\r\n\r\n        info = infoStrings[2]\r\n        val teacher = info\r\n\r\n        info = infoStrings[3]\r\n        val room = info\r\n\r\n        // week starts from Sunday\r\n        val cday = if (countDay == 0) 7 else countDay\r\n\r\n        return Course(\r\n            name = name,\r\n            day = cday,\r\n            room = room,\r\n            teacher = teacher,\r\n            startNode = startNode,\r\n            endNode = endNode,\r\n            startWeek = startWeek,\r\n            endWeek = endWeek,\r\n            type = type\r\n        )\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/SYSUParser.kt b/src/main/java/parser/SYSUParser.kt
--- a/src/main/java/parser/SYSUParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/SYSUParser.kt	(date 1745507183686)
@@ -2,7 +2,7 @@
 
 import bean.Course
 
-class SYSUParser(source: String) : Parser(source) {
+class SYSUParser(source: String) : Parser() {
     override fun generateCourseList(): List<Course> {
         val courseList = ArrayList<Course>()
 
@@ -99,7 +99,7 @@
             endNode = endNode,
             startWeek = startWeek,
             endWeek = endWeek,
-            type = type
+            type = type,
         )
     }
 }
Index: src/main/java/parser/BUAAParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport com.google.gson.Gson\r\nimport main.java.bean.BUAACourseInfo\r\nimport main.java.bean.TimeDetail\r\nimport main.java.bean.TimeTable\r\nimport parser.Parser\r\n\r\n/**\r\n * Date: 2024/03/02\r\n * 课表地址: https://byxt.buaa.edu.cn/ -> 查询 -> 课表查询 -> 我的课表\r\n * 项目地址: https://github.com/PandZz/CourseAdapter\r\n * 作者: PandZz\r\n *\r\n * 北京航空航天大学-新本研教务\r\n * 解析了POST(https://byxt.buaa.edu.cn/jwapp/sys/homeapp/api/home/student/getMyScheduleDetail.do)的返回结果(json)\r\n */\r\n\r\nclass BUAAParser(source: String) : Parser(source) {\r\n    private val teacherAndWeekRegex = Regex(\"\"\"^(.+)\\[(\\d+)-(\\d+)周(?:\\(([单双])\\))?]$\"\"\")\r\n    override fun getNodes(): Int {\r\n        return 14\r\n    }\r\n\r\n    override fun generateTimeTable(): TimeTable {\r\n        return TimeTable(\r\n            name = \"北京航空航天大学\", timeList = listOf(\r\n                TimeDetail(1, \"08:00\", \"08:45\"),\r\n                TimeDetail(2, \"08:50\", \"09:35\"),\r\n                TimeDetail(3, \"09:50\", \"10:35\"),\r\n                TimeDetail(4, \"10:40\", \"11:25\"),\r\n                TimeDetail(5, \"11:30\", \"12:15\"),\r\n\r\n                TimeDetail(6, \"14:00\", \"14:45\"),\r\n                TimeDetail(7, \"14:50\", \"15:35\"),\r\n                TimeDetail(8, \"15:50\", \"16:35\"),\r\n                TimeDetail(9, \"16:40\", \"17:25\"),\r\n                TimeDetail(10, \"17:30\", \"18:15\"),\r\n\r\n                TimeDetail(11, \"19:00\", \"19:45\"),\r\n                TimeDetail(12, \"19:50\", \"20:35\"),\r\n                TimeDetail(13, \"20:40\", \"21:25\"),\r\n                TimeDetail(14, \"21:30\", \"22:15\")\r\n            )\r\n        )\r\n    }\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val result = arrayListOf<Course>()\r\n        val response = Gson().fromJson(source, BUAACourseInfo::class.java)\r\n        response.datas.arrangedList.forEach { courseItem ->\r\n            parseCourseItem(courseItem).forEach {\r\n                result.add(it)\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n    data class TeacherAndWeek(\r\n        val teacher: String,\r\n        val beginWeek: Int,\r\n        val endWeek: Int,\r\n        val type: Int // 0: 每周, 1: 单周, 2: 双周\r\n    )\r\n\r\n    // 解析教师和周数, 例如: \"张三[1-16周(单)]\" -> TeacherAndWeek(\"张三\", 1, 16, 1)\r\n    private fun parseTeacherAndWeek(teachersAndWeeks: String): TeacherAndWeek {\r\n        val matchResult = teacherAndWeekRegex.find(teachersAndWeeks)\r\n        if (matchResult != null) {\r\n            val (teacher, beginWeekStr, endWeekStr, typeStr) = matchResult.destructured\r\n            val beginWeek = beginWeekStr.toInt()\r\n            val endWeek = endWeekStr.toInt()\r\n            val type = when (typeStr) {\r\n                \"单\" -> 1\r\n                \"双\" -> 2\r\n                else -> 0\r\n            }\r\n\r\n            val teacherAndWeek = TeacherAndWeek(teacher, beginWeek, endWeek, type)\r\n//            println(teacherAndWeek)\r\n            return teacherAndWeek\r\n        }\r\n        return TeacherAndWeek(\"\", 0, 0, 0)\r\n    }\r\n\r\n    private fun parseCourseItem(courseItem: BUAACourseInfo.Datas.CourseItem): List<Course> {\r\n        val result = arrayListOf<Course>()\r\n        val cellDetail = courseItem.cellDetail\r\n        val name = courseItem.courseName\r\n        val day = courseItem.dayOfWeek\r\n        val room = courseItem.placeName\r\n        cellDetail[1].text.split(\" \").forEach { teacherAndWeeks ->\r\n            val teacherAndWeek = parseTeacherAndWeek(teacherAndWeeks)\r\n            val teacher = teacherAndWeek.teacher\r\n            val beginWeek = teacherAndWeek.beginWeek\r\n            val endWeek = teacherAndWeek.endWeek\r\n            val type = teacherAndWeek.type\r\n            val course = Course(\r\n                name = name,\r\n                day = day,\r\n                room = room,\r\n                teacher = teacher,\r\n                startNode = courseItem.beginSection,\r\n                endNode = courseItem.endSection,\r\n                startWeek = beginWeek,\r\n                endWeek = endWeek,\r\n                type = type,\r\n                credit = courseItem.credit.toFloat(),\r\n                note = courseItem.titleDetail[8],\r\n                startTime = courseItem.beginTime,\r\n                endTime = courseItem.endTime\r\n            )\r\n            result.add(course)\r\n        }\r\n        return result\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/BUAAParser.kt b/src/main/java/parser/BUAAParser.kt
--- a/src/main/java/parser/BUAAParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/BUAAParser.kt	(date 1745507183563)
@@ -17,7 +17,7 @@
  * 解析了POST(https://byxt.buaa.edu.cn/jwapp/sys/homeapp/api/home/student/getMyScheduleDetail.do)的返回结果(json)
  */
 
-class BUAAParser(source: String) : Parser(source) {
+class BUAAParser(source: String) : Parser() {
     private val teacherAndWeekRegex = Regex("""^(.+)\[(\d+)-(\d+)周(?:\(([单双])\))?]$""")
     override fun getNodes(): Int {
         return 14
@@ -109,7 +109,7 @@
                 credit = courseItem.credit.toFloat(),
                 note = courseItem.titleDetail[8],
                 startTime = courseItem.beginTime,
-                endTime = courseItem.endTime
+                endTime = courseItem.endTime,
             )
             result.add(course)
         }
Index: src/main/java/parser/UrpParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport Common\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\nimport org.jsoup.nodes.Element\r\n\r\nclass UrpParser(source: String) : Parser(source) {\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val doc = Jsoup.parse(source)\r\n        var kbtables = doc.getElementsByAttributeValue(\"class\", \"displayTag\")\r\n        try {\r\n            kbtables.last().getElementsByTag(\"tbody\").first()\r\n        } catch (e: Exception) {\r\n            kbtables = doc.getElementsByAttributeValue(\"class\", \"table table-striped table-bordered\")\r\n        }\r\n        var nameIndex = -1\r\n        var teacherIndex = -1\r\n        var weekIndex = -1\r\n        var dayIndex = -1\r\n        var nodeIndex = -1\r\n        var stepIndex = -1\r\n        var buildingIndex = -1\r\n        var roomIndex = -1\r\n        var step = 1\r\n\r\n        kbtables.forEach { kbtable ->\r\n            if (kbtable.text().contains(\"星期一\")) return@forEach\r\n            val head = kbtable.getElementsByTag(\"thead\").first()\r\n            val headSize = head.getElementsByTag(\"th\").size\r\n\r\n            head.getElementsByTag(\"th\").eachText().forEachIndexed { index, s ->\r\n                when (s.trim()) {\r\n                    \"课程名\" -> nameIndex = index\r\n                    \"教师\" -> teacherIndex = index\r\n                    \"周次\" -> weekIndex = index\r\n                    \"星期\" -> dayIndex = index\r\n                    \"节次\" -> nodeIndex = index\r\n                    \"节数\" -> stepIndex = index\r\n                    \"教学楼\" -> buildingIndex = index\r\n                    \"教室\" -> roomIndex = index\r\n                }\r\n            }\r\n            if (dayIndex == -1) return@forEach\r\n            val tBody = kbtable.getElementsByTag(\"tbody\").first()\r\n            var courseName = \"\"\r\n            var teacher = \"\"\r\n            for (tr in tBody.getElementsByTag(\"tr\")) {\r\n                val tds = tr.getElementsByTag(\"td\")\r\n                val wholeFlag = tds.size > headSize - weekIndex\r\n                val acDayIndex = if (wholeFlag) dayIndex else dayIndex - weekIndex\r\n                if (tds[acDayIndex].text().trim().isBlank()) continue\r\n                // 课名和老师\r\n                if (wholeFlag) {\r\n                    courseName = tds[nameIndex].text()\r\n                    teacher = tds[teacherIndex].text().trim()\r\n                }\r\n                // 教室\r\n                val room = try {\r\n                    tds[if (wholeFlag) buildingIndex else buildingIndex - weekIndex].text().trim() + tds[if (wholeFlag) roomIndex else roomIndex - weekIndex].text().trim()\r\n                } catch (e: Exception) {\r\n                    \"\"\r\n                }\r\n                // 开始节数\r\n                val nodeE = tds[if (wholeFlag) nodeIndex else nodeIndex - weekIndex]\r\n                val startNode = getStartNode(nodeE)\r\n                // 持续节数\r\n                step = if (stepIndex != -1) {\r\n                    getStep(tds[if (wholeFlag) stepIndex else stepIndex - weekIndex].text().trim())\r\n                } else {\r\n                    nodeE.text().trim().substringAfter('-').substringBefore('节')\r\n                        .trim().toInt() - startNode + 1\r\n                }\r\n                // 星期\r\n                val day = getDay(tds[acDayIndex])\r\n                val acWeekIndex = if (wholeFlag) weekIndex else 0\r\n\r\n                val weekStr = tds[acWeekIndex].text().trim()\r\n                var startWeek = 1\r\n                var endWeek = 20\r\n                if (weekStr.contains(',') && !weekStr.contains('-')) {\r\n                    val weekList = arrayListOf<Int>()\r\n                    val weekStrList = weekStr.split(',')\r\n                    weekStrList.forEachIndexed { index, s ->\r\n                        if (index != weekStrList.size - 1) {\r\n                            weekList.add(s.substringBefore('周').trim().toInt())\r\n                        } else {\r\n                            weekList.add(s.substringBefore('周').trim().toInt())\r\n                        }\r\n                    }\r\n                    weekList.sort()\r\n                    Common.weekIntList2WeekBeanList(weekList).forEach { weekBean ->\r\n                        courseList.add(\r\n                            Course(\r\n                                name = courseName, room = room,\r\n                                teacher = teacher, day = day,\r\n                                startNode = startNode, endNode = startNode + step - 1,\r\n                                startWeek = weekBean.start, endWeek = weekBean.end,\r\n                                type = weekBean.type\r\n                            )\r\n                        )\r\n                    }\r\n                } else {\r\n                    weekStr.split(',').forEach { week ->\r\n                        val r = Common.weekPattern1.find(week)\r\n                        if (r != null) {\r\n                            val temp = r.value.split('-')\r\n                            if (temp.size == 1) {\r\n                                startWeek = temp[0].toInt()\r\n                                endWeek = temp[0].toInt()\r\n                            } else {\r\n                                startWeek = temp[0].toInt()\r\n                                endWeek = temp[1].toInt()\r\n                            }\r\n                        }\r\n                        val type = when {\r\n                            week.contains('单') -> 1\r\n                            week.contains('双') -> 2\r\n                            else -> 0\r\n                        }\r\n                        courseList.add(\r\n                            Course(\r\n                                name = courseName, room = room,\r\n                                teacher = teacher, day = day,\r\n                                startNode = startNode, endNode = startNode + step - 1,\r\n                                startWeek = startWeek, endWeek = endWeek,\r\n                                type = type\r\n                            )\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n\r\n    private fun getDay(dayE: Element): Int {\r\n        val str = dayE.text().trim()\r\n        return try {\r\n            str.toInt()\r\n        } catch (e: Exception) {\r\n            Common.getWeekFromChinese(str)\r\n        }\r\n    }\r\n\r\n    private fun getStartNode(nodeE: Element): Int {\r\n        return if (nodeE.text().contains('-')) {\r\n            val start = nodeE.text().trim().substringBefore('-').toInt()\r\n            start\r\n        } else {\r\n            try {\r\n                nodeE.text().trim().substringAfter('第').substringBefore('大').substringBefore('小').toInt()\r\n            } catch (e: Exception) {\r\n                Common.getNodeInt(\r\n                    nodeE.text().trim().substringAfter('第').substringBefore('大').substringBefore(\r\n                        '小'\r\n                    )\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun getStep(str: String): Int {\r\n        return try {\r\n            str.toInt()\r\n        } catch (e: Exception) {\r\n            Common.getNodeInt(str)\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/UrpParser.kt b/src/main/java/parser/UrpParser.kt
--- a/src/main/java/parser/UrpParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/UrpParser.kt	(date 1745507183729)
@@ -5,7 +5,7 @@
 import org.jsoup.Jsoup
 import org.jsoup.nodes.Element
 
-class UrpParser(source: String) : Parser(source) {
+class UrpParser(source: String) : Parser() {
 
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
@@ -94,11 +94,11 @@
                     Common.weekIntList2WeekBeanList(weekList).forEach { weekBean ->
                         courseList.add(
                             Course(
-                                name = courseName, room = room,
-                                teacher = teacher, day = day,
+                                name = courseName, day = day,
+                                room = room, teacher = teacher,
                                 startNode = startNode, endNode = startNode + step - 1,
                                 startWeek = weekBean.start, endWeek = weekBean.end,
-                                type = weekBean.type
+                                type = weekBean.type,
                             )
                         )
                     }
@@ -122,11 +122,11 @@
                         }
                         courseList.add(
                             Course(
-                                name = courseName, room = room,
-                                teacher = teacher, day = day,
+                                name = courseName, day = day,
+                                room = room, teacher = teacher,
                                 startNode = startNode, endNode = startNode + step - 1,
                                 startWeek = startWeek, endWeek = endWeek,
-                                type = type
+                                type = type,
                             )
                         )
                     }
Index: src/main/java/parser/HNJMParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport bean.Course\r\nimport main.java.bean.TimeDetail\r\nimport main.java.bean.TimeTable\r\nimport org.jsoup.Jsoup\r\n\r\n/**\r\n * 适配河南经贸职业学院微信网页端课表\r\n * @author fanyy0418\r\n * @date 2022/08/28\r\n *\r\n * 直接复制微信端课表页面链接到导入界面即可\r\n */\r\n\r\n\r\nclass HNJMParser(source: String) : Parser(source) {\r\n    /*\r\n    //覆写时间表\r\n    override fun generateTimeTable(): TimeTable? {\r\n        val timeList : ArrayList<TimeDetail> = arrayListOf(\r\n            TimeDetail(1,\"08:10\",\"08:55\"),\r\n            TimeDetail(2,\"09:05\",\"09:50\"),\r\n            TimeDetail(3,\"10:15\",\"11:00\"),\r\n            TimeDetail(4,\"11:10\",\"11:55\"),\r\n            TimeDetail(5,\"14:40\",\"15:25\"),\r\n            TimeDetail(6,\"15:35\",\"16:20\"),\r\n            TimeDetail(7,\"16:40\",\"17:25\"),\r\n            TimeDetail(8,\"17:35\",\"18:20\"),\r\n            TimeDetail(9,\"19:00\",\"19:45\"),\r\n            TimeDetail(10,\"19:55\",\"20:40\")\r\n        )\r\n        return TimeTable(\"河南经贸作息\",timeList)\r\n    }\r\n\r\n    override fun getTableName(): String? =\"河南经贸导入\"\r\n    */\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val doc = Jsoup.parse(source)\r\n        val weeks = doc.getElementsByClass(\"Sub-kcbt\")//获取星期\r\n        val tables = doc.getElementsByTag(\"table\")//获取一天的课\r\n        //val trs=doc.getElementsByTag(\"tr\")//获取课表内容\r\n\r\n        var count = 0\r\n        val weekPattern1 = Regex(\"\"\"\\d{1,2}[-]*\\d{1,2}周\"\"\")\r\n        val roomPattern1 = Regex(\"\"\"[(|（][图|\\d]\\d{1,3}\"\"\")\r\n\r\n        //获取信息\r\n        for (week in weeks) {\r\n            //获取周几\r\n            val weekInt = getWeekInt(week.text())\r\n            //如果存在某天没课，则跳过\r\n            if (week.nextElementSibling().tag().toString() == \"br\")\r\n                continue\r\n            //提取当天课程\r\n            val table = tables[count++]\r\n            val trs = table.getElementsByTag(\"tr\")\r\n            //获取课程 节数 课程名 0-0周 教室 老师\r\n            for (tr in trs) {\r\n                //提取一节课\r\n                val tds = tr.getElementsByTag(\"td\")\r\n                //获取老师\r\n                val teacherName = tds[2].text()\r\n                //获取节数\r\n                val node = tds[0].text()\r\n                val startNode: Int = node.substring(0, node.indexOf('-')).toInt()\r\n                val endNode: Int = node.substring(node.indexOf('-') + 1, node.length - 1).toInt()\r\n                //课程名字\r\n                var i = 0\r\n                var j = 0\r\n                j = weekPattern1.find(tds[1].text())?.range?.first ?: -1\r\n                val courseName: String = tds[1].text().substring(i, j - 1)\r\n                //开始与结束周\r\n                i = j\r\n                j = weekPattern1.find(tds[1].text())?.range?.last ?: -1\r\n                val week = tds[1].text().substring(i, j)\r\n                val startWeek: Int = week.substring(0, week.indexOf('-')).toInt()\r\n                val endWeek: Int = week.substring(week.indexOf('-') + 1, week.length).toInt()\r\n                //获取教室\r\n                var index1 = roomPattern1.find(tds[1].text())?.range?.first ?: -1\r\n                var index2 = tds[1].text().length-2\r\n                //课程教室为空的情况\r\n                if (index1==-1){\r\n                    index1=tds[1].text().indexOf(\"；\")\r\n                    index2=tds[1].text().indexOf(\"】\")\r\n                }\r\n                val courseRoom: String = tds[1].text().substring(index1 + 1, index2)\r\n                //生成课程\r\n                courseList.add(\r\n                    Course(\r\n                        name = courseName,\r\n                        day = weekInt,\r\n                        room = courseRoom,\r\n                        teacher = teacherName,\r\n                        startNode = startNode,\r\n                        endNode = endNode,\r\n                        startWeek = startWeek,\r\n                        endWeek = endWeek,\r\n                        type = 0\r\n                    )\r\n                )\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n}\r\n\r\n/**\r\n * 该函数用于将 (String)星期一 转换为 (Int)1\r\n */\r\nfun getWeekInt(chineseWeek: String): Int {\r\n    val otherHeader = arrayOf(\"时间\", \"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\", \"星期日\", \"早晨\", \"上午\", \"下午\", \"晚上\")\r\n    for (i in otherHeader.indices) {\r\n        if (chineseWeek.contains(otherHeader[i])) {\r\n            return i\r\n        }\r\n    }\r\n    return -1\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/HNJMParser.kt b/src/main/java/parser/HNJMParser.kt
--- a/src/main/java/parser/HNJMParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/HNJMParser.kt	(date 1745507183741)
@@ -14,7 +14,7 @@
  */
 
 
-class HNJMParser(source: String) : Parser(source) {
+class HNJMParser(source: String) : Parser() {
     /*
     //覆写时间表
     override fun generateTimeTable(): TimeTable? {
@@ -97,7 +97,7 @@
                         endNode = endNode,
                         startWeek = startWeek,
                         endWeek = endWeek,
-                        type = 0
+                        type = 0,
                     )
                 )
             }
Index: src/main/java/parser/GDEIParser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser;\r\n\r\nimport bean.Course;\r\nimport org.jetbrains.annotations.NotNull;\r\nimport org.jsoup.Jsoup;\r\nimport org.jsoup.nodes.Document;\r\nimport org.jsoup.nodes.Element;\r\nimport org.jsoup.select.Elements;\r\nimport parser.Parser;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\n//广东第二师范学院\r\npublic class GDEIParser extends Parser {\r\n\r\n    Document document;\r\n    public GDEIParser(@NotNull String source) {\r\n        super(source);\r\n        document = Jsoup.parse(source);\r\n    }\r\n\r\n    @NotNull\r\n    private List<Integer> TimeParser(String NodeString){ //获取Node 和 Week\r\n        List<Integer> Node = new ArrayList<>();\r\n\r\n        // 使用正则表达式模式匹配数字\r\n        Pattern pattern = Pattern.compile(\"\\\\d+\");\r\n        Matcher matcher = pattern.matcher(NodeString);\r\n\r\n        while (matcher.find()) {\r\n            String numberStr = matcher.group();\r\n            int number = Integer.parseInt(numberStr);\r\n            Node.add(number);\r\n        }\r\n\r\n        return Node;\r\n    }\r\n    private String RoomParser(@NotNull String roomString){\r\n        String room = roomString;\r\n        int index = roomString.lastIndexOf('(');\r\n        if (index != -1){\r\n            room = roomString.substring(0,index).trim();\r\n        }\r\n        return room;\r\n    }\r\n\r\n    @NotNull\r\n    @Override\r\n    public List<Course> generateCourseList() {\r\n        List<Course> courseArrayList = new ArrayList<>();\r\n        Element element = document.selectFirst(\"tbody\");//找到显示课程表\r\n        Elements elements = element.select(\"tr\");\r\n\r\n        for (Element tableElement : elements) {\r\n            Elements courses = tableElement.select(\"td\");\r\n\r\n            for (int i = 1; i < courses.size(); i++) { //i为星期\r\n                //System.out.println(\"星期\"+i);\r\n                Elements elementInfos = courses.get(i).select(\"div div\");\r\n                if (elementInfos.isEmpty()) continue;\r\n                //System.out.println(elementInfos.text());\r\n                List<Integer> time = TimeParser(elementInfos.get(1).text());\r\n                //eg:线性代数 1-12 周 (第1,2节) 22软件工程C (30 人) 花教610 (HDJX004900) 王森洪\r\n                courseArrayList.add(new Course(elementInfos.get(0).text(), i, RoomParser(elementInfos.get(3).text()),\r\n                        elementInfos.get(4).text(), time.get(2), time.get(3), time.get(0),\r\n                        time.get(1), 0, 0f, elementInfos.get(2).text(), \"\", \"\"));\r\n\r\n                if (elementInfos.size()>5){\r\n                    time = TimeParser(elementInfos.get(6).text());\r\n                    courseArrayList.add(new Course(elementInfos.get(5).text(), i, RoomParser(elementInfos.get(8).text()),\r\n                            elementInfos.get(9).text(), time.get(2), time.get(3), time.get(0),\r\n                            time.get(1), 0, 0f, elementInfos.get(7).text(), \"\", \"\"));\r\n                }\r\n            }\r\n        }\r\n        return courseArrayList;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/GDEIParser.java b/src/main/java/parser/GDEIParser.java
--- a/src/main/java/parser/GDEIParser.java	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/GDEIParser.java	(date 1745507183712)
@@ -17,7 +17,7 @@
 
     Document document;
     public GDEIParser(@NotNull String source) {
-        super(source);
+        super();
         document = Jsoup.parse(source);
     }
 
@@ -65,13 +65,13 @@
                 //eg:线性代数 1-12 周 (第1,2节) 22软件工程C (30 人) 花教610 (HDJX004900) 王森洪
                 courseArrayList.add(new Course(elementInfos.get(0).text(), i, RoomParser(elementInfos.get(3).text()),
                         elementInfos.get(4).text(), time.get(2), time.get(3), time.get(0),
-                        time.get(1), 0, 0f, elementInfos.get(2).text(), "", ""));
+                        time.get(1), 0, 0f, elementInfos.get(2).text(), "", "", ));
 
                 if (elementInfos.size()>5){
                     time = TimeParser(elementInfos.get(6).text());
                     courseArrayList.add(new Course(elementInfos.get(5).text(), i, RoomParser(elementInfos.get(8).text()),
                             elementInfos.get(9).text(), time.get(2), time.get(3), time.get(0),
-                            time.get(1), 0, 0f, elementInfos.get(7).text(), "", ""));
+                            time.get(1), 0, 0f, elementInfos.get(7).text(), "", "", ));
                 }
             }
         }
Index: src/main/java/parser/CQUPTParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\n\r\n/**\r\n * Created by [YenalyLiew](https://github.com/YenalyLiew)\r\n *\r\n * 重庆邮电大学本科生课表\r\n *\r\n * 不是所有类型课表全部适配，比如4节课连上的情况可能有BUG，可以在Github联系我。\r\n */\r\n\r\nclass CQUPTParser(source: String) : Parser(source) {\r\n\r\n    companion object {\r\n        // 我这里课程列表在程序里进行修正后长度就是8，\r\n        // 如果你的课表不是很幸运，可能导入就没用或者全乱了。\r\n        private const val COURSE_INFO_SIZE = 8\r\n\r\n        // 通常课程的节数是2。\r\n        private const val GENERAL_CLASS_LENGTH = 2\r\n\r\n        private val indexWithClassStart = mapOf(0 to 1, 1 to 3, 3 to 5, 4 to 7, 6 to 9, 7 to 11)\r\n        private val indexWithClassEnd = mapOf(0 to 2, 1 to 4, 3 to 6, 4 to 8, 6 to 10, 7 to 12)\r\n    }\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val doc = Jsoup.parse(source)\r\n        val classesLine = doc.getElementById(\"stuPanel\").select(\"tr[style=text-align:center]\")\r\n        val courseList = ArrayList<Course>()\r\n        // 最寄O(n^4)复杂度，哈哈了。\r\n        // 最外层循环，是先一行一行扫一遍，得到每行的数据。\r\n        // 第二层循环，一行内每个框扫一遍，因为index=0的元素正好没用，所以扫到的索引数值正好对应当前星期数值。\r\n        // 第三层循环，为了防止有的行内的框内有好几个课只能取到第一个，只能循环全取。\r\n        // 最内层循环，有的周是一个周，有的周是好多周，又有的周用逗号隔开，只能靠循环把他们分开。\r\n        classesLine.forEachIndexed { classIndex, classLine ->\r\n            classLine.select(\"td\").forEachIndexed { dayWeek, courses ->\r\n                val coursesInfo = courses.text().replace(\" -\", \"-\").split(\" \")\r\n                if (coursesInfo.size >= COURSE_INFO_SIZE) {\r\n                    val courseInfoNumber: Int = coursesInfo.size / COURSE_INFO_SIZE\r\n                    for (i in 0 until courseInfoNumber) {\r\n                        val name = coursesInfo[1 + i * COURSE_INFO_SIZE].run { substring(indexOf(\"-\") + 1) }\r\n                        val room = coursesInfo[2 + i * COURSE_INFO_SIZE].run { substring(indexOf(\"：\") + 1) }\r\n                        val teacher = coursesInfo[4 + i * COURSE_INFO_SIZE]\r\n                        val credit = coursesInfo[6 + i * COURSE_INFO_SIZE].run { substring(0, indexOf(\"学分\")).toFloat() }\r\n                        val startNode = indexWithClassStart[classIndex] ?: 1\r\n                        val endNode = indexWithClassEnd[classIndex] ?: 2\r\n                        coursesInfo[3 + i * COURSE_INFO_SIZE].split(\",\").forEach { weeks ->\r\n                            val startWeek: Int\r\n                            val endWeek: Int\r\n                            val type = if (weeks.contains(\"单周\")) 1 else if (weeks.contains(\"双周\")) 2 else 0\r\n                            val classInRow = if (weeks.contains(\"节连上\")) {\r\n                                weeks.run { substring(indexOf(\"周\") + 1, indexOf(\"节连上\")).toInt() }\r\n                            } else 0\r\n                            val realEndNode = if (classInRow != 0) {\r\n                                endNode + classInRow - GENERAL_CLASS_LENGTH\r\n                            } else endNode\r\n                            if (weeks.contains(\"-\")) {\r\n                                startWeek = weeks.run { substring(0, indexOf(\"-\")).toInt() }\r\n                                endWeek = weeks.run { substring(indexOf(\"-\") + 1, indexOf(\"周\")).toInt() }\r\n                            } else {\r\n                                startWeek = weeks.run { substring(0, indexOf(\"周\")).toInt() }\r\n                                endWeek = startWeek\r\n                            }\r\n                            val course = Course(\r\n                                name = name,\r\n                                room = room,\r\n                                teacher = teacher,\r\n                                credit = credit,\r\n                                day = dayWeek, // dayWeek 代表星期X\r\n                                startNode = startNode,\r\n                                endNode = realEndNode,\r\n                                type = type,\r\n                                startWeek = startWeek, // startWeek-endWeek 代表 x周-y周\r\n                                endWeek = endWeek\r\n                            )\r\n                            courseList.add(course)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/CQUPTParser.kt b/src/main/java/parser/CQUPTParser.kt
--- a/src/main/java/parser/CQUPTParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/CQUPTParser.kt	(date 1745507183568)
@@ -12,7 +12,7 @@
  * 不是所有类型课表全部适配，比如4节课连上的情况可能有BUG，可以在Github联系我。
  */
 
-class CQUPTParser(source: String) : Parser(source) {
+class CQUPTParser(source: String) : Parser() {
 
     companion object {
         // 我这里课程列表在程序里进行修正后长度就是8，
@@ -66,15 +66,15 @@
                             }
                             val course = Course(
                                 name = name,
+                                day = dayWeek,
                                 room = room,
                                 teacher = teacher,
-                                credit = credit,
-                                day = dayWeek, // dayWeek 代表星期X
-                                startNode = startNode,
+                                startNode = startNode, // dayWeek 代表星期X
                                 endNode = realEndNode,
-                                type = type,
-                                startWeek = startWeek, // startWeek-endWeek 代表 x周-y周
-                                endWeek = endWeek
+                                startWeek = startWeek,
+                                endWeek = endWeek,
+                                type = type, // startWeek-endWeek 代表 x周-y周
+                                credit = credit,
                             )
                             courseList.add(course)
                         }
Index: src/main/java/parser/SHUParser2024.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport parser.Parser\r\nimport bean.Course\r\nimport main.java.bean.TimeDetail\r\nimport main.java.bean.TimeTable\r\nimport org.jsoup.Jsoup\r\nimport org.jsoup.nodes.Document\r\nimport org.jsoup.nodes.Element\r\n\r\n/**\r\n * @author Jonathan523\r\n * @date 20241025\r\n * @email jonathon.zhang52306@gmail.com\r\n * 上海大学新选课系统导入\r\n */\r\n\r\n// 课程表网页链接 `https://jwxk.shu.edu.cn/xsxk/elective/grablessons?{学期代码}`\r\n// 登录链接：`https://jwxk.shu.edu.cn/`\r\n\r\nclass SHUParser2024(source: String) : Parser(source) {\r\n    private val nodeNum = 12\r\n    private val maxWeek = 12\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = mutableListOf<Course>()\r\n\r\n        val doc: Document = Jsoup.parse(source)\r\n\r\n        // 解析课程详细信息表格\r\n        val cards = doc.select(\"div.arranged-content div.el-card.arranged-course-card\")\r\n\r\n        // 用于将索引字母映射到课程名称\r\n        val indexCourseMap = mutableMapOf<String, String>()\r\n        for (card in cards) {\r\n            val items = card.select(\"div.card-item.cv-clearfix\")\r\n            val dataMap = mutableMapOf<String, String>()\r\n\r\n            for (item in items) {\r\n                val label = item.selectFirst(\"div.label.cv-pull-left\")?.text()?.trim()?.removeSuffix(\":\")\r\n                val value = item.selectFirst(\"div.value.cv-pull-left\")?.text()?.trim() ?: \"\"\r\n\r\n                if (label != null) {\r\n                    dataMap[label] = value\r\n                }\r\n            }\r\n            val index = dataMap[\"#\"] ?: \"\"\r\n            val courseName = dataMap[\"课程名\"] ?: \"\"\r\n            val credit = dataMap[\"学分\"]?.toFloatOrNull() ?: 0f\r\n            val teacher = dataMap[\"上课教师\"] ?: \"\"\r\n            val classTime = dataMap[\"上课时间\"] ?: \"\"\r\n            val classRoom = dataMap[\"上课地点\"] ?: \"\"\r\n\r\n            // 保存索引和课程名称的映射\r\n            indexCourseMap[index] = courseName\r\n\r\n            // 解析上课时间，生成课程条目\r\n            val scheduleEntries = parseClassTime(classTime)\r\n            for (entry in scheduleEntries) {\r\n                if (entry.weekType == 3) {\r\n                    for (week in entry.weeks) {\r\n                        val course = Course(\r\n                            name = courseName,\r\n                            room = classRoom,\r\n                            teacher = teacher,\r\n                            day = entry.day,\r\n                            startNode = entry.startNode,\r\n                            endNode = entry.endNode,\r\n                            startWeek = week,\r\n                            endWeek = week,\r\n                            type = 0,\r\n                            credit = credit,\r\n                            note = \"\"\r\n                        )\r\n                        courseList.add(course)\r\n                    }\r\n                } else {\r\n                    val course = Course(\r\n                        name = courseName,\r\n                        room = classRoom,\r\n                        teacher = teacher,\r\n                        day = entry.day,\r\n                        startNode = entry.startNode,\r\n                        endNode = entry.endNode,\r\n                        startWeek = entry.weeks.first(),\r\n                        endWeek = entry.weeks.last(),\r\n                        type = entry.weekType,\r\n                        credit = credit,\r\n                        note = \"\"\r\n                    )\r\n                    courseList.add(course)\r\n                }\r\n\r\n            }\r\n        }\r\n        if (courseList.isEmpty()) { // 课程表格为空，尝试解析另一种电脑版UI格式\r\n            println(\"课程表格为空，尝试解析另一种电脑版UI格式\")\r\n            val rows = doc.select(\"div.arranged-content table.el-table__body tbody tr.el-table__row\")\r\n            for (row in rows) {\r\n                val cells = row.select(\"td\")\r\n                if (cells.size >= 11) {\r\n                    val courseName = cells[1].text().trim()\r\n                    val credit = cells[3].text().trim().toFloatOrNull() ?: 0f\r\n                    val teacher = cells[5].text().trim()\r\n                    val classTime = cells[6].text().trim()\r\n                    val classRoom = cells[7].text().trim()\r\n                    val scheduleEntries = parseClassTime(classTime)\r\n                    for (entry in scheduleEntries) {\r\n                        if (entry.weekType == 3) {\r\n                            for (week in entry.weeks) {\r\n                                val course = Course(\r\n                                    name = courseName,\r\n                                    room = classRoom,\r\n                                    teacher = teacher,\r\n                                    day = entry.day,\r\n                                    startNode = entry.startNode,\r\n                                    endNode = entry.endNode,\r\n                                    startWeek = week,\r\n                                    endWeek = week,\r\n                                    type = 0,\r\n                                    credit = credit,\r\n                                    note = \"\"\r\n                                )\r\n                                courseList.add(course)\r\n                            }\r\n                        } else {\r\n                            val course = Course(\r\n                                name = courseName,\r\n                                room = classRoom,\r\n                                teacher = teacher,\r\n                                day = entry.day,\r\n                                startNode = entry.startNode,\r\n                                endNode = entry.endNode,\r\n                                startWeek = entry.weeks.first(),\r\n                                endWeek = entry.weeks.last(),\r\n                                type = entry.weekType,\r\n                                credit = credit,\r\n                                note = \"\"\r\n                            )\r\n                            courseList.add(course)\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n\r\n    override fun generateTimeTable(): TimeTable = timeTable\r\n    override fun getNodes(): Int = nodeNum\r\n    override fun getMaxWeek(): Int = maxWeek\r\n    override fun getTableName(): String? = parseTermName(source)\r\n\r\n\r\n    private fun parseTermName(source: String): String? {\r\n        val doc: Document = Jsoup.parse(source)\r\n        val termElement: Element? = doc.selectFirst(\"a.gologin-btn span.el-link--inner\")\r\n        val currentTerm = termElement?.ownText()?.trim()\r\n        var formattedTerm: String? = null\r\n        if (currentTerm != null) {\r\n            // 使用正则表达式提取年份和季节信息\r\n            val regex = Regex(\"(\\\\d{4})-(\\\\d{4})学年(\\\\S+)季学期\")\r\n            val matchResult = regex.find(currentTerm)\r\n\r\n            if (matchResult != null) {\r\n                val startYear = matchResult.groupValues[1].takeLast(2) // 提取开始年份的最后两位\r\n                val endYear = matchResult.groupValues[2].takeLast(2) // 提取结束年份的最后两位\r\n                val season = matchResult.groupValues[3] // 提取季节\r\n\r\n                formattedTerm = \"$startYear-$endYear$season\"\r\n            }\r\n\r\n        }\r\n        return formattedTerm\r\n    }\r\n\r\n    private fun parseClassTime(classTime: String): List<ScheduleEntry> {\r\n        val entries = mutableListOf<ScheduleEntry>()\r\n\r\n        val timeParts = classTime.split(\" \")\r\n\r\n        for (part in timeParts) {\r\n            if (part.isBlank()) continue\r\n\r\n            val weekPattern = \"\\\\(([^)]*)\\\\)\".toRegex()\r\n            val weekMatch = weekPattern.find(part)\r\n            val weekString = weekMatch?.groupValues?.get(1) ?: \"\"\r\n\r\n            var weeks: List<Int>\r\n            var weekType = 0 // 0: 全部周，1: 单周，2: 双周\r\n\r\n            if (weekString.isNotBlank()) {\r\n                weeks = parseWeeks(weekString)\r\n            } else {\r\n                weeks = (1..10).toList()\r\n            }\r\n\r\n            var timePart = part.replace(weekPattern, \"\")\r\n\r\n            if (timePart.endsWith(\"单\")) {\r\n                weekType = 1\r\n                timePart = timePart.substring(0, timePart.length - 1)\r\n            } else if (timePart.endsWith(\"双\")) {\r\n                weekType = 2\r\n                timePart = timePart.substring(0, timePart.length - 1)\r\n            } else if (weeks.size != weeks.last() - weeks.first() + 1) {\r\n                weekType = 3\r\n            }\r\n\r\n\r\n            val dayMap = mapOf(\r\n                \"一\" to 1,\r\n                \"二\" to 2,\r\n                \"三\" to 3,\r\n                \"四\" to 4,\r\n                \"五\" to 5,\r\n                \"六\" to 6,\r\n                \"日\" to 7,\r\n            )\r\n\r\n            val dayPattern = \"([一二三四五六日])(\\\\d+)-(\\\\d+)\".toRegex()\r\n            val dayMatch = dayPattern.find(timePart)\r\n            if (dayMatch != null) {\r\n                val day = dayMap[dayMatch.groupValues[1]] ?: 0\r\n                val startNode = dayMatch.groupValues[2].toInt()\r\n                val endNode = dayMatch.groupValues[3].toInt()\r\n\r\n                // 根据weekType过滤周数\r\n                weeks = when (weekType) {\r\n                    1 -> weeks.filter { it % 2 == 1 }\r\n                    2 -> weeks.filter { it % 2 == 0 }\r\n                    else -> weeks\r\n                }\r\n\r\n                entries.add(\r\n                    ScheduleEntry(\r\n                        day = day, startNode = startNode, endNode = endNode, weeks = weeks, weekType = weekType\r\n                    )\r\n                )\r\n            }\r\n        }\r\n\r\n        return entries\r\n    }\r\n\r\n    private fun parseWeeks(weekString: String): List<Int> {\r\n        val weeks = mutableListOf<Int>()\r\n\r\n        val weekParts = weekString.split(\",\")\r\n\r\n        for (part in weekParts) {\r\n            val rangePattern = \"(\\\\d+)-(\\\\d+)周\".toRegex()\r\n            val singlePattern = \"(\\\\d+)周\".toRegex()\r\n            val numberPattern = \"(\\\\d+)\".toRegex()\r\n\r\n            val rangeMatch = rangePattern.find(part)\r\n            val singleMatch = singlePattern.find(part)\r\n            val numberMatch = numberPattern.find(part)\r\n\r\n            if (rangeMatch != null) {\r\n                val startWeek = rangeMatch.groupValues[1].toInt()\r\n                val endWeek = rangeMatch.groupValues[2].toInt()\r\n                weeks.addAll((startWeek..endWeek).toList())\r\n            } else if (singleMatch != null) {\r\n                val week = singleMatch.groupValues[1].toInt()\r\n                weeks.add(week)\r\n            } else if (numberMatch != null) {\r\n                val week = numberMatch.groupValues[1].toInt()\r\n                weeks.add(week)\r\n            }\r\n        }\r\n\r\n        if (weeks.isEmpty()) {\r\n            weeks.addAll(1..10)\r\n        }\r\n\r\n        return weeks\r\n    }\r\n\r\n    private val timeTable: TimeTable = TimeTable(\r\n        \"上海大学\", listOf(\r\n            TimeDetail(1, \"08:00\", \"08:45\"),\r\n            TimeDetail(2, \"08:55\", \"09:40\"),\r\n            TimeDetail(3, \"10:00\", \"10:45\"),\r\n            TimeDetail(4, \"10:55\", \"11:40\"),\r\n            TimeDetail(5, \"13:00\", \"13:45\"),\r\n            TimeDetail(6, \"13:55\", \"14:40\"),\r\n            TimeDetail(7, \"15:00\", \"15:45\"),\r\n            TimeDetail(8, \"15:55\", \"16:40\"),\r\n            TimeDetail(9, \"18:00\", \"18:45\"),\r\n            TimeDetail(10, \"18:55\", \"19:40\"),\r\n            TimeDetail(11, \"20:00\", \"20:45\"),\r\n            TimeDetail(12, \"20:55\", \"21:40\"),\r\n        )\r\n    )\r\n\r\n    data class ScheduleEntry(\r\n        val day: Int,\r\n        val startNode: Int,\r\n        val endNode: Int,\r\n        var weeks: List<Int>,\r\n        val weekType: Int // 0: 全部周，1: 单周，2: 双周\r\n    )\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/SHUParser2024.kt b/src/main/java/parser/SHUParser2024.kt
--- a/src/main/java/parser/SHUParser2024.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/SHUParser2024.kt	(date 1745507183787)
@@ -18,7 +18,7 @@
 // 课程表网页链接 `https://jwxk.shu.edu.cn/xsxk/elective/grablessons?{学期代码}`
 // 登录链接：`https://jwxk.shu.edu.cn/`
 
-class SHUParser2024(source: String) : Parser(source) {
+class SHUParser2024(source: String) : Parser() {
     private val nodeNum = 12
     private val maxWeek = 12
 
@@ -61,32 +61,30 @@
                     for (week in entry.weeks) {
                         val course = Course(
                             name = courseName,
+                            day = entry.day,
                             room = classRoom,
                             teacher = teacher,
-                            day = entry.day,
                             startNode = entry.startNode,
                             endNode = entry.endNode,
                             startWeek = week,
                             endWeek = week,
                             type = 0,
                             credit = credit,
-                            note = ""
                         )
                         courseList.add(course)
                     }
                 } else {
                     val course = Course(
                         name = courseName,
+                        day = entry.day,
                         room = classRoom,
                         teacher = teacher,
-                        day = entry.day,
                         startNode = entry.startNode,
                         endNode = entry.endNode,
                         startWeek = entry.weeks.first(),
                         endWeek = entry.weeks.last(),
                         type = entry.weekType,
                         credit = credit,
-                        note = ""
                     )
                     courseList.add(course)
                 }
@@ -110,32 +108,30 @@
                             for (week in entry.weeks) {
                                 val course = Course(
                                     name = courseName,
+                                    day = entry.day,
                                     room = classRoom,
                                     teacher = teacher,
-                                    day = entry.day,
                                     startNode = entry.startNode,
                                     endNode = entry.endNode,
                                     startWeek = week,
                                     endWeek = week,
                                     type = 0,
                                     credit = credit,
-                                    note = ""
                                 )
                                 courseList.add(course)
                             }
                         } else {
                             val course = Course(
                                 name = courseName,
+                                day = entry.day,
                                 room = classRoom,
                                 teacher = teacher,
-                                day = entry.day,
                                 startNode = entry.startNode,
                                 endNode = entry.endNode,
                                 startWeek = entry.weeks.first(),
                                 endWeek = entry.weeks.last(),
                                 type = entry.weekType,
                                 credit = credit,
-                                note = ""
                             )
                             courseList.add(course)
                         }
Index: src/main/java/parser/ECUPLParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport bean.WeekBean\r\nimport main.java.bean.TimeDetail\r\nimport main.java.bean.TimeTable\r\nimport main.java.parser.supwisdom.SupwisdomParser\r\nimport org.jsoup.Jsoup\r\nimport org.jsoup.nodes.Element\r\nimport parser.Parser\r\nimport java.text.SimpleDateFormat\r\nimport java.util.Locale\r\n\r\n/** A modified version of [SupwisdomParser]. */\r\nclass ECUPLParser(source: String) : Parser(source) {\r\n\r\n    private val doc = Jsoup.parse(source)\r\n\r\n    private val script = doc.selectFirst(\"script[language=JavaScript]\")?.data() ?: throw Exception(\"未找到数据\")\r\n    private val dateFormat = SimpleDateFormat(\"yyyy-MM-dd\", Locale.ENGLISH)\r\n    private val semesterStart: Long\r\n    private val timeTable: List<TimePeriod>\r\n\r\n    class TimePeriod(val start: Int, val end: Int)\r\n\r\n    private fun Int.formatTime() = \"%02d:%02d\".format(this / 100, this % 100)\r\n\r\n    init {\r\n        val regex = Regex(\"\"\"new CourseTable\\('([-\\d]+?)',\\[([\\d\\[\\],]+)\\]\\)\"\"\")\r\n        val match = regex.find(script) ?: throw Exception(\"未找到起始日和时间表信息\")\r\n        semesterStart = dateFormat.parse(match.groupValues[1]).time\r\n        timeTable = Regex(\"\"\"\\[(\\d+),(\\d+)\\]\"\"\").findAll(match.groupValues[2]).asIterable().map {\r\n            TimePeriod(it.groupValues[1].toInt(), it.groupValues[2].toInt())\r\n        }\r\n    }\r\n\r\n    data class CourseDetails(\r\n        val name: String,\r\n        val teacher: String,\r\n        val credit: Float,\r\n        val note: String\r\n    )\r\n\r\n    private fun parseCourseDetailsTable(table: Element): Map<String, CourseDetails> {\r\n        var courseNumberIndex = 2\r\n        var courseTeacherIndex = 3\r\n        var courseNameIndex = 4\r\n        var courseCreditIndex = 7\r\n        var courseNoteIndex = 12\r\n\r\n        val courseDetailsMap = HashMap<String, CourseDetails>()\r\n\r\n        for ((i, tr) in table.select(\"tr\").withIndex()) {\r\n            if (i == 0) {\r\n                for ((j, td) in tr.select(\"td\").withIndex()) {\r\n                    when (td.text()) {\r\n                        \"课程序号\" -> courseNumberIndex = j\r\n                        \"教师\" -> courseTeacherIndex = j\r\n                        \"课程名称\" -> courseNameIndex = j\r\n                        \"学分\" -> courseCreditIndex = j\r\n                        \"备注\" -> courseNoteIndex = j\r\n                    }\r\n                }\r\n            } else {\r\n                val tds = tr.select(\"td\")\r\n                courseDetailsMap[tds[courseNumberIndex].text()] = CourseDetails(\r\n                    name = tds[courseNameIndex].text(),\r\n                    teacher = tds[courseTeacherIndex].text(),\r\n                    credit = tds[courseCreditIndex].text().toFloat(),\r\n                    note = tds[courseNoteIndex].text()\r\n                )\r\n            }\r\n        }\r\n\r\n        return courseDetailsMap\r\n    }\r\n\r\n    override fun generateTimeTable(): TimeTable {\r\n        val timeList = timeTable\r\n            .mapIndexed { i, period ->\r\n                TimeDetail(\r\n                    node = i + 1,\r\n                    startTime = period.start.formatTime(),\r\n                    endTime = period.end.formatTime()\r\n                )\r\n            }\r\n        return TimeTable(name = \"华东政法大学\", timeList = timeList)\r\n    }\r\n\r\n    private fun parseWeekBeans(yearStartDate: String, rawWeekBits: Long): List<WeekBean> {\r\n        val yearStart = dateFormat.parse(yearStartDate).time\r\n        val offsetMillis = yearStart - semesterStart\r\n        val millisInWeek = 1000L * 86400 * 7\r\n\r\n        val weekOffset = offsetMillis.floorDiv(millisInWeek).toInt()\r\n\r\n        val weeks = ArrayList<Int>(16)\r\n        val trailingZeros = rawWeekBits.countTrailingZeroBits()\r\n\r\n        var weekBits = rawWeekBits ushr trailingZeros\r\n        var i = weekOffset + trailingZeros\r\n        while (weekBits != 0L) {\r\n            if (weekBits and 1L != 0L) {\r\n                weeks.add(i)\r\n            }\r\n            weekBits = weekBits ushr 1\r\n            i++\r\n        }\r\n        return Common.weekIntList2WeekBeanList(weeks)\r\n    }\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val regex = Regex(\r\n            \"\"\"newActivity\\(\".*?\",\"(.*?)\",\".+?\",\"(.+?)\",\".*?\",\"(.*?)\",\"([-\\d]+)\",(\\d+)\\);[\\n\\s\\S]+?addActivityByTime\\(activity,(\\d),(\\d+),(\\d+)\\);\"\"\"\r\n        )\r\n        val courseDetailsMap = parseCourseDetailsTable(doc.select(\".listTable\")[1])\r\n\r\n        return regex.findAll(script).asIterable().flatMap { match ->\r\n            val groupValues = match.groupValues\r\n\r\n            val nameWithNumber = groupValues[2]\r\n            val splitIndex = nameWithNumber.lastIndexOf('(')\r\n            val number = nameWithNumber.substring(splitIndex + 1, nameWithNumber.length - 1)\r\n\r\n            var name = nameWithNumber.substring(0, splitIndex)\r\n            var teacher = groupValues[1]\r\n            var location = groupValues[3]\r\n            var credit = 0f\r\n            var note = \"\"\r\n\r\n            val details = courseDetailsMap[number]\r\n            if (details != null) {\r\n                name = details.name\r\n                credit = details.credit\r\n\r\n                if (teacher.isEmpty()) {\r\n                    teacher = details.teacher\r\n                } else if (teacher != details.teacher) {\r\n                    teacher = \"$teacher (${details.teacher})\"\r\n                }\r\n\r\n                if (\"地点\" in details.note) {\r\n                    location = \"$location (${details.note})\"\r\n                } else {\r\n                    note = details.note\r\n                }\r\n            }\r\n\r\n            val startTime = groupValues[7].toInt()\r\n            val startPeriod = timeTable.indexOfFirst { it.start == startTime } + 1\r\n            val endTime = groupValues[8].toInt()\r\n            val endPeriod = timeTable.indexOfFirst { it.end == endTime } + 1\r\n\r\n            parseWeekBeans(groupValues[4], groupValues[5].toLong()).map { weekBean ->\r\n                Course(\r\n                    name = name,\r\n                    day = groupValues[6].toInt(),\r\n                    room = location,\r\n                    teacher = teacher,\r\n                    startNode = startPeriod,\r\n                    endNode = endPeriod,\r\n                    startWeek = weekBean.start,\r\n                    endWeek = weekBean.end,\r\n                    type = weekBean.type,\r\n                    credit = credit,\r\n                    note = note,\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/ECUPLParser.kt b/src/main/java/parser/ECUPLParser.kt
--- a/src/main/java/parser/ECUPLParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/ECUPLParser.kt	(date 1745507183691)
@@ -12,7 +12,7 @@
 import java.util.Locale
 
 /** A modified version of [SupwisdomParser]. */
-class ECUPLParser(source: String) : Parser(source) {
+class ECUPLParser(source: String) : Parser() {
 
     private val doc = Jsoup.parse(source)
 
@@ -163,7 +163,7 @@
                     endWeek = weekBean.end,
                     type = weekBean.type,
                     credit = credit,
-                    note = note,
+                    note = note,,
                 )
             }
         }
Index: src/main/java/parser/NewUrpParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport Common\r\nimport bean.Course\r\nimport bean.NewUrpCourseInfo\r\nimport com.google.gson.Gson\r\nimport com.google.gson.JsonParser\r\n\r\nclass NewUrpParser(source: String) : Parser(source) {\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val result = arrayListOf<Course>()\r\n        val gson = Gson()\r\n        val json = JsonParser.parseString(source)\r\n            .asJsonObject\r\n            .getAsJsonArray(\"dateList\")[0].asJsonObject\r\n            .getAsJsonArray(\"selectCourseList\").toString()\r\n        val list = gson.fromJson(json, Array<NewUrpCourseInfo>::class.java)\r\n        val weekIntList = arrayListOf<Int>()\r\n        list.forEach { info ->\r\n            info.timeAndPlaceList?.forEach { detail ->\r\n                weekIntList.clear()\r\n                detail.classWeek.forEachIndexed { index, c ->\r\n                    if (c == '1') {\r\n                        weekIntList.add(index + 1)\r\n                    }\r\n                }\r\n                Common.weekIntList2WeekBeanList(weekIntList).forEach { week ->\r\n                    result.add(\r\n                        Course(\r\n                            name = info.courseName, day = detail.classDay,\r\n                            room = (detail.campusName ?: \"\") + (detail.teachingBuildingName\r\n                                ?: \"\") + detail.classroomName,\r\n                            teacher = info.attendClassTeacher,\r\n                            startNode = detail.classSessions,\r\n                            endNode = detail.classSessions + detail.continuingSession - 1,\r\n                            startWeek = week.start, endWeek = week.end,\r\n                            type = week.type\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/NewUrpParser.kt b/src/main/java/parser/NewUrpParser.kt
--- a/src/main/java/parser/NewUrpParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/NewUrpParser.kt	(date 1745507183559)
@@ -6,7 +6,7 @@
 import com.google.gson.Gson
 import com.google.gson.JsonParser
 
-class NewUrpParser(source: String) : Parser(source) {
+class NewUrpParser(source: String) : Parser() {
 
     override fun generateCourseList(): List<Course> {
         val result = arrayListOf<Course>()
@@ -35,7 +35,7 @@
                             startNode = detail.classSessions,
                             endNode = detail.classSessions + detail.continuingSession - 1,
                             startWeek = week.start, endWeek = week.end,
-                            type = week.type
+                            type = week.type,
                         )
                     )
                 }
Index: src/main/java/parser/CCIBEParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport Common.getNodeInt\r\nimport bean.Course\r\nimport com.google.gson.Gson\r\nimport main.java.bean.CourseForCCIBE\r\nimport parser.Parser\r\n\r\n/**\r\n * @author eucaly\r\n * @date 2022-06-07 17:21\r\n * 重庆对外经贸学院\r\n */\r\n\r\nclass CCIBEParser(source: String) : Parser(source) {\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = ArrayList<Course>()\r\n        val gson = Gson()\r\n        gson.fromJson(source, Array<CourseForCCIBE>::class.java).forEach {\r\n            val startNode: String\r\n            val endNode: String\r\n            if (it.jc.contains('-')) {\r\n                startNode = it.jc.substringBefore('-')\r\n                endNode = it.jc.substringAfter('-')\r\n            } else {\r\n                startNode = it.jc\r\n                endNode = startNode\r\n            }\r\n            courseList.add(\r\n                Course(\r\n                    it.kcmc,\r\n                    getNodeInt(it.xqj),\r\n                    it.jxdd?: \"\",\r\n                    it.jsxm?: \"\",\r\n                    Integer.parseInt(startNode),\r\n                    Integer.parseInt(endNode),\r\n                    it.qsz,\r\n                    it.jsz,\r\n                    1,\r\n                    0f,\r\n                    \"\",\r\n                    \"\",\r\n                    \"\"\r\n                )\r\n            )\r\n        }\r\n        return courseList\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/CCIBEParser.kt b/src/main/java/parser/CCIBEParser.kt
--- a/src/main/java/parser/CCIBEParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/CCIBEParser.kt	(date 1745507183591)
@@ -12,7 +12,7 @@
  * 重庆对外经贸学院
  */
 
-class CCIBEParser(source: String) : Parser(source) {
+class CCIBEParser(source: String) : Parser() {
 
     override fun generateCourseList(): List<Course> {
         val courseList = ArrayList<Course>()
@@ -38,10 +38,6 @@
                     it.qsz,
                     it.jsz,
                     1,
-                    0f,
-                    "",
-                    "",
-                    ""
                 )
             )
         }
Index: src/main/java/parser/NYISTParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport Common\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\nimport java.io.File\r\n\r\nclass NYISTParser(source: String) : Parser(source) {\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val doc = Jsoup.parse(source)\r\n        val courseItems = doc.getElementsByClass(\"course-content\")\r\n        courseItems.forEach{\r\n            val courseRecords = it.getElementsByClass(\"course-item-list\")\r\n            val courseName = it.getElementsByClass(\"name\").text()\r\n            courseRecords.forEach {\r\n                val teacher = it.select(\"div.teacher > p.content\").text()\r\n                var room = \"网络课/实验课\"\r\n                if(it.select(\"div.address > p.content\").text()!=\"\"){\r\n                    room = it.select(\"div.address > p.content\").text()\r\n                }\r\n                var timeBuff =\"第[19]周 周日 5-6节 14:30~16:00\".split(\" \")\r\n                if(it.select(\"div.time > p.content\").text()!=\"\"){\r\n                    timeBuff = it.select(\"div.time > p.content\").text().split(\" \")\r\n                }\r\n                val day= Common.getWeekFromChinese(timeBuff[timeBuff.size-3])\r\n                val nodes = timeBuff[timeBuff.size-2].substringBefore('节').split('-')\r\n                val startNode = nodes.first().toInt()\r\n                val endNode = nodes.last().toInt()\r\n                var weekText = \"\"\r\n                val weekList  = mutableListOf<String>()\r\n                for(i in 0..timeBuff.size-4){\r\n                    weekText += timeBuff[i]\r\n                    weekList.add(timeBuff[i])\r\n                }\r\n                var type = 0\r\n                if (weekText.contains('单')) {\r\n                    type = 1\r\n                } else if (weekText.contains('双')) {\r\n                    type = 2\r\n                }\r\n                weekList.forEach{\r\n                    val newit=it.substringAfter(\"第\").substringBefore(\"周\")\r\n                    val weeks=newit.substringAfter(\"[\").substringBefore(\"]\").split(\"-\")\r\n                    val startWeek = weeks.first().toInt()\r\n                    val endWeek = weeks.last().toInt()\r\n                    courseList.add(Course(name = courseName, day = day, room = room, teacher = teacher,\r\n                        startNode = startNode, endNode = endNode, startWeek = startWeek, endWeek = endWeek,\r\n                        type = type))\r\n                }\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n}\r\nfun main() {\r\n    val file = File(\"D:/project/NYISTOSUG/CourseWeb/DP/我的课表.html\")\r\n    val parser = NYISTParser(file.readText())\r\n    parser.saveCourse()\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/NYISTParser.kt b/src/main/java/parser/NYISTParser.kt
--- a/src/main/java/parser/NYISTParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/NYISTParser.kt	(date 1745507183725)
@@ -6,7 +6,7 @@
 import parser.Parser
 import java.io.File
 
-class NYISTParser(source: String) : Parser(source) {
+class NYISTParser(source: String) : Parser() {
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
         val doc = Jsoup.parse(source)
@@ -45,9 +45,11 @@
                     val weeks=newit.substringAfter("[").substringBefore("]").split("-")
                     val startWeek = weeks.first().toInt()
                     val endWeek = weeks.last().toInt()
-                    courseList.add(Course(name = courseName, day = day, room = room, teacher = teacher,
+                    courseList.add(Course(
+                        name = courseName, day = day, room = room, teacher = teacher,
                         startNode = startNode, endNode = endNode, startWeek = startWeek, endWeek = endWeek,
-                        type = type))
+                        type = type,
+                    ))
                 }
             }
         }
Index: src/main/java/parser/HNZJParser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser;\r\n\r\nimport bean.Course;\r\nimport org.jetbrains.annotations.NotNull;\r\nimport org.jsoup.Jsoup;\r\nimport org.jsoup.nodes.Document;\r\nimport org.jsoup.nodes.Element;\r\nimport org.jsoup.nodes.TextNode;\r\nimport org.jsoup.select.Elements;\r\nimport parser.Parser;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n *\r\n * 适配河南职业技术学院教务系统KINGOSOFT\r\n * 在 主页-->网上选课-->选课结果 导入\r\n *\r\n * @author chanvstone\r\n * @version 1.0\r\n * @date 2021-05-30\r\n */\r\n\r\npublic class HNZJParser extends Parser {\r\n    public HNZJParser(@NotNull String source) {\r\n        super(source);\r\n    }\r\n\r\n    @NotNull\r\n    @Override\r\n    public List<Course> generateCourseList() {\r\n        ArrayList<Course> courses = new ArrayList<>();\r\n        Document document = Jsoup.parse(getSource());\r\n        Elements trs = document.selectFirst(\"table#reportArea\").selectFirst(\"tbody\").select(\"tr\");//全部行\r\n        for (Element tr : trs) {\r\n            List<Course> courseList = createCourse(tr);\r\n            courses.addAll(courseList);\r\n        }\r\n\r\n        System.out.println(courses.size());\r\n\r\n        return courses;\r\n    }\r\n\r\n    /**\r\n     * @param tr 表格的每一行\r\n     * @return 根据这一行创建的课程列表\r\n     */\r\n    private List<Course> createCourse(Element tr) {\r\n        ArrayList<Course> courses = new ArrayList<>();\r\n        Elements tds = tr.select(\"td\");\r\n        /*\r\n        列    内容\r\n        1     课程名\r\n        2     学分\r\n        4     讲师名\r\n        12    上课时间和地点\r\n         */\r\n        String name = tds.get(1).text().replaceAll(\"\\\\[[\\\\w\\\\s]*\\\\]\", \"\");\r\n        float credit = Float.parseFloat(tds.get(2).text());\r\n        String teacher = tds.get(4).text();\r\n        String room;\r\n        int startWeek;\r\n        int endWeek;\r\n        int type = 0;\r\n        int day;\r\n        int startNode;\r\n        int endNode;\r\n\r\n        for (TextNode textNode : tds.get(12).selectFirst(\"font\").textNodes()) {\r\n\r\n            //分离上课时间和教室\r\n            String date;//上课时间\r\n            String[] date_room = textNode.text().split(\"\\u2002\");\r\n            if (date_room.length == 2) {\r\n                date = date_room[0];\r\n                room = date_room[1];\r\n            } else {\r\n                //没有指定教室\r\n                room = \"\";\r\n                date = textNode.text().substring(0, textNode.text().length() - 1);\r\n            }\r\n\r\n\r\n            //分离周数、星期数、课序数\r\n            int index_weekday = date.indexOf(\"周\");\r\n            String weeks = date.substring(0, index_weekday);//周数\r\n            String weekday = date.substring(index_weekday + 1, index_weekday + 2);//星期\r\n            String nodes = date.substring(index_weekday + 2);//课序\r\n\r\n            //设置day\r\n            switch (weekday) {\r\n                case \"一\":\r\n                    day = 1;\r\n                    break;\r\n                case \"二\":\r\n                    day = 2;\r\n                    break;\r\n                case \"三\":\r\n                    day = 3;\r\n                    break;\r\n                case \"四\":\r\n                    day = 4;\r\n                    break;\r\n                case \"五\":\r\n                    day = 5;\r\n                    break;\r\n                case \"六\":\r\n                    day = 6;\r\n                    break;\r\n                case \"日\":\r\n                    day = 7;\r\n                    break;\r\n                default:\r\n                    day = 1;\r\n            }\r\n\r\n            //设置startNode, endNode\r\n            String[] startNode_endNode = nodes.split(\"-\");\r\n            startNode = Integer.parseInt(startNode_endNode[0]);\r\n            endNode = Integer.parseInt(startNode_endNode[1]);\r\n\r\n            //weeks\r\n            weeks = weeks.substring(1, weeks.length() - 1);\r\n            if (weeks.contains(\",\")) {\r\n                for (String weekRange : weeks.split(\",\")) {\r\n                    if (weekRange.contains(\"-\")) {\r\n                        String[] startWeek_endWeek = weekRange.split(\"-\");\r\n                        startWeek = Integer.parseInt(startWeek_endWeek[0]);\r\n                        endWeek = Integer.parseInt(startWeek_endWeek[1]);\r\n                    } else {\r\n                        startWeek = endWeek = Integer.parseInt(weekRange);\r\n                    }\r\n                    courses.add(new Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type, credit, \"\", \"\", \"\"));\r\n                }\r\n\r\n            } else {\r\n                if (weeks.contains(\"-\")) {\r\n                    String[] startWeek_endWeek = weeks.split(\"-\");\r\n                    startWeek = Integer.parseInt(startWeek_endWeek[0]);\r\n                    endWeek = Integer.parseInt(startWeek_endWeek[1]);\r\n                } else {\r\n                    startWeek = endWeek = Integer.parseInt(weeks);\r\n                }\r\n                courses.add(new Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type, credit, \"\", \"\", \"\"));\r\n            }\r\n\r\n        }\r\n\r\n        return courses;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/HNZJParser.java b/src/main/java/parser/HNZJParser.java
--- a/src/main/java/parser/HNZJParser.java	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/HNZJParser.java	(date 1745507183805)
@@ -24,7 +24,7 @@
 
 public class HNZJParser extends Parser {
     public HNZJParser(@NotNull String source) {
-        super(source);
+        super();
     }
 
     @NotNull
@@ -132,7 +132,7 @@
                     } else {
                         startWeek = endWeek = Integer.parseInt(weekRange);
                     }
-                    courses.add(new Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type, credit, "", "", ""));
+                    courses.add(new Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type, credit, "", "", "", ));
                 }
 
             } else {
@@ -143,7 +143,7 @@
                 } else {
                     startWeek = endWeek = Integer.parseInt(weeks);
                 }
-                courses.add(new Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type, credit, "", "", ""));
+                courses.add(new Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type, credit, "", "", "", ));
             }
 
         }
Index: src/main/java/parser/SHTechParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport main.java.bean.TimeDetail\r\nimport main.java.bean.TimeTable\r\nimport org.jsoup.Jsoup\r\nimport org.jsoup.nodes.Element\r\nimport parser.Parser\r\n\r\n\r\nclass SHTechParser(source: String) : Parser(source) {\r\n    /**@author mhk\r\n     * @date 20220821\r\n     * @update 20230204\r\n     * 上海科技大学研究生教务导入\r\n     * https://grad.shanghaitech.edu.cn/public/WitMis_LookCourseTable.aspx\r\n     */\r\n    /*\r\n欢迎使用上海科技大学研究生课表导入工具,本科生小朋友请出门左转用树维系统导入工具导入.\r\n登录后,请打开 我的培养-查看课表 再导入.如果右上角用户角色为 答辩秘书,还需要先切换为 研究生.\r\n1.对于研究生选修本科生课的情况,教务系统中显示的课表中可能没有课程的标题信息.\r\n2.对于SIST/SLST/SPST以外的其他学院开设的课程,教务系统中显示的课表中可能没有课程的标题信息.\r\n对于这些情况,课程标题暂且展示为班级+教师信息.\r\n这些问题均出自教务系统的bug,对于未有明确修正说明的情况本工具均“依样”输出.\r\n<>建议自行在我的培养-排课结果查询 利用教室信息查询并手动修正.<>\r\n如果你遇到其他问题,可以带上截图及课表页面HTML发邮件到 y@wanghy.gq .\r\n     */\r\n    override fun getNodes(): Int = 13\r\n\r\n    override fun getTableName(): String = \"上科大导入\"\r\n\r\n    override fun generateTimeTable(): TimeTable {\r\n        val timeList: ArrayList<TimeDetail> = arrayListOf(\r\n            TimeDetail(1, \"08:15\", \"09:00\"),\r\n            TimeDetail(2, \"09:10\", \"09:55\"),\r\n            TimeDetail(3, \"10:15\", \"11:00\"),\r\n            TimeDetail(4, \"11:10\", \"11:55\"),\r\n            TimeDetail(5, \"13:00\", \"13:45\"),\r\n            TimeDetail(6, \"13:55\", \"14:40\"),\r\n            TimeDetail(7, \"15:00\", \"15:45\"),\r\n            TimeDetail(8, \"15:55\", \"16:40\"),\r\n            TimeDetail(9, \"16:50\", \"17:35\"),\r\n            TimeDetail(10, \"18:00\", \"18:45\"),\r\n            TimeDetail(11, \"18:55\", \"19:40\"),\r\n            TimeDetail(12, \"19:50\", \"20:35\"),\r\n            TimeDetail(13, \"20:45\", \"21:30\")\r\n        )\r\n        return TimeTable(\"上科大作息\", timeList)\r\n    }\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        source.split(\"<head>\", \"</head>\").forEach forHTML@{ html ->\r\n            val courseWebs = getCourseWeb(html)\r\n            val to_return = courseWebs.flatMap { transform(it) }\r\n            if (to_return.isNotEmpty()) {\r\n                return to_return.toCollection(ArrayList())\r\n            }\r\n        }\r\n        return arrayListOf()\r\n    }\r\n\r\n\r\n    fun transform(courseWeb: CourseWeb): ArrayList<Course> {\r\n        val to_return: ArrayList<Course> = ArrayList()\r\n\r\n\r\n        val name = courseWeb.getName(isEndUser)\r\n        val note = \"\"\r\n        if (courseWeb.schedule.except.size == 0) {\r\n            to_return.add(\r\n                Course(\r\n                    name,\r\n                    courseWeb.schedule.weekday,\r\n                    courseWeb.schedule.classRoom,\r\n                    courseWeb.schedule.teacher,\r\n                    courseWeb.schedule.LessonStart,\r\n                    courseWeb.schedule.LessonEnd,\r\n                    courseWeb.schedule.weekStart,\r\n                    courseWeb.schedule.weekEnd,\r\n                    0,\r\n                    note = note\r\n                )\r\n            )\r\n        } else {\r\n            val weekList: ArrayList<Int> = ArrayList()\r\n            for (i in courseWeb.schedule.weekStart..courseWeb.schedule.weekEnd) {\r\n                if (i !in courseWeb.schedule.except) {\r\n                    weekList.add(i)\r\n                }\r\n            }\r\n            val weeks = Common.weekIntList2WeekBeanList(weekList)\r\n            for (week in weeks) {\r\n                to_return.add(\r\n                    Course(\r\n                        name,\r\n                        courseWeb.schedule.weekday,\r\n                        courseWeb.schedule.classRoom,\r\n                        courseWeb.schedule.teacher,\r\n                        courseWeb.schedule.LessonStart,\r\n                        courseWeb.schedule.LessonEnd,\r\n                        week.start,\r\n                        week.end,\r\n                        week.type,\r\n                        note = note\r\n                    )\r\n                )\r\n            }\r\n        }\r\n        return to_return\r\n    }\r\n\r\n    val isWakeUp = true\r\n    val isEndUser = true\r\n\r\n    fun getCourseWeb(html: String): ArrayList<CourseWeb> {\r\n        val to_return = ArrayList<CourseWeb>()\r\n        val document = Jsoup.parse(html)\r\n        val frame = document.getElementsByAttributeValue(\"src\", \"./inputSelf2_files/WitMis_LookCourseTable.html\")\r\n        val frameHtml = frame.text()\r\n        val frameDocument = Jsoup.parse(frameHtml)\r\n        val table = frameDocument.getElementById(\"div-table\")\r\n        val trs = table?.select(\"tr\") ?: return arrayListOf()\r\n\r\n        val addTd = ArrayList<ArrayList<Int>>(14)\r\n        for (i in 1..14) {\r\n            addTd.add(ArrayList<Int>())\r\n        }\r\n        for ((row, tr) in trs.withIndex()) {\r\n            //println(\"$row,$tr\")\r\n            addTd[row].sort()\r\n            val tds = tr.select(\"td\")\r\n            for (add in addTd[row]) {\r\n                tds.add(add, Element(\"td\"))\r\n            }\r\n            for ((col, td) in tds.withIndex()) {\r\n                if (row in 1..13 && col in 1..7) {\r\n                    val tdText = td.html()?.trim()\r\n                    val rowSpan = td.attr(\"rowspan\").toIntOrNull()\r\n                    var step = 0\r\n                    //println(rowSpan)\r\n                    //println(tdText)\r\n                    if (rowSpan != null) {\r\n                        step = rowSpan - 1\r\n                        for (i in 1 until rowSpan) {\r\n                            addTd[row + i].add(col)\r\n                        }\r\n                    }\r\n\r\n                    if (tdText != null && tdText != \"\") {\r\n                        val splited = tdText.split(\"<br>\")\r\n                        //println(\"$row,$col,$tdText\")\r\n                        val cnt = splited.size / 4\r\n                        for (i in 0 until cnt) {\r\n                            val classMate = splited[4 * i]\r\n                            val teacher = splited[4 * i + 1]\r\n                            val classRoom = splited[4 * i + 2]\r\n                            val weekStr = splited[4 * i + 3]\r\n                            val schedule = getWeek(weekStr, col, row, row + step, teacher, classRoom)\r\n                            val schedule2 = if (schedule.weekStart < schedule.weekEnd) schedule else\r\n                                CourseSchedule(\r\n                                    schedule.teacher,\r\n                                    schedule.classRoom,\r\n                                    1,\r\n                                    17,\r\n                                    schedule.weekday,\r\n                                    ArrayList<Int>(),\r\n                                    schedule.LessonStart,\r\n                                    schedule.LessonEnd\r\n                                )\r\n                            //如果课表上的时间出错,就设置为1-17周\r\n                            val course = CourseWeb(classMate, schedule2)\r\n                            //完成的todo:同一个格子有多门课的情况没有考虑\r\n                            //println(course)\r\n                            to_return.add(course)\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        merge(to_return)\r\n\r\n        return to_return\r\n    }\r\n\r\n    var strNum = \"\"\r\n    val strWeek2 get() = \"第$strNum\\\\-${strNum}周\"\r\n    val strWeek3 get() = \"第$strNum(?:\\\\,$strNum)*周\"\r\n    val strWeekException get() = \"(?:\\\\(除(?:$strWeek3)\\\\))\"\r\n    val strWeek2_2 get() = \"$strWeek2$strWeekException?\"\r\n    //val strWeekAll get() = \"(?:(?:${strWeek2_2})|(?:${strWeek3}))\"\r\n\r\n    fun getWeek(\r\n        aSchedule: String,\r\n        weekDay: Int,\r\n        lessonStart: Int,\r\n        lessonEnd: Int,\r\n        teacher: String,\r\n        classRoom: String\r\n    ): CourseSchedule\r\n            /**这里有一处利用bug形成的feature\r\n             * 正则表达式匹配列表值,即使用*或+元字符时,返回groupValue只包含最后一项\r\n             * 而课程几乎不出现不连续的取值,本程序也可以不考虑出现 一节课的节次为1,3,4这种情况\r\n             * 所以可以大方地丢弃那些没有取到的数值\r\n             * todo:在匹配排除列表时,不能使用这种逻辑.\r\n             * */\r\n    {\r\n        strNum = \"([1-9][0-9]*)\"\r\n        val aScheduleO: CourseSchedule\r\n\r\n        val regWeek2 = Regex(strWeek2_2)\r\n        val except: ArrayList<Int> = ArrayList()\r\n        if (regWeek2.containsMatchIn(aSchedule)) {\r\n            val regException = Regex(strWeekException)\r\n            val matchWeek2 = regWeek2.findAll(aSchedule)\r\n            val groupResultWeek2 = matchWeek2.elementAt(0).groupValues\r\n            //println(groupResultWeek2)\r\n            val weekStart = groupResultWeek2[1].toInt()\r\n            val weekEnd = groupResultWeek2[2].toInt()\r\n\r\n            if (regException.containsMatchIn(aSchedule)) {\r\n                //println(aSchedule)\r\n                val matchException = regException.findAll(aSchedule)\r\n                val valueException = matchException.elementAt(0).value\r\n                val regNum = Regex(strNum)\r\n                val matchNum = regNum.findAll(valueException)\r\n\r\n                for (aException in matchNum.iterator()) {\r\n                    val exceptStr = aException.value\r\n                    except.add(exceptStr.toInt())\r\n                }\r\n                //println(except)\r\n            }\r\n            aScheduleO = CourseSchedule(teacher, classRoom, weekStart, weekEnd, weekDay, except, lessonStart, lessonEnd)\r\n\r\n\r\n        } else {\r\n            val regWeek3 = Regex(strWeek3)\r\n            val matchWeek3 = regWeek3.findAll(aSchedule)\r\n            //println(aSchedule)\r\n            if (matchWeek3.count() != 1) {\r\n                println(\"错误发生在getSchedule()\")\r\n                throw Exception(\"错误发生在getSchedule()\")\r\n            }\r\n            val valueWeek3 = matchWeek3.elementAt(0).value\r\n            //println(valueWeek3)\r\n            val regNum = Regex(strNum)\r\n            val matchNum = regNum.findAll(valueWeek3)\r\n            val weeks: ArrayList<Int> = ArrayList()\r\n            for (aWeek in matchNum.iterator()) {\r\n                weeks.add(aWeek.value.toInt())\r\n            }\r\n            val weekStart = weeks.minOrNull()!!\r\n            val weekEnd = weeks.maxOrNull()!!\r\n            for (i in weekStart..weekEnd) {\r\n                if (i !in weeks) {\r\n                    except.add(i)\r\n                }\r\n            }\r\n            aScheduleO = CourseSchedule(teacher, classRoom, weekStart, weekEnd, weekDay, except, lessonStart, lessonEnd)\r\n\r\n        }\r\n        return aScheduleO\r\n    }\r\n\r\n    fun merge(data: ArrayList<CourseWeb>) {\r\n        var i = 0\r\n        while (i < data.size) {\r\n            val a = data[i]\r\n            var j = i + 1\r\n            while (j < data.size) {\r\n                val b = data[j]\r\n                if (a.classMate == b.classMate\r\n                    && a.schedule.weekday == b.schedule.weekday\r\n                    && a.schedule.weekStart == b.schedule.weekStart\r\n                    && a.schedule.weekEnd == b.schedule.weekEnd\r\n                    && a.schedule.teacher == b.schedule.teacher\r\n                    && a.schedule.classRoom == b.schedule.classRoom\r\n                    //&& a.schedule.except.equals(b.schedule.except)\r\n                    && a.schedule.LessonEnd == b.schedule.LessonStart - 1\r\n                ) {\r\n                    a.schedule.LessonEnd = b.schedule.LessonEnd\r\n                    data.remove(b)\r\n                } else {\r\n                    j++\r\n                }\r\n            }\r\n            i++\r\n        }\r\n    }\r\n\r\n\r\n    class CourseSchedule\r\n        (\r\n        var teacher: String,//授课教师\r\n        val classRoom: String,//教室\r\n        val weekStart: Int,//第几周开始\r\n        val weekEnd: Int, //第几周结束\r\n        val weekday: Int, //周几\r\n        //val weekType: Int,//单双周 1单周 2双周 3正常\r\n        val except: ArrayList<Int>,//第几周不上课\r\n        val LessonStart: Int,//第几节课开始\r\n        var LessonEnd: Int//第几节课结束\r\n\r\n    ) {\r\n\r\n\r\n        override fun toString(): String {\r\n            val exceptStr = if (except.size > 0) \"除${except}周,\" else \"\"\r\n            return \"教师:$teacher 地点:$classRoom,$weekStart-${weekEnd}周$weekday,$exceptStr$LessonStart-${LessonEnd}节\"\r\n        }\r\n\r\n    }\r\n\r\n\r\n    class CourseWeb\r\n        (\r\n        val classMate: String,\r\n        val schedule: CourseSchedule\r\n    ) {\r\n        var isNeedCheck: Boolean = false\r\n\r\n        val strClassMate = \"(.*)\\\\d+班\"\r\n        val otherAdd = \"班级:\"\r\n        val otherAdd2 = \",教师:\"\r\n        val mutltTeacherAdd = \"请务必手动检查周数:\"\r\n\r\n        fun getNameOrNull(): String? {\r\n            val regClassMate = Regex(strClassMate)\r\n            val matchClassMate = regClassMate.findAll(classMate)\r\n            val name = matchClassMate.elementAtOrNull(0)?.groupValues?.get(1)\r\n            return name\r\n        }\r\n\r\n        fun getName(isEndUser: Boolean): String {\r\n            val partName = getNameOrNull() ?: (otherAdd + classMate + otherAdd2 + schedule.teacher)\r\n            val checkAdding = if (isEndUser && isNeedCheck) mutltTeacherAdd else \"\"\r\n            return checkAdding + partName\r\n        }\r\n\r\n        override fun toString(): String {\r\n            return \"CourseWeb(classMate='$classMate', schedule=$schedule)\"\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/SHTechParser.kt b/src/main/java/parser/SHTechParser.kt
--- a/src/main/java/parser/SHTechParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/SHTechParser.kt	(date 1745507183598)
@@ -8,7 +8,7 @@
 import parser.Parser
 
 
-class SHTechParser(source: String) : Parser(source) {
+class SHTechParser(source: String) : Parser() {
     /**@author mhk
      * @date 20220821
      * @update 20230204
@@ -78,7 +78,7 @@
                     courseWeb.schedule.weekStart,
                     courseWeb.schedule.weekEnd,
                     0,
-                    note = note
+                    note = note,
                 )
             )
         } else {
@@ -101,7 +101,7 @@
                         week.start,
                         week.end,
                         week.type,
-                        note = note
+                        note = note,
                     )
                 )
             }
Index: src/main/java/parser/JXAUJkParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport com.google.gson.Gson\r\nimport org.jsoup.Connection\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\nimport java.lang.Exception\r\nimport java.util.regex.Pattern\r\n\r\n/*\r\n* @author mrwoowoo\r\n* @description 江西农业大学接口版倒入，内容更完整\r\n */\r\nclass JXAUJkParser(private val username:String, private val password:String) : Parser(\"\") {\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n\r\n        val loginCon = Jsoup.connect(\"http://jwgl.jxau.edu.cn/User/CheckLogin\")\r\n            .followRedirects(false)\r\n            .header(\"User-Agent\", \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0))\")\r\n            .data(\"UserName\", username)\r\n            .data(\"PassWord\", password)\r\n            .method(Connection.Method.POST)\r\n        val loginResp = loginCon.execute()\r\n        val mainUrl = loginResp.header(\"Location\").split(\"/\")\r\n        val gid = mainUrl[mainUrl.size-1]\r\n        val cookies = loginResp.cookies()\r\n        if(mainUrl[1] != \"Main\") {\r\n            throw Exception(\"登陆失败\")\r\n        }\r\n        val semesterId = getSemesterId(cookies, gid)\r\n        val courseTable = getCourseTable(cookies, gid, semesterId)\r\n        for (course in courseTable) {\r\n            val week = course.SkZhou.split(\",\")\r\n            val name = course.KcMc\r\n            val day = course.XingQi.split(\".\")[0].toInt()\r\n            val room = course.Skdd\r\n            val teacher = course.Rkls\r\n            val nodeReg = Pattern.compile(\"\"\"(\\d+)-(\\d+)节\"\"\")\r\n            val nodes = nodeReg.matcher(course.Jieci)\r\n            if(!nodes.find()) {\r\n                throw Exception(\"课程节点错误\")\r\n            }\r\n            val startNode = nodes.group(1).toInt()\r\n            val endNode = nodes.group(2).toInt()\r\n            for(reg in week) {\r\n                var startWeek: Int\r\n                var endWeek: Int\r\n                if (reg.contains(\"-\")) {\r\n                    val allweek = reg.split(\"-\")\r\n                    startWeek = allweek[0].toInt()\r\n                    endWeek = allweek[1].toInt()\r\n                } else {\r\n                    startWeek = reg.toInt()\r\n                    endWeek = startWeek\r\n                }\r\n                val c = Course(\r\n                    name = name, day = day, room = room, teacher = teacher, startNode = startNode,\r\n                    endNode = endNode, startWeek = startWeek, endWeek = endWeek, type = 0\r\n                )\r\n                courseList.add(c)\r\n            }\r\n        }\r\n\r\n        return courseList\r\n    }\r\n\r\n    data class CourseTableInfo(\r\n        val Message : String,\r\n        val Result : String,\r\n        val Data : List<CourseTableData>,\r\n        val OtherData : String,\r\n        val totalCount : String,\r\n        val success : String\r\n    )\r\n\r\n    data class CourseTableData(\r\n        val ID : String,\r\n        val Skdx : String,\r\n        val KkDwDm : String,\r\n        val KkDw : String,\r\n        val KcDm : String,\r\n        val KcMc : String,\r\n        val Jxbbh : String,\r\n        val Jxb : String,\r\n        val SkZhou : String,\r\n        val Rkls : String,\r\n        val Sjd : String,\r\n        val SjdText : String,\r\n        val XueQi : String,\r\n        val XingQi : String,\r\n        val Jieci : String,\r\n        val Skdd : String,\r\n        val Jslb : String,\r\n        val KcXz : String,\r\n        val Skrs : String\r\n    )\r\n\r\n    private fun getSemesterId(cookies: Map<String, String>, gid: String) : String {\r\n        val semesterCon = Jsoup.connect(\"http://jwgl.jxau.edu.cn/PaikeManage/KebiaoInfo/GetStudentkebiao/$gid\")\r\n            .cookies(cookies)\r\n            .header(\"User-Agent\", \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0))\")\r\n            .method(Connection.Method.GET)\r\n        val rawSemesterBody = semesterCon.execute().body()\r\n        val semesterReg = Pattern.compile(\"\"\"var Dqxq = '(\\d+)';\"\"\")\r\n        val semesterMatch = semesterReg.matcher(rawSemesterBody)\r\n        if(semesterMatch.find()) {\r\n            return semesterMatch.group(1)\r\n        }else{\r\n            throw Exception(\"学期错误\")\r\n        }\r\n    }\r\n\r\n    private fun getCourseTable(cookies: Map<String, String>, gid: String, semesterId: String) : List<CourseTableData>{\r\n        val parser = Gson()\r\n        val semesterCon = Jsoup.connect(\"http://jwgl.jxau.edu.cn/PaikeManage/KebiaoInfo/GetStudentKebiaoByXq/$gid\")\r\n            .ignoreContentType(true)\r\n            .cookies(cookies)\r\n            .header(\"User-Agent\", \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0))\")\r\n            .data(\"xq\", semesterId)\r\n            .method(Connection.Method.POST)\r\n        val rawCourseTable = semesterCon.execute().body()\r\n        val courseTableJson = parser.fromJson(rawCourseTable, CourseTableInfo::class.java)\r\n        return courseTableJson.Data\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/JXAUJkParser.kt b/src/main/java/parser/JXAUJkParser.kt
--- a/src/main/java/parser/JXAUJkParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/JXAUJkParser.kt	(date 1745507183734)
@@ -12,7 +12,7 @@
 * @author mrwoowoo
 * @description 江西农业大学接口版倒入，内容更完整
  */
-class JXAUJkParser(private val username:String, private val password:String) : Parser("") {
+class JXAUJkParser(private val username:String, private val password:String) : Parser() {
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
 
@@ -57,7 +57,7 @@
                 }
                 val c = Course(
                     name = name, day = day, room = room, teacher = teacher, startNode = startNode,
-                    endNode = endNode, startWeek = startWeek, endWeek = endWeek, type = 0
+                    endNode = endNode, startWeek = startWeek, endWeek = endWeek, type = 0,
                 )
                 courseList.add(c)
             }
Index: src/main/java/parser/HUATParser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser;\r\n\r\nimport bean.Course;\r\nimport org.jetbrains.annotations.NotNull;\r\nimport org.jsoup.Jsoup;\r\nimport org.jsoup.nodes.Document;\r\nimport org.jsoup.nodes.Element;\r\nimport org.jsoup.select.Elements;\r\nimport parser.Parser;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\n/*\r\n *  本适配依赖于HTML中课程信息的固有格式\r\n *  即 \"大学生心理健康（4）杜XX 3H 6208 2 - 10周（全周）\"\r\n *  如果出现更改 请联系 2182998627@qq.com\r\n *\r\n *  2023年2月1日星期三 CST 下午4:16:57 **NekoRectifier**\r\n */\r\n\r\npublic class HUATParser extends Parser {\r\n\r\n    Document document;\r\n\r\n    public HUATParser(@NotNull String source) {\r\n        super(source);\r\n        document = Jsoup.parse(source);\r\n    }\r\n\r\n    @NotNull\r\n    @Override\r\n    public List<Course> generateCourseList() {\r\n        Element base_table = document.getElementById(\"ctl00_ContentPlaceHolder1_CourseTable\");\r\n\r\n        byte row_num = 0;\r\n        byte col_num = 1;\r\n\r\n        ArrayList<Course> courses = new ArrayList<>();\r\n        if (Objects.nonNull(base_table)) {\r\n            Elements horizontal_list = base_table.select(\"[valign=\\\"middle\\\"]\");\r\n\r\n            //由于 HUAT 的课表排列是横向在HTML中给出的,故采用该方式来获得具体课程的节数. 0-4 分别指定1-2,3-4,....节课\r\n            for (Element horizontal : horizontal_list) {\r\n//                System.out.println(horizontal);\r\n                Elements td_list = horizontal.select(\"td>a:first-of-type\");\r\n\r\n                for (Element td_node : td_list) {\r\n                    System.out.println(td_node.parent().text());\r\n                    addCourse(td_node.parent().text(), row_num, col_num, courses);\r\n                    col_num++;\r\n                }\r\n//                System.out.println(row_num);\r\n                row_num++;\r\n                col_num = 1;\r\n            }\r\n        }\r\n        return courses;\r\n    }\r\n\r\n    void addCourse(String info, int period_index, int day_index, ArrayList<Course> courses) {\r\n        int start_node, end_node, start_week, end_week, week_start_index, week_end_index;\r\n\r\n        String[] elements = info.split(\" \");\r\n        String class_name = elements[0], class_room, teacher;\r\n        week_start_index = elements.length - 3;\r\n        week_end_index = elements.length - 1;\r\n\r\n        start_week = Integer.parseInt(elements[week_start_index]);\r\n        end_week = Integer.parseInt(\r\n                (elements[week_end_index]\r\n                        .replaceAll(\"[周（）全半]\", \"\")));\r\n\r\n        //period_index = 4 时是指晚上3节课的情况\r\n        if (period_index != 4) {\r\n            end_node = 2 * (period_index + 1);\r\n            start_node = end_node - 1;\r\n        } else {\r\n            end_node = 2 * (period_index + 1) + 1;\r\n            start_node = end_node - 2;\r\n        }\r\n\r\n        int length = elements.length;\r\n        switch (length) {\r\n\r\n            case 7 -> {\r\n                // 正常完整课表情况 {名称 + 教师 + 2/3H + 教室 + start 周数+ - + end周数}\r\n                class_room = elements[3];\r\n                teacher = elements[1];\r\n            }\r\n\r\n            case 6 -> {\r\n                // 缺少教师/教室信息\r\n                if (elements[length - 4].contains(\"H\")) {\r\n                    // 无教室情况\r\n                    class_room = \"未知教室\";\r\n                    teacher = elements[1];\r\n                } else {\r\n                    // 无教师情况\r\n                    teacher = \"未知教师\";\r\n                    class_room = elements[2];\r\n                }\r\n            }\r\n\r\n            case 5 -> { //  缺少教室和教师信息\r\n                teacher = \"未知教师\";\r\n                class_room = \"未知教室\";\r\n            }\r\n\r\n            default -> {\r\n                if (length > 7) {\r\n                    StringBuilder builder = new StringBuilder();\r\n\r\n                    // 多教师情况\r\n                    // 通常来讲，多教师的课程是会有已知教室号的\r\n                    if (elements[length - 4].replaceAll(\"[0-9]{4}\", \"\").equals(\"\")) {\r\n                        class_room = elements[length - 4];\r\n\r\n                        for(int i = 1; i< length - 5; i++) {\r\n                            builder.append(elements[i]).append(\" \");\r\n                        }\r\n                        teacher = builder.toString().trim();\r\n                    } else { //课程是无教室号的\r\n                        class_room = \"未知教室\";\r\n\r\n                        for(int i = 1; i< length - 4; i++) {\r\n                            builder.append(elements[i]).append(\" \");\r\n                        }\r\n                        teacher = builder.toString().trim();\r\n                    }\r\n                } else {\r\n                    teacher = \"未知教师\";\r\n                    class_room = \"未知教室\";\r\n                }\r\n            }\r\n        }\r\n\r\n        courses.add(\r\n                new Course(\r\n                        class_name, day_index, class_room,\r\n                        teacher, start_node, end_node,\r\n                        start_week, end_week, 0, 1f, \"\", \"\", \"\"));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/HUATParser.java b/src/main/java/parser/HUATParser.java
--- a/src/main/java/parser/HUATParser.java	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/HUATParser.java	(date 1745507183709)
@@ -24,7 +24,7 @@
     Document document;
 
     public HUATParser(@NotNull String source) {
-        super(source);
+        super();
         document = Jsoup.parse(source);
     }
 
@@ -139,6 +139,6 @@
                 new Course(
                         class_name, day_index, class_room,
                         teacher, start_node, end_node,
-                        start_week, end_week, 0, 1f, "", "", ""));
+                        start_week, end_week, 0, 1f, "", "", "", ));
     }
 }
Index: src/main/java/parser/SUESParser2.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport com.google.gson.JsonObject\r\nimport com.google.gson.JsonParser\r\nimport com.google.gson.JsonSyntaxException\r\nimport main.java.bean.TimeDetail\r\nimport main.java.bean.TimeTable\r\nimport main.java.exception.EmptyException\r\nimport main.java.exception.GetTermDataErrorException\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\n\r\nclass SUESParser2(source: String) : Parser(source) {\r\n\r\n    //按照 Cookie 值判断是否使用 WebVPN\r\n    private val baseURL =\r\n        if (source.contains(\"wrdvpn\")) \"https://webvpn.sues.edu.cn/https/77726476706e69737468656265737421faef478b69237d556d468ca88d1b203b\" else \"https://jxfw.sues.edu.cn\"\r\n\r\n    //判断连接是否成功\r\n    private val testSchoolName = let {\r\n        try {\r\n            JsonParser.parseString(\r\n                Jsoup.connect(\"$baseURL/student/params/get-schoolName\")\r\n                    .header(\"Cookie\", source)\r\n                    .ignoreContentType(true)\r\n                    .execute().body()\r\n            )\r\n        } catch (_: JsonSyntaxException) {\r\n            throw GetTermDataErrorException(\"似乎还没有登录，请刷新并登录后再操作。\")\r\n        }\r\n    }\r\n\r\n    //获取课表页面 HTML\r\n    private val tableHTML =\r\n        Jsoup.connect(\"$baseURL/student/for-std/course-table\")\r\n            .header(\"Cookie\", source)\r\n            .execute().body()\r\n\r\n    private var personID = Regex(\"var personId = ([0-9]*?);\").find(tableHTML)?.groupValues?.get(1)\r\n\r\n    //从课表页面读取学期信息\r\n    private val courseTableText =\r\n        Regex(\"var semesters = JSON\\\\.parse\\\\(\\\\s*'([^']*)'\\\\s*\\\\)\").find(tableHTML)?.groupValues?.get(1)\r\n            ?: throw EmptyException(\"没有获取到课表配置，请检查课表中是否有课。\")\r\n\r\n    data class Semester(\r\n        val name: String, val id: String\r\n    )\r\n\r\n    private var semester: Semester? = null\r\n\r\n    fun getSemesterList(): List<Semester> {\r\n        return JsonParser.parseString(courseTableText.replace(\"\\\\\\\"\", \"\\\"\"))\r\n            .asJsonArray.map {\r\n                Semester(\r\n                    name = it.asJsonObject.get(\"name\").asString,\r\n                    id = it.asJsonObject.get(\"id\").asInt.toString()\r\n                )\r\n            }\r\n    }\r\n\r\n    fun setSemester(s: Semester) {\r\n        semester = s\r\n    }\r\n\r\n    private var json: JsonObject? = null\r\n\r\n    private var timetable: JsonObject = JsonParser.parseString(\"{\\\"nameZh\\\": \\\"新课表布局\\\",\\\"nameEn\\\": null,\\\"id\\\": 21,\\\"enabled\\\": true,\\\"changeMonth\\\": null,\\\"changeDayOfMonth\\\": null,\\\"courseUnitList\\\": [{\\\"nameZh\\\": \\\"第一节\\\",\\\"nameEn\\\": \\\"unit1\\\",\\\"timeTableLayoutAssoc\\\": 21,\\\"indexNo\\\": 1,\\\"startTime\\\": 815,\\\"endTime\\\": 855,\\\"dayPart\\\": \\\"MORNING\\\",\\\"color\\\": \\\"#ffffff\\\",\\\"changeStartTime\\\": 0,\\\"changeEndTime\\\": 0,\\\"segmentIndex\\\": 1,\\\"name\\\": \\\"第一节\\\"},{\\\"nameZh\\\": \\\"第二节\\\",\\\"nameEn\\\": \\\"unit2\\\",\\\"timeTableLayoutAssoc\\\": 21,\\\"indexNo\\\": 2,\\\"startTime\\\": 855,\\\"endTime\\\": 935,\\\"dayPart\\\": \\\"MORNING\\\",\\\"color\\\": \\\"#ffffff\\\",\\\"changeStartTime\\\": 0,\\\"changeEndTime\\\": 0,\\\"segmentIndex\\\": 1,\\\"name\\\": \\\"第二节\\\"},{\\\"nameZh\\\": \\\"第三节\\\",\\\"nameEn\\\": \\\"unit3\\\",\\\"timeTableLayoutAssoc\\\": 21,\\\"indexNo\\\": 3,\\\"startTime\\\": 955,\\\"endTime\\\": 1040,\\\"dayPart\\\": \\\"MORNING\\\",\\\"color\\\": \\\"#ffffff\\\",\\\"changeStartTime\\\": 0,\\\"changeEndTime\\\": 0,\\\"segmentIndex\\\": 2,\\\"name\\\": \\\"第三节\\\"},{\\\"nameZh\\\": \\\"第四节\\\",\\\"nameEn\\\": \\\"unit4\\\",\\\"timeTableLayoutAssoc\\\": 21,\\\"indexNo\\\": 4,\\\"startTime\\\": 1040,\\\"endTime\\\": 1135,\\\"dayPart\\\": \\\"MORNING\\\",\\\"color\\\": \\\"#ffffff\\\",\\\"changeStartTime\\\": 0,\\\"changeEndTime\\\": 0,\\\"segmentIndex\\\": 2,\\\"name\\\": \\\"第四节\\\"},{\\\"nameZh\\\": \\\"第五节\\\",\\\"nameEn\\\": \\\"unit5\\\",\\\"timeTableLayoutAssoc\\\": 21,\\\"indexNo\\\": 5,\\\"startTime\\\": 1135,\\\"endTime\\\": 1220,\\\"dayPart\\\": \\\"MORNING\\\",\\\"color\\\": \\\"#ffffff\\\",\\\"changeStartTime\\\": 0,\\\"changeEndTime\\\": 0,\\\"segmentIndex\\\": 2,\\\"name\\\": \\\"第五节\\\"},{\\\"nameZh\\\": \\\"第六节\\\",\\\"nameEn\\\": \\\"unit6\\\",\\\"timeTableLayoutAssoc\\\": 21,\\\"indexNo\\\": 6,\\\"startTime\\\": 1320,\\\"endTime\\\": 1400,\\\"dayPart\\\": \\\"AFTERNOON\\\",\\\"color\\\": \\\"#ffffff\\\",\\\"changeStartTime\\\": 0,\\\"changeEndTime\\\": 0,\\\"segmentIndex\\\": 3,\\\"name\\\": \\\"第六节\\\"},{\\\"nameZh\\\": \\\"第七节\\\",\\\"nameEn\\\": \\\"unit7\\\",\\\"timeTableLayoutAssoc\\\": 21,\\\"indexNo\\\": 7,\\\"startTime\\\": 1400,\\\"endTime\\\": 1440,\\\"dayPart\\\": \\\"AFTERNOON\\\",\\\"color\\\": \\\"#ffffff\\\",\\\"changeStartTime\\\": 0,\\\"changeEndTime\\\": 0,\\\"segmentIndex\\\": 3,\\\"name\\\": \\\"第七节\\\"},{\\\"nameZh\\\": \\\"第八节\\\",\\\"nameEn\\\": \\\"unit8\\\",\\\"timeTableLayoutAssoc\\\": 21,\\\"indexNo\\\": 8,\\\"startTime\\\": 1500,\\\"endTime\\\": 1540,\\\"dayPart\\\": \\\"AFTERNOON\\\",\\\"color\\\": \\\"#ffffff\\\",\\\"changeStartTime\\\": 0,\\\"changeEndTime\\\": 0,\\\"segmentIndex\\\": 4,\\\"name\\\": \\\"第八节\\\"},{\\\"nameZh\\\": \\\"第九节\\\",\\\"nameEn\\\": \\\"unit9\\\",\\\"timeTableLayoutAssoc\\\": 21,\\\"indexNo\\\": 9,\\\"startTime\\\": 1540,\\\"endTime\\\": 1620,\\\"dayPart\\\": \\\"AFTERNOON\\\",\\\"color\\\": \\\"#ffffff\\\",\\\"changeStartTime\\\": 0,\\\"changeEndTime\\\": 0,\\\"segmentIndex\\\": 4,\\\"name\\\": \\\"第九节\\\"},{\\\"nameZh\\\": \\\"第十节\\\",\\\"nameEn\\\": \\\"unit10\\\",\\\"timeTableLayoutAssoc\\\": 21,\\\"indexNo\\\": 10,\\\"startTime\\\": 1635,\\\"endTime\\\": 1715,\\\"dayPart\\\": \\\"EVENING\\\",\\\"color\\\": \\\"#ffffff\\\",\\\"changeStartTime\\\": 0,\\\"changeEndTime\\\": 0,\\\"segmentIndex\\\": 5,\\\"name\\\": \\\"第十节\\\"},{\\\"nameZh\\\": \\\"第十一节\\\",\\\"nameEn\\\": \\\"unit11\\\",\\\"timeTableLayoutAssoc\\\": 21,\\\"indexNo\\\": 11,\\\"startTime\\\": 1715,\\\"endTime\\\": 1755,\\\"dayPart\\\": \\\"EVENING\\\",\\\"color\\\": \\\"#ffffff\\\",\\\"changeStartTime\\\": 0,\\\"changeEndTime\\\": 0,\\\"segmentIndex\\\": 5,\\\"name\\\": \\\"第十一节\\\"},{\\\"nameZh\\\": \\\"第十二节\\\",\\\"nameEn\\\": \\\"unit12\\\",\\\"timeTableLayoutAssoc\\\": 21,\\\"indexNo\\\": 12,\\\"startTime\\\": 1810,\\\"endTime\\\": 1850,\\\"dayPart\\\": \\\"EVENING\\\",\\\"color\\\": \\\"#ffffff\\\",\\\"changeStartTime\\\": 0,\\\"changeEndTime\\\": 0,\\\"segmentIndex\\\": 6,\\\"name\\\": \\\"第十二节\\\"},{\\\"nameZh\\\": \\\"第十三节\\\",\\\"nameEn\\\": \\\"unit13\\\",\\\"timeTableLayoutAssoc\\\": 21,\\\"indexNo\\\": 13,\\\"startTime\\\": 1850,\\\"endTime\\\": 1930,\\\"dayPart\\\": \\\"EVENING\\\",\\\"color\\\": \\\"#ffffff\\\",\\\"changeStartTime\\\": 0,\\\"changeEndTime\\\": 0,\\\"segmentIndex\\\": 6,\\\"name\\\": \\\"第十三节\\\"},{\\\"nameZh\\\": \\\"第十四节\\\",\\\"nameEn\\\": \\\"unit14\\\",\\\"timeTableLayoutAssoc\\\": 21,\\\"indexNo\\\": 14,\\\"startTime\\\": 1935,\\\"endTime\\\": 2015,\\\"dayPart\\\": \\\"EVENING\\\",\\\"color\\\": \\\"#ffffff\\\",\\\"changeStartTime\\\": 0,\\\"changeEndTime\\\": 0,\\\"segmentIndex\\\": 7,\\\"name\\\": \\\"第十四节\\\"},{\\\"nameZh\\\": \\\"第十五节\\\",\\\"nameEn\\\": \\\"unit15\\\",\\\"timeTableLayoutAssoc\\\": 21,\\\"indexNo\\\": 15,\\\"startTime\\\": 2020,\\\"endTime\\\": 2100,\\\"dayPart\\\": \\\"EVENING\\\",\\\"color\\\": \\\"#ffffff\\\",\\\"changeStartTime\\\": 0,\\\"changeEndTime\\\": 0,\\\"segmentIndex\\\": 7,\\\"name\\\": \\\"第十五节\\\"}],\\\"maxEndTime\\\": 2100,\\\"minStartTime\\\": 815,\\\"minIndexNo\\\": 1,\\\"maxIndexNo\\\": 15,\\\"transient\\\": false,\\\"name\\\": \\\"新课表布局\\\"}\").asJsonObject\r\n\r\n    override fun generateTimeTable(): TimeTable {\r\n        fun getTime(time: Int): String {\r\n            var txt = time.toString()\r\n            if (txt.length == 3) {\r\n                txt = \"0$txt\"\r\n            }\r\n            return \"${txt.slice(0..1)}:${txt.slice(2..3)}\"\r\n        }\r\n        return TimeTable(\r\n            name = timetable.get(\"name\").asString,\r\n            timeList = timetable.getAsJsonArray(\"courseUnitList\").map {\r\n                TimeDetail(\r\n                    node = it.asJsonObject.get(\"indexNo\").asInt,\r\n                    startTime = getTime(it.asJsonObject.get(\"startTime\").asInt),\r\n                    endTime = getTime(it.asJsonObject.get(\"endTime\").asInt)\r\n                )\r\n            })\r\n    }\r\n\r\n    override fun getTableName(): String = \"课表\"\r\n\r\n    override fun getNodes(): Int = timetable.getAsJsonArray(\"courseUnitList\").size()\r\n\r\n    override fun getStartDate(): String =\r\n        json!!.getAsJsonArray(\"studentTableVms\")[0].asJsonObject\r\n            .getAsJsonArray(\"arrangedLessonSearchVms\")[0].asJsonObject\r\n            .getAsJsonObject(\"semester\").get(\"startDate\").asString ?: \"2021-9-6\"\r\n\r\n    override fun getMaxWeek(): Int {\r\n        var weeks = 30\r\n        if (personID != null) {\r\n            val weeksDataUrl = \"$baseURL/student/for-std/course-table/get-data?semesterId=${semester!!.id}&dataId=$personID&bizTypeId=2\"\r\n            val weeksDataJson = Jsoup.connect(weeksDataUrl).header(\"Cookie\", source)\r\n                .ignoreContentType(true)\r\n                .execute().body()\r\n            val weeksDataObject = JsonParser.parseString(weeksDataJson).asJsonObject\r\n            if (weeksDataObject.getAsJsonArray(\"weekIndices\").size() > 0) {\r\n                val weekIndices = weeksDataObject.getAsJsonArray(\"weekIndices\")\r\n                weeks = weekIndices[weekIndices.size() - 1].asInt\r\n            }\r\n        }\r\n        return weeks\r\n    }\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        if (semester == null)\r\n            throw GetTermDataErrorException(\"还未选择导入学期，请选择后继续。\")\r\n        json = JsonParser.parseString(Jsoup.connect(baseURL\r\n                + \"/student/for-std/course-table/semester/${semester!!.id}/print-data\"\r\n                + \"?semesterId=${semester!!.id}&hasExperiment=true\"\r\n            ).header(\"Cookie\", source)\r\n                .ignoreContentType(true)\r\n                .execute().body()\r\n        ).asJsonObject\r\n        if (json == null)\r\n            throw EmptyException(\"没有获取到课表，请检查课表中是否有课。\")\r\n        timetable = json!!.getAsJsonArray(\"studentTableVms\")[0].asJsonObject.getAsJsonObject(\"timeTableLayout\")\r\n        return json!!.getAsJsonArray(\"studentTableVms\")[0]\r\n            .asJsonObject.getAsJsonArray(\"activities\")\r\n            .filter { e -> !e.asJsonObject.get(\"room\").isJsonNull }\r\n            .map { it ->\r\n                fun getTime(room: String, node: Int, end: Boolean, fallback: String): String {\r\n                    return if (Regex(\"\"\"([AF][0-9]{3}|J301)多\"\"\").matches(room)) {\r\n                        when (node) {\r\n                            3 -> if (!end) \"09:55\" else \"10:35\"\r\n                            4 -> if (!end) \"10:40\" else \"11:20\"\r\n                            5 -> if (!end) \"11:20\" else \"12:00\"\r\n                            else -> if (fallback.length == 4) \"0$fallback\" else fallback\r\n                        }\r\n                    } else if (Regex(\"\"\"([DE][0-9]{3}|J303)(多|\\(中外教室）)\"\"\").matches(room)) {\r\n                        when (node) {\r\n                            3 -> if (!end) \"10:15\" else \"10:55\"\r\n                            4 -> if (!end) \"10:55\" else \"11:35\"\r\n                            5 -> if (!end) \"11:40\" else \"12:20\"\r\n                            else -> if (fallback.length == 4) \"0$fallback\" else fallback\r\n                        }\r\n                    } else {\r\n                        when (node) {\r\n                            3 -> if (!end) \"09:55\" else \"10:35\"\r\n                            4 -> if (!end) \"10:35\" else \"11:15\"\r\n                            5 -> if (!end) \"11:20\" else \"12:00\"\r\n                            else -> if (fallback.length == 4) \"0$fallback\" else fallback\r\n                        }\r\n                    }\r\n                }\r\n                Common.weekIntList2WeekBeanList(it.asJsonObject.getAsJsonArray(\"weekIndexes\").map { i ->\r\n                    i.asInt\r\n                }.toMutableList()).map { week ->\r\n                    val startNode = it.asJsonObject.get(\"startUnit\").asInt\r\n                    val endNode = it.asJsonObject.get(\"endUnit\").asInt\r\n                    if (startNode <= 5 && endNode >= 6) {\r\n                        arrayListOf(\r\n                            Course(\r\n                                name = it.asJsonObject.get(\"courseName\").asString,\r\n                                teacher = it.asJsonObject.getAsJsonArray(\"teachers\").map { it.asString }\r\n                                    .joinToString(\" \"),\r\n                                room = it.asJsonObject.get(\"room\").asString,\r\n                                startNode = startNode,\r\n                                endNode = 5,\r\n                                startWeek = week.start,\r\n                                endWeek = week.end,\r\n                                type = week.type,\r\n                                day = it.asJsonObject.get(\"weekday\").asInt,\r\n                                note = it.asJsonObject.get(\"lessonRemark\")\r\n                                    .let { n -> if (n.isJsonNull) \"\" else n.asString },\r\n                                credit = it.asJsonObject.get(\"credits\").asFloat,\r\n                                startTime = getTime(\r\n                                    it.asJsonObject.get(\"room\").asString,\r\n                                    startNode, false,\r\n                                    it.asJsonObject.get(\"startTime\").asString\r\n                                ),\r\n                                endTime = getTime(\r\n                                    it.asJsonObject.get(\"room\").asString,\r\n                                    5, true, \"12:20\"\r\n                                )\r\n                            ), Course(\r\n                                name = it.asJsonObject.get(\"courseName\").asString,\r\n                                teacher = it.asJsonObject.getAsJsonArray(\"teachers\").map { it.asString }\r\n                                    .joinToString(\" \"),\r\n                                room = it.asJsonObject.get(\"room\").asString,\r\n                                startNode = 6,\r\n                                endNode = endNode,\r\n                                startWeek = week.start,\r\n                                endWeek = week.end,\r\n                                type = week.type,\r\n                                day = it.asJsonObject.get(\"weekday\").asInt,\r\n                                note = it.asJsonObject.get(\"lessonRemark\")\r\n                                    .let { n -> if (n.isJsonNull) \"\" else n.asString },\r\n                                credit = it.asJsonObject.get(\"credits\").asFloat,\r\n                                startTime = getTime(\r\n                                    it.asJsonObject.get(\"room\").asString,\r\n                                    6, false, \"13:20\"\r\n                                ),\r\n                                endTime = getTime(\r\n                                    it.asJsonObject.get(\"room\").asString,\r\n                                    endNode, true,\r\n                                    it.asJsonObject.get(\"endTime\").asString\r\n                                )\r\n                            )\r\n                        )\r\n                    } else {\r\n                        arrayListOf(\r\n                            Course(\r\n                                name = it.asJsonObject.get(\"courseName\").asString,\r\n                                teacher = it.asJsonObject.getAsJsonArray(\"teachers\").map { it.asString }\r\n                                    .joinToString(\" \"),\r\n                                room = it.asJsonObject.get(\"room\").asString,\r\n                                startNode = startNode,\r\n                                endNode = endNode,\r\n                                startWeek = week.start,\r\n                                endWeek = week.end,\r\n                                type = week.type,\r\n                                day = it.asJsonObject.get(\"weekday\").asInt,\r\n                                note = it.asJsonObject.get(\"lessonRemark\")\r\n                                    .let { n -> if (n.isJsonNull) \"\" else n.asString },\r\n                                credit = it.asJsonObject.get(\"credits\").asFloat,\r\n                                startTime = getTime(\r\n                                    it.asJsonObject.get(\"room\").asString,\r\n                                    startNode, false,\r\n                                    it.asJsonObject.get(\"startTime\").asString\r\n                                ),\r\n                                endTime = getTime(\r\n                                    it.asJsonObject.get(\"room\").asString,\r\n                                    endNode, true,\r\n                                    it.asJsonObject.get(\"endTime\").asString\r\n                                )\r\n                            )\r\n                        )\r\n                    }\r\n                }.flatten()\r\n            }.flatten()\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/SUESParser2.kt b/src/main/java/parser/SUESParser2.kt
--- a/src/main/java/parser/SUESParser2.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/SUESParser2.kt	(date 1745507183696)
@@ -11,7 +11,7 @@
 import org.jsoup.Jsoup
 import parser.Parser
 
-class SUESParser2(source: String) : Parser(source) {
+class SUESParser2(source: String) : Parser() {
 
     //按照 Cookie 值判断是否使用 WebVPN
     private val baseURL =
@@ -162,18 +162,18 @@
                         arrayListOf(
                             Course(
                                 name = it.asJsonObject.get("courseName").asString,
+                                day = it.asJsonObject.get("weekday").asInt,
+                                room = it.asJsonObject.get("room").asString,
                                 teacher = it.asJsonObject.getAsJsonArray("teachers").map { it.asString }
                                     .joinToString(" "),
-                                room = it.asJsonObject.get("room").asString,
                                 startNode = startNode,
                                 endNode = 5,
                                 startWeek = week.start,
                                 endWeek = week.end,
                                 type = week.type,
-                                day = it.asJsonObject.get("weekday").asInt,
+                                credit = it.asJsonObject.get("credits").asFloat,
                                 note = it.asJsonObject.get("lessonRemark")
                                     .let { n -> if (n.isJsonNull) "" else n.asString },
-                                credit = it.asJsonObject.get("credits").asFloat,
                                 startTime = getTime(
                                     it.asJsonObject.get("room").asString,
                                     startNode, false,
@@ -182,21 +182,21 @@
                                 endTime = getTime(
                                     it.asJsonObject.get("room").asString,
                                     5, true, "12:20"
-                                )
+                                ),
                             ), Course(
                                 name = it.asJsonObject.get("courseName").asString,
+                                day = it.asJsonObject.get("weekday").asInt,
+                                room = it.asJsonObject.get("room").asString,
                                 teacher = it.asJsonObject.getAsJsonArray("teachers").map { it.asString }
                                     .joinToString(" "),
-                                room = it.asJsonObject.get("room").asString,
                                 startNode = 6,
                                 endNode = endNode,
                                 startWeek = week.start,
                                 endWeek = week.end,
                                 type = week.type,
-                                day = it.asJsonObject.get("weekday").asInt,
+                                credit = it.asJsonObject.get("credits").asFloat,
                                 note = it.asJsonObject.get("lessonRemark")
                                     .let { n -> if (n.isJsonNull) "" else n.asString },
-                                credit = it.asJsonObject.get("credits").asFloat,
                                 startTime = getTime(
                                     it.asJsonObject.get("room").asString,
                                     6, false, "13:20"
@@ -205,25 +205,25 @@
                                     it.asJsonObject.get("room").asString,
                                     endNode, true,
                                     it.asJsonObject.get("endTime").asString
-                                )
+                                ),
                             )
                         )
                     } else {
                         arrayListOf(
                             Course(
                                 name = it.asJsonObject.get("courseName").asString,
+                                day = it.asJsonObject.get("weekday").asInt,
+                                room = it.asJsonObject.get("room").asString,
                                 teacher = it.asJsonObject.getAsJsonArray("teachers").map { it.asString }
                                     .joinToString(" "),
-                                room = it.asJsonObject.get("room").asString,
                                 startNode = startNode,
                                 endNode = endNode,
                                 startWeek = week.start,
                                 endWeek = week.end,
                                 type = week.type,
-                                day = it.asJsonObject.get("weekday").asInt,
+                                credit = it.asJsonObject.get("credits").asFloat,
                                 note = it.asJsonObject.get("lessonRemark")
                                     .let { n -> if (n.isJsonNull) "" else n.asString },
-                                credit = it.asJsonObject.get("credits").asFloat,
                                 startTime = getTime(
                                     it.asJsonObject.get("room").asString,
                                     startNode, false,
@@ -233,7 +233,7 @@
                                     it.asJsonObject.get("room").asString,
                                     endNode, true,
                                     it.asJsonObject.get("endTime").asString
-                                )
+                                ),
                             )
                         )
                     }
Index: src/main/java/parser/NWPUParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport Common\r\n\r\nimport bean.Course\r\nimport com.google.gson.JsonParser\r\nimport main.java.exception.EmptyException\r\nimport main.java.exception.GetTermDataErrorException\r\nimport main.java.exception.PasswordErrorException\r\nimport org.jsoup.Jsoup\r\nimport org.jsoup.Connection.*\r\nimport org.jsoup.HttpStatusException\r\nimport parser.Parser\r\n\r\n/**\r\n * (2022/4, @ludoux) 维护小提示：\r\n *\r\n * 1. (Deprecated) 接口是从 https://students-schedule.nwpu.edu.cn/ui/#/courseTable 来的\r\n * 大致为 get 拿 cookie -> post 发登录凭证，回复 url 有 token -> token 写 header 里面取所有学期列表 -> token 写 header 根据匹配的学期拿课表\r\n *\r\n * 2. 关于时间表：是在作者私仓 com/suda/yzune/wakeupschedule/schedule_import/ImportViewModel.kt 里 addNwpuTimeTables 函数写的。\r\n * 不管导入的是哪个校区，如上函数都会新建所有的时间表（存在同名不会覆盖）\r\n * 假如时间表变更，请联系作者更改里面的函数。注意假如有同名时间表将不会覆盖，所以建议新建以“西工大长安v2”类似来命名，同时这里的_timeTableName也相应更改。\r\n * 假如太仓校区确认了，同上逻辑，建议新建以“西工大太仓”类似来命名，这里的_timeTableName也相应更改。\r\n *\r\n * 3. 关于学期开始日期等：_startDate 等变量以及 override 的相关 get 函数，wakeup 会读取自动正确存储。\r\n * 这里是因为 courseAdapter 没做相关功能，所以导出的 WakeUp 时间表相关信息不正确，但实际上 App 中是正确的。\r\n * 假如你要改相关 UI,在作者私仓 com/suda/yzune/wakeupschedule/schedule_import/LoginWebFragment.kt 里，请联系开发者。\r\n */\r\n\r\n/**\r\n * (2022/6/22, @Pinming) 接口更改说明：\r\n *\r\n * 2022/4 版本采用翱翔门户接口存在更新不及时的情况，即一旦发生了调课等情况，接口返回的课程表依然是原有状态，不会随之更新。\r\n * 本次修改将课程表接口更换为教务系统提供的 API，避免类似的情况。\r\n * 在发生调课后，可以重新通过 WakeUp App 导入调整后的课程表。\r\n *\r\n * 更新后，课程表爬取的大体步骤是：先登入翱翔门户，获取 SESSION 与 __pstsid__，携带这两个 cookie 进入教务系统，进行进一步的爬取。\r\n * 进入教务系统后：\r\n * 1）通过接口 semesterIndexUrl 获取 Semester 信息，维护 Semester (ID->Name) 的 Map；\r\n * 2）通过接口 courseTableStdUrl 获取 dataId, personId 信息，供后续调接口时使用；\r\n * 3）获取到这两个 ID 后，分别调用教务系统 API：\r\n *    /student/for-std/course-table/semester/$semesterId/print-data\r\n *    /student/for-std/course-table/get-data\r\n *    a) get-data   获取到的信息主要用于更新 Parser 的内部属性，如 _tableName, _maxWeek, _startDate 等\r\n *    b) print-data 用于获取各门课中的具体时间信息；get-data 的课程信息结构不太友好\r\n * 之后就是将获取到的 JSON 丢入 generateCourseList() 方法中格式化处理，生成 courseList 对象。\r\n *\r\n * 此外，关于校区判断的逻辑也有所修改，之前的方案应该是以课表中获取到的最后一门课为准。\r\n * 新的逻辑对各校区的 Activity 作计数，取 Activity 最多的校区为主校区，作为 App 中采用的时间表。\r\n */\r\n\r\n/**\r\n * @Last_Update 2022/6/22\r\n * @Creator @ludoux (chinaluchang@live.com)\r\n * @Maintainer @Pinming (i@pm-z.tech)\r\n */\r\nconst val casLoginUrl: String =\r\n    \"https://uis.nwpu.edu.cn/cas/login?service=https%3A%2F%2Fjwxt.nwpu.edu.cn%2Fstudent%2Fsso-login\"\r\nconst val semesterIndexUrl: String = \"https://jwxt.nwpu.edu.cn/student/for-std/lesson-search/index/\"\r\nconst val courseTableStdUrl: String = \"https://jwxt.nwpu.edu.cn/student/for-std/course-table\"\r\nvar dataId: String = \"\"\r\nvar personId: String = \"\"\r\n\r\nclass NWPUParser(\r\n    private val xh: String, private val pwd: String, private val semesterYear: String, private val semesterTerm: Int\r\n) : Parser(\"\") {\r\n\r\n    private val headers: HashMap<String, String> = hashMapOf(\r\n        \"User-Agent\" to \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5111.0 Safari/537.36\",\r\n        \"origin\" to \"https://uis.nwpu.edu.cn\",\r\n        \"referer\" to casLoginUrl,\r\n        \"content-Type\" to \"application/x-www-form-urlencoded\",\r\n        \"scheme\" to \"https\"\r\n    )\r\n\r\n    private var _timeTableName = \"西工大长安\"\r\n    private var _tableName = \"西工大 2020-2021 春学期\"\r\n    private var _nodes = 13\r\n    private var _startDate = \"1970-01-01\"\r\n    private var _maxWeek = 22\r\n\r\n    private fun webFunc(): String {\r\n        var cookies: Map<String, String>?\r\n        var res: Response = Jsoup.connect(casLoginUrl).method(Method.GET).execute()\r\n        cookies = res.cookies()\r\n        val executionValue = res.parse().getElementsByAttributeValue(\"name\", \"execution\")[0].attributes().get(\"value\")\r\n        try {\r\n            res = Jsoup.connect(casLoginUrl).method(Method.POST).headers(headers).cookies(cookies).data(\"username\", xh)\r\n                .data(\"password\", pwd).data(\"currentMenu\", \"1\").data(\"execution\", executionValue)\r\n                .data(\"_eventId\", \"submit\").data(\"geolocation\", \"\").data(\"submit\", \"One moment please...\").execute()\r\n        } catch (hse: HttpStatusException) {\r\n            throw PasswordErrorException(\"登录失败。因帐号或密码错误，或失败过多暂时被锁定，请核对或稍后更换网络后重试。[$hse]\")\r\n        }\r\n\r\n        // 获取到 SESSION 与 __pstsid__\r\n        cookies = res.cookies()\r\n\r\n        // 获取 personId, dataId\r\n        res = Jsoup.connect(courseTableStdUrl).method(Method.GET).headers(headers).cookies(cookies).execute()\r\n        var parsedRes = res.parse()\r\n        personId =\r\n            Regex(\"\"\"(?<=personId = ).*(?=;)\"\"\").findAll(parsedRes.select(\"script\").toString()).elementAt(0).value\r\n        dataId = Regex(\"\"\"(?<=dataId = ).*(?=;)\"\"\").findAll(parsedRes.select(\"script\").toString()).elementAt(0).value\r\n\r\n        // 在 semesterIndexUrl 中获取各学期名及对应 ID\r\n        res = Jsoup.connect(semesterIndexUrl + dataId).method(Method.GET).headers(headers).cookies(cookies).execute()\r\n        parsedRes = res.parse()\r\n        val semesterHtml = parsedRes.select(\"option[name=\\\"semesterAssoc\\\"]\").toString()\r\n        val semesterNames = Regex(\"\"\"(?<=>).*(?=</option>)\"\"\").findAll(semesterHtml)\r\n        val semesterIds = Regex(\"\"\"(?<=value=\").*(?=\">)\"\"\").findAll(semesterHtml)\r\n\r\n        // 维护 Map[semesterId, semesterName]\r\n        val semestersName = \"秋春夏\"\r\n        var semesterId = \"\"\r\n        var semesterName = \"\"\r\n        var idx = 0\r\n        for (name in semesterNames) {\r\n            if (name.value.contains(\"$semesterYear-\") && name.value.contains(semestersName[semesterTerm])) {\r\n                semesterId = semesterIds.elementAt(idx).value\r\n                semesterName = semesterNames.elementAt(idx).value\r\n                break\r\n            }\r\n            idx++\r\n        }\r\n        if (semesterId == \"\") {\r\n            throw GetTermDataErrorException(\"没有在教务网站上查找到相关学期信息，请重新选择。若持续出错请联系维护者。\")\r\n        }\r\n\r\n\r\n        // 爬取教务系统信息\r\n        // 接口 get-data 与 print-data 所能获取到的数据有所不同：\r\n        // get-data 获取到的信息主要用于更新 Parser 的内部属性，如 _tableName, _maxWeek, _startDate 等\r\n        // print-data 用于获取各门课中的具体时间信息；get-data 的课程信息结构不太友好\r\n        try {\r\n            res =\r\n                Jsoup.connect(\"https://jwxt.nwpu.edu.cn/student/for-std/course-table/get-data?semesterId=$semesterId&dataId=$personId&bizTypeId=2\")\r\n                    .method(Method.GET).headers(headers).cookies(cookies).ignoreContentType(true).execute()\r\n            val lessonsFromGetData = res.parse().select(\"body\").toString().replace(\"<body>\", \"\").replace(\"</body>\", \"\")\r\n            res =\r\n                Jsoup.connect(\"https://jwxt.nwpu.edu.cn/student/for-std/course-table/semester/$semesterId/print-data/$dataId?hasExperiment=true\")\r\n                    .method(Method.GET).headers(headers).cookies(cookies).ignoreContentType(true).execute()\r\n            val lessonsFromPrintData =\r\n                res.parse().select(\"body\").toString().replace(\"<body>\", \"\").replace(\"</body>\", \"\")\r\n            return \"$lessonsFromGetData<split>$lessonsFromPrintData<split>$semesterName\"\r\n        } catch (hse: HttpStatusException) {\r\n            throw EmptyException(\"查询课表信息失败，这不应该发生。若持续出错请联系维护者。[$hse]\")\r\n        }\r\n    }\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val ori = webFunc().split(\"<split>\")\r\n        val jsonFromGetData = JsonParser.parseString(ori[0])\r\n        val jsonFromPrintData = JsonParser.parseString(ori[1])\r\n        val semesterName = ori[2]\r\n        var countChangAn = 0\r\n        var countYouYi = 0\r\n        var countTaiCang = 0\r\n        _tableName = \"西工大 $semesterName\" // 西工大 2021-2022春\r\n        _maxWeek = jsonFromGetData.asJsonObject.get(\"weekIndices\").asJsonArray.count() // 18\r\n        _startDate =\r\n            jsonFromGetData.asJsonObject.get(\"lessons\").asJsonArray.get(0).asJsonObject.get(\"semester\").asJsonObject.get(\r\n                \"startDate\"\r\n            ).asString // 2022-02-21\r\n\r\n        val courseList = ArrayList<Course>()\r\n        jsonFromPrintData.asJsonObject.get(\"studentTableVm\").asJsonObject.get(\"activities\").asJsonArray.forEach { activity ->\r\n            activity.asJsonObject.get(\"weekIndexes\").asJsonArray.forEach { unit ->\r\n                val weekList = arrayListOf<Int>()\r\n                weekList.add(unit.asInt)\r\n                Common.weekIntList2WeekBeanList(weekList).forEach {\r\n                    courseList.add(\r\n                        Course(\r\n                            name = activity.asJsonObject.get(\"courseName\").asString,\r\n                            day = activity.asJsonObject.get(\"weekday\").asInt,\r\n                            // 对教室增加判空，有可能出现教室为空的情况\r\n                            room = if (!activity.asJsonObject.get(\"room\").isJsonNull) {\r\n                                activity.asJsonObject.get(\"room\").asString\r\n                            } else \"\",\r\n                            teacher = activity.asJsonObject.get(\"teachers\").asJsonArray.toString().replace(\"\\\"\", \"\")\r\n                                .replace(\"[\", \"\").replace(\"]\", \"\"),\r\n                            startNode = activity.asJsonObject.get(\"startUnit\").asInt,\r\n                            endNode = activity.asJsonObject.get(\"endUnit\").asInt,\r\n                            startWeek = weekList[0],\r\n                            // minWeekIndex(activity.asJsonObject.get(\"weekIndexes\").asJsonArray),\r\n                            endWeek = weekList[0],\r\n                            // maxWeekIndex(activity.asJsonObject.get(\"weekIndexes\").asJsonArray),\r\n                            type = 0,\r\n                            credit = activity.asJsonObject.get(\"credits\").asFloat,\r\n                            note = activity.asJsonObject.get(\"lessonCode\").asString\r\n                        )\r\n                    )\r\n                    // 通过统计各校区的 activity 数来决定校区\r\n                    if (!activity.asJsonObject.get(\"campus\").isJsonNull) {\r\n                        when {\r\n                            activity.asJsonObject.get(\"campus\").asString.contains(\"长安校区\") -> {\r\n                                countChangAn++\r\n                            }\r\n                            activity.asJsonObject.get(\"campus\").asString.contains(\"友谊校区\") -> {\r\n                                countYouYi++\r\n                            }\r\n                            activity.asJsonObject.get(\"campus\").asString.contains(\"太仓校区\") -> {\r\n                                countTaiCang++\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // 课表校区判断\r\n        // 关于校区判断的逻辑也有所修改，之前的方案应该是以课表中获取到的最后一门课为准。\r\n        // 新的逻辑对各校区的 Activity 作计数，取 Activity 最多的校区为主校区，作为 App 中采用的时间表。\r\n        when {\r\n            (maxOf(countChangAn, countYouYi, countTaiCang) == countChangAn) -> {\r\n                _nodes = 13\r\n                _timeTableName = \"西工大长安\"\r\n            }\r\n            (maxOf(countChangAn, countYouYi, countTaiCang) == countYouYi) -> {\r\n                _nodes = 12\r\n                val month = java.util.Calendar.getInstance().get(java.util.Calendar.MONTH)\r\n                _timeTableName = if (month >= 10 || month <= 4) {\r\n                    \"西工大友谊冬(10.1-4.30)\"\r\n                } else {\r\n                    \"西工大友谊夏(5.1-9.30)\"\r\n                }\r\n            }\r\n            (maxOf(countChangAn, countYouYi, countTaiCang) == countTaiCang) -> {\r\n                _nodes = 13\r\n                _timeTableName = \"西工大太仓(未实现)\"\r\n            }\r\n        }\r\n        println(\"课表名称：$_tableName\\n启用时间表：$_timeTableName\\n每天节数：$_nodes\\n学期开始日期（务必周一）：$_startDate\\n学期周数：$_maxWeek\")\r\n        return courseList\r\n    }\r\n\r\n    override fun getTableName(): String {\r\n        return _tableName\r\n    }\r\n\r\n    override fun getNodes(): Int {\r\n        return _nodes\r\n    }\r\n\r\n    override fun getStartDate(): String? {\r\n        return if (_startDate == \"1970-01-01\") {\r\n            null\r\n        } else {\r\n            _startDate\r\n        }\r\n    }\r\n\r\n    override fun getMaxWeek(): Int {\r\n        return _maxWeek\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/NWPUParser.kt b/src/main/java/parser/NWPUParser.kt
--- a/src/main/java/parser/NWPUParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/NWPUParser.kt	(date 1745507183627)
@@ -64,7 +64,7 @@
 
 class NWPUParser(
     private val xh: String, private val pwd: String, private val semesterYear: String, private val semesterTerm: Int
-) : Parser("") {
+) : Parser() {
 
     private val headers: HashMap<String, String> = hashMapOf(
         "User-Agent" to "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5111.0 Safari/537.36",
@@ -187,7 +187,7 @@
                             // maxWeekIndex(activity.asJsonObject.get("weekIndexes").asJsonArray),
                             type = 0,
                             credit = activity.asJsonObject.get("credits").asFloat,
-                            note = activity.asJsonObject.get("lessonCode").asString
+                            note = activity.asJsonObject.get("lessonCode").asString,
                         )
                     )
                     // 通过统计各校区的 activity 数来决定校区
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1745506193349)
+++ b/.idea/compiler.xml	(date 1745506193349)
@@ -0,0 +1,149 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <excludeFromCompile>
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/AHNUParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/BFAforYJSParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/BNUZParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/BUAAParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/BJTUParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/ECNUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/BNUZTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/BFAforYJSTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/AHNUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/supwisdom/SupwisdomParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/qz/QzWithNodeParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/qz/QzParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/qz/Qz2017Parser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/ZjvtitParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/ZhengFangParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/ZPTCParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/YGUParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/XJTUGraduateParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/UrpParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/CCIBEParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/AHSTUParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/CCSUParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/CNUParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/CQUPTParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/CSVParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/CTGUParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/ChengFangParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/ECJTUParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/ECNUParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/ECUPLParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/FSPTParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/FSTVCParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/GDBYXYParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/GZHUYJSParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/GXICParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/ZjvtitTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/ZhengFangTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/ZPTCTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/YGUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/XJTUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/UrpTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/QzWithNodeTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/HFUTTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/GZHUYJSTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/GXICTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/FSTVCTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/FSPTTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/ECUPLTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/CTGUTEST.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/CSVTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/CQUPTTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/CNUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/CCSUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/CCIBETest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/BUAATest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/BJTUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/AHSTUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/qz/QzCrazyParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/qz/QzBrParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/USTCGraduateParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/THUParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/SYSUParser2024.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/SYSUParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/SWJTUGraduateParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/SUSTechParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/SUESParser2.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/SUESParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/SITParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/SIMCParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/SHUParser2024.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/SHTechParser2024.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/SHTechParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/PekingParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/OldQzParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/NewZFParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/NewUrpParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/NewAHNUParse.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/NYISTParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/USTCGraduateTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/THUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/SYSUTest2024.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/SYSUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/SWJTUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/SUSTechTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/SUESTest2.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/SUESTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/SIMCTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/SHUTest2024.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/SHTechTest2024.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/SHTechTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/PekingTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/OldQzTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/NewZFTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/NewUrpTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/NewAHNUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/NYISTTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/NWPUParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/NWPUGraduateParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/NFUParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/LNGDParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/KingosoftZXParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/JinZhiParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/JXAUParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/JXAUJkParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/JNUParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/JLUParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/HrbeuGraduateParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/HUSTParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/HUNNUParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/HNUSTParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/HNJMParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/HNIUParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/HLJUParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/HHUParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/HFUTParser.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/HHUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/HLJUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/HNIUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/HNJMTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/HNUSTTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/HRBEUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/HUNNUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/HUSTTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/JLUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/JNUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/JXAUJkTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/JXAUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/LNGDTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/NFUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/NWPUTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/NWPUGraduateTest.kt" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/GDEIParser.java" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/GDBHParser.java" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/HUATParser.java" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/XAUATParser.java" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/JXNUParser.java" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/HNZJParser.java" />
+      <file url="file://$PROJECT_DIR$/src/main/java/parser/RUCParser.java" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/HNZJTest.java" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/XAUATTest.java" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/JXNUTest.java" />
+      <file url="file://$PROJECT_DIR$/src/main/java/test/HUATTest.java" />
+    </excludeFromCompile>
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/parser/SHTechParser2024.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport main.java.bean.TimeDetail\r\nimport main.java.bean.TimeTable\r\nimport org.jsoup.Jsoup\r\nimport org.jsoup.nodes.Element\r\nimport parser.Parser\r\nimport java.lang.Integer.max\r\nimport kotlin.math.min\r\n\r\n/**\r\n * @author trace1729\r\n * @date 20240915\r\n * @email trace1729@gmail.com\r\n * 上海科技大学研究生教务导入-2024\r\n **/\r\n\r\n// 课程表网页链接 `https://graduate.shanghaitech.edu.cn/gsapp/sys/wdkbappshtech/*default/index.do`\r\n\r\n /**\r\n2024年学校的教务系统更新, 之前的 parser 不能使用，于是就在 @auther mhk 的基础上做了些修改。\r\n使用方式：\r\n\r\n1. fork 本项目，git clone 到本地，用 IDEA 导入。\r\n2. 需要配置 jdk17 环境。\r\n3. 访问网页课表 (参加18行)，使用 `CTRL+S` 将网页保存到本地\r\n4. 在 `src/test/SHTechTest.kt` 中替换 File 中的文件路径为你保存在本地的网页路径\r\n5. 运行后， 按照指示将终端的内容复制到 [name].wakeup_schedule 文件\r\n6. 使用qq 将文件发送给手机\r\n7. 手机上选择 「其他应用打开」，点击 「导入 wakeup」\r\n8. 在 wakeup 程序界面，点击右上角的 菜单 键选择导入的课程表\r\n\r\nNotice:\r\n1. 为了正确设置作息，你需要手动修改 src/main/java/Generator 下的timePreference变量\r\n2. colorScheme 变量中的值也需要做相应修改 Node -> 13, startDate -> 2024.9.16\r\n\r\n1. 缺少单双周的检测\r\n2. 缺少不连续周的识别\r\n**/\r\n\r\nclass SHTechParser2024(source: String) : Parser(source) {\r\n\r\n\r\n    override fun getNodes(): Int = 13\r\n\r\n    override fun getTableName(): String = \"上科大导入\"\r\n\r\n    override fun generateTimeTable(): TimeTable {\r\n        val timeList: ArrayList<TimeDetail> = SHTechParser2024.timeList\r\n        return TimeTable(\"上科大作息\", timeList)\r\n    }\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val contents = source.split(\"<head>\", \"</head>\")\r\n        val body = contents.last()\r\n        val course = getCourse(body)\r\n        // 合并相邻的两门课程\r\n        merge(course)\r\n        return course\r\n    }\r\n\r\n    fun getCourse(html: String): ArrayList<Course> {\r\n        val toReturn = ArrayList<Course>()\r\n        val document = Jsoup.parse(html)\r\n        // 获取课程表\r\n        val table = document.getElementById(\"jsTbl_01\")\r\n        // 课程表有14行，8列\r\n        val trs = table?.select(\"tr\") ?: return arrayListOf()\r\n        for ((row, tr) in trs.withIndex()) {\r\n            val tds = tr.select(\"td\")\r\n            for ((col, td) in tds.withIndex()) {\r\n                val rowspan = td.attr(\"rowspan\").toIntOrNull()\r\n                // rowspan == 1 说明当前单元格没有课程，跳过\r\n                if (rowspan != null && rowspan == 1) {\r\n                    continue\r\n                }\r\n                // 从单元格中提取课程信息\r\n                if (row in 1..13 && col in 2..8) {\r\n                    toReturn.addAll(extractCourseItem(td, row, col))\r\n                }\r\n            }\r\n        }\r\n\r\n        return toReturn\r\n    }\r\n\r\n    private fun extractCourseItem(td: Element, row: Int, col: Int)\r\n    : ArrayList<Course> {\r\n        val courseItems = td.children()\r\n        val courseList = ArrayList<Course>()\r\n\r\n        courseItems.forEach { it ->\r\n            val metadataDivs = it.children()\r\n            val timeScale = metadataDivs[0].text()\r\n            val courseName = metadataDivs[1].text()\r\n            val teacher = metadataDivs[2].text()\r\n            val location = metadataDivs[3].text()\r\n\r\n            // 单双周处理\r\n            var typeOfCourse = 0\r\n            if (timeScale.contains(\"单\")) {\r\n                typeOfCourse = 1\r\n            } else if (timeScale.contains(\"双\")) {\r\n                typeOfCourse = 2\r\n            }\r\n            val newTimeScale = timeScale.replace(\"双\", \"\").replace(\"单\", \"\")\r\n\r\n//            println(\"$timeScale, $courseName, $teacher, $location\")\r\n\r\n            // 获取一节课的周次情况\r\n            val weekRange = getWeek(newTimeScale)\r\n\r\n            weekRange.forEach {\r\n                courseList.add(\r\n                    Course(\r\n                        name=courseName,\r\n                        day=col - 1, // need passing row\r\n                        room=location,\r\n                        teacher=teacher,\r\n                        startNode=row,\r\n                        endNode=row,\r\n                        startWeek=it.first,\r\n                        endWeek=it.second,\r\n                        type=typeOfCourse,\r\n                        startTime=timeList[row - 1].startTime,\r\n                        endTime=timeList[row - 1].endTime,\r\n                    )\r\n                )\r\n\r\n            }\r\n\r\n        }\r\n        return courseList\r\n    }\r\n\r\n    private fun getWeek(\r\n        weekStr: String\r\n    ): List<Pair<Int, Int>>\r\n    {\r\n        // 匹配 1-3, 4-10, 14周\r\n        val weekPattern = Regex(\"\"\"\\d+-\\d+|\\d+\"\"\")\r\n        if (weekPattern.containsMatchIn(weekStr)) {\r\n            // Extracting matched groups\r\n            val matchResult = weekPattern.findAll(weekStr)\r\n            val weekRanges = ArrayList<Pair<Int, Int>>()\r\n            matchResult.forEach {\r\n                val match = it.groupValues.first()\r\n                if (match.contains(\"-\"))\r\n                   weekRanges.add(Pair(match.split(\"-\").first().toInt(), match.split(\"-\").last().toInt()))\r\n                else\r\n                    weekRanges.add(Pair(match.toInt(), match.toInt()))\r\n            }\r\n            return weekRanges\r\n        } else {\r\n            return ArrayList()\r\n        }\r\n    }\r\n\r\n    private fun merge(data: ArrayList<Course>) {\r\n        var i = 0\r\n        while (i < data.size) {\r\n            val a = data[i]\r\n            var j = i + 1\r\n            while (j < data.size) {\r\n                val b = data[j]\r\n                if (\r\n                       a.name == b.name &&\r\n                       a.startWeek == b.startWeek &&\r\n                       a.endWeek == b.endWeek &&\r\n                       a.room == b.room &&\r\n                       a.teacher == b.teacher &&\r\n                       a.day == b.day\r\n                ) {\r\n                    a.startNode = min(a.startNode, b.startNode)\r\n                    a.endNode = max(a.endNode, b.endNode)\r\n                    data.remove(b)\r\n                } else {\r\n                    j++\r\n                }\r\n            }\r\n            i++\r\n        }\r\n    }\r\n\r\n    companion object {\r\n        val timeList: ArrayList<TimeDetail> = arrayListOf(\r\n            TimeDetail(1, \"08:15\", \"09:00\"),\r\n            TimeDetail(2, \"09:10\", \"09:55\"),\r\n            TimeDetail(3, \"10:15\", \"11:00\"),\r\n            TimeDetail(4, \"11:10\", \"11:55\"),\r\n            TimeDetail(5, \"13:00\", \"13:45\"),\r\n            TimeDetail(6, \"13:55\", \"14:40\"),\r\n            TimeDetail(7, \"15:00\", \"15:45\"),\r\n            TimeDetail(8, \"15:55\", \"16:40\"),\r\n            TimeDetail(9, \"16:50\", \"17:35\"),\r\n            TimeDetail(10, \"18:00\", \"18:45\"),\r\n            TimeDetail(11, \"18:55\", \"19:40\"),\r\n            TimeDetail(12, \"19:50\", \"20:35\"),\r\n            TimeDetail(13, \"20:45\", \"21:30\")\r\n        )\r\n\r\n        // Using this the override the timePreference in `Generator.kt`\r\n        fun timePreference():String {\r\n            var result = \"[\"\r\n            timeList.forEach {\r\n                result += \"{\" +\r\n                        \"\\\"endTime\\\": \\\"${it.endTime}\\\",\" +\r\n                        \"\\\"node\\\": \\\"${it.node}\\\",\" +\r\n                        \"\\\"startTime\\\": \\\"${it.startTime}\\\",\" +\r\n                        \"\\\"tableTime\\\": \\\"${1}\\\"\" +\r\n                        \"},\"\r\n            }\r\n            result += \"]\"\r\n            return result.replace(\"},]\",\"}]\")\r\n        }\r\n\r\n        // Using this the override the colorScheme in `Generator.kt`\r\n        val colorScheme =\r\n        \"{\\\"background\\\":\\\"\\\",\\\"courseTextColor\\\":-1,\\\"id\\\":1,\\\"itemAlpha\\\":60,\\\"itemHeight\\\":64,\\\"itemTextSize\\\":12,\\\"maxWeek\\\":20,\\\"nodes\\\":14,\\\"showOtherWeekCourse\\\":true,\\\"showSat\\\":true,\\\"showSun\\\":true,\\\"showTime\\\":false,\\\"startDate\\\":\\\"2024-9-18\\\",\\\"strokeColor\\\":-2130706433,\\\"sundayFirst\\\":false,\\\"tableName\\\":\\\"SHTech\\\",\\\"textColor\\\":-16777216,\\\"timeTable\\\":1,\\\"type\\\":0,\\\"widgetCourseTextColor\\\":-1,\\\"widgetItemAlpha\\\":60,\\\"widgetItemHeight\\\":64,\\\"widgetItemTextSize\\\":12,\\\"widgetStrokeColor\\\":-2130706433,\\\"widgetTextColor\\\":-16777216}\"\r\n    \r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/SHTechParser2024.kt b/src/main/java/parser/SHTechParser2024.kt
--- a/src/main/java/parser/SHTechParser2024.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/SHTechParser2024.kt	(date 1745507183669)
@@ -39,7 +39,7 @@
 2. 缺少不连续周的识别
 **/
 
-class SHTechParser2024(source: String) : Parser(source) {
+class SHTechParser2024(source: String) : Parser() {
 
 
     override fun getNodes(): Int = 13
@@ -124,7 +124,7 @@
                         endWeek=it.second,
                         type=typeOfCourse,
                         startTime=timeList[row - 1].startTime,
-                        endTime=timeList[row - 1].endTime,
+                        endTime=timeList[row - 1].endTime,,
                     )
                 )
 
Index: src/main/java/parser/ChengFangParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport Common\r\nimport bean.ChengFangInfo\r\nimport bean.Course\r\nimport com.google.gson.Gson\r\n\r\nclass ChengFangParser(source: String) : Parser(source) {\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val json = source.substringAfter(\"var kbxx = \").substringBefore(';')\r\n        val gson = Gson()\r\n        val weekList = arrayListOf<Int>()\r\n        gson.fromJson(json, Array<ChengFangInfo>::class.java).forEach {\r\n            weekList.clear()\r\n            it.zcs.split(',').forEach { str ->\r\n                weekList.add(str.toInt())\r\n            }\r\n            weekList.sort()\r\n            val day = it.xq.toInt()\r\n            val startNode = it.jcdm2.split(',')[0].toInt()\r\n            val endNode =\r\n                if (it.jcdm2.contains(',')) it.jcdm2.split(',').last().toInt() else it.jcdm2.split(',')[0].toInt()\r\n            val step = endNode - startNode + 1\r\n            Common.weekIntList2WeekBeanList(weekList).forEach { weekBean ->\r\n                courseList.add(\r\n                    Course(\r\n                        name = it.kcmc, room = it.jxcdmcs,\r\n                        teacher = it.teaxms, day = day,\r\n                        startWeek = weekBean.start, endWeek = weekBean.end,\r\n                        type = weekBean.type, startNode = startNode,\r\n                        endNode = startNode + step - 1\r\n                    )\r\n                )\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/ChengFangParser.kt b/src/main/java/parser/ChengFangParser.kt
--- a/src/main/java/parser/ChengFangParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/ChengFangParser.kt	(date 1745507183673)
@@ -5,7 +5,7 @@
 import bean.Course
 import com.google.gson.Gson
 
-class ChengFangParser(source: String) : Parser(source) {
+class ChengFangParser(source: String) : Parser() {
 
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
@@ -26,11 +26,11 @@
             Common.weekIntList2WeekBeanList(weekList).forEach { weekBean ->
                 courseList.add(
                     Course(
-                        name = it.kcmc, room = it.jxcdmcs,
-                        teacher = it.teaxms, day = day,
+                        name = it.kcmc, day = day,
+                        room = it.jxcdmcs, teacher = it.teaxms,
+                        startNode = startNode, endNode = startNode + step - 1,
                         startWeek = weekBean.start, endWeek = weekBean.end,
-                        type = weekBean.type, startNode = startNode,
-                        endNode = startNode + step - 1
+                        type = weekBean.type,
                     )
                 )
             }
Index: src/main/java/parser/FSPTParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport main.java.bean.TimeDetail\r\nimport main.java.bean.TimeTable\r\nimport main.java.parser.TimeTableBuilder.Companion.buildTimeTable\r\nimport org.jsoup.Jsoup\r\nimport parser.qz.QzParser\r\n\r\nclass FSPTParser(source: String) : QzParser(source) {\r\n\r\n    private val sundayFirstDayMap = arrayOf(0, 1, 2, 3, 4, 5, 6, 7)\r\n    private var sundayFirst = false\r\n\r\n    override fun generateTimeTable(): TimeTable {\r\n        return buildTimeTable(\"FSPT\") {\r\n            add(\"08:40\", \"09:20\")\r\n            add(\"09:25\", \"10:05\")\r\n            add(\"10:25\", \"11:05\")\r\n            add(\"11:10\", \"11:50\")\r\n\r\n            add(\"14:00\", \"14:40\")\r\n            add(\"14:45\", \"15:25\")\r\n            add(\"15:45\", \"16:25\")\r\n            add(\"16:30\", \"17:10\")\r\n\r\n            add(\"19:00\", \"19:40\")\r\n            add(\"19:45\", \"20:25\")\r\n            add(\"20:35\", \"21:15\")\r\n            add(\"21:20\", \"22:00\")\r\n        }\r\n    }\r\n\r\n    override fun convert(day: Int, nodeCount: Int, infoStr: String, courseList: MutableList<Course>) {\r\n        val node = nodeCount * 2 - 1\r\n        println(infoStr)\r\n        val courseHtml = Jsoup.parse(infoStr)\r\n        val courseName = parseCourseName(infoStr)\r\n        val teacher = courseHtml.getElementsByAttributeValue(\"title\", \"老师\").text().trim()\r\n        val room = courseHtml.getElementsByAttributeValue(\r\n            \"title\",\r\n            \"教室\"\r\n        ).text().trim() + courseHtml.getElementsByAttributeValue(\"title\", \"分组\").text().trim()\r\n        val weekStr = courseHtml.getElementsByAttributeValue(\"title\", \"周次(节次)\").text().run {\r\n            when {\r\n                contains(\"(周)\") -> substringBefore(\"(周)\")\r\n                else -> substringBefore(\"周\")\r\n            }\r\n        }\r\n        val weekList = weekStr.split(',')\r\n        var startWeek = 0\r\n        var endWeek = 0\r\n        var type = 0\r\n        println(weekList.joinToString(\", \"))\r\n        weekList.forEach {\r\n            if (it.contains('-')) {\r\n                val weeks = it.split('-')\r\n                if (weeks.isNotEmpty()) {\r\n                    startWeek = weeks[0].toInt()\r\n                }\r\n                if (weeks.size > 1) {\r\n                    type = when {\r\n                        weeks[1].contains('单') -> 1\r\n                        weeks[1].contains('双') -> 2\r\n                        else -> 0\r\n                    }\r\n                    endWeek = weeks[1].substringBefore('(').toInt()\r\n                }\r\n            } else {\r\n                startWeek = it.substringBefore('(').toInt()\r\n                endWeek = it.substringBefore('(').toInt()\r\n            }\r\n            courseList.add(\r\n                Course(\r\n                    name = courseName, room = room,\r\n                    teacher = teacher, day = day,\r\n                    startNode = node, endNode = node + 1,\r\n                    startWeek = startWeek, endWeek = endWeek,\r\n                    type = type\r\n                )\r\n            )\r\n        }\r\n    }\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val doc = Jsoup.parse(source)\r\n        val kbtable = doc.getElementById(\"kbtable\")\r\n        val trs = kbtable.getElementsByTag(\"tr\")\r\n        try {\r\n            val ths = kbtable.getElementsByTag(\"th\")\r\n            sundayFirst =\r\n                ths.indexOfFirst { it.text().contains(\"星期日\") } < ths.indexOfFirst { it.text().contains(\"星期一\") }\r\n        } catch (e: Exception) {\r\n\r\n        }\r\n        var nodeCount = 0\r\n        for (tr in trs) {\r\n            val tds = tr.getElementsByTag(\"td\")\r\n            if (tds.isEmpty()) {\r\n                continue\r\n            }\r\n            nodeCount++\r\n\r\n            var day = 0\r\n\r\n            for (td in tds) {\r\n                day++\r\n                val divs = td.getElementsByTag(\"div\")\r\n                for (div in divs) {\r\n                    val courseElements = div.getElementsByClass(webTableName)\r\n                    if (courseElements.text().isBlank()) {\r\n                        continue\r\n                    }\r\n                    val courseHtml = courseElements.html()\r\n                    println(courseHtml)\r\n                    var startIndex = 0\r\n                    var splitIndex = courseHtml.indexOf(\"---------------------\")\r\n                    while (splitIndex != -1) {\r\n                        convert(\r\n                            sundayFirstDayMap[day],\r\n                            nodeCount,\r\n                            courseHtml.substring(startIndex, splitIndex),\r\n                            courseList\r\n                        )\r\n                        startIndex = courseHtml.indexOf(\"<br>\", splitIndex) + 4\r\n                        splitIndex = courseHtml.indexOf(\"---------------------\", startIndex)\r\n                    }\r\n                    convert(\r\n                        sundayFirstDayMap[day],\r\n                        nodeCount,\r\n                        courseHtml.substring(startIndex, courseHtml.length),\r\n                        courseList\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n\r\n}\r\n\r\nclass TimeTableBuilder(\r\n    val name: String\r\n) {\r\n    private val timeDetials = mutableListOf<TimeDetail>()\r\n    private var curNode = 1\r\n    fun add(start: String, end: String) {\r\n        add(curNode++, start, end)\r\n    }\r\n    fun add(node: Int, start: String, end: String) {\r\n        timeDetials.add(TimeDetail(node, start, end))\r\n    }\r\n    fun build(): TimeTable {\r\n        return TimeTable(name, timeDetials)\r\n    }\r\n    companion object {\r\n        fun buildTimeTable(name: String, block: TimeTableBuilder.() -> Unit): TimeTable {\r\n            return TimeTableBuilder(name).also(block).build()\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/FSPTParser.kt b/src/main/java/parser/FSPTParser.kt
--- a/src/main/java/parser/FSPTParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/FSPTParser.kt	(date 1745494732198)
@@ -72,11 +72,11 @@
             }
             courseList.add(
                 Course(
-                    name = courseName, room = room,
-                    teacher = teacher, day = day,
+                    name = courseName, day = day,
+                    room = room, teacher = teacher,
                     startNode = node, endNode = node + 1,
                     startWeek = startWeek, endWeek = endWeek,
-                    type = type
+                    type = type,
                 )
             )
         }
Index: src/main/java/parser/HUNNUParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport parser.Parser\r\nimport java.util.*\r\n\r\n\r\nclass HUNNUParser(source: String?) : Parser(source!!) {\r\n\r\n\r\n    /*\r\n    object : WebViewClient() {\r\n        override fun onPageFinished(view: WebView?, url: String?) {\r\n            super.onPageFinished(view, url)\r\n            Log.d(\"page finished\", \"onPageFinished: $url\")\r\n            if (url != null) {\r\n                if (url.contains(\"courseTableForStd.action\")) {\r\n                    //从courseTableForStd.action中获取ids\r\n                    wv.loadUrl(\"javascript:window.local_obj.getIds(document.getElementsByTagName('html')[0].innerHTML)\")\r\n                }\r\n                if (url.contains(\"dataQuery.action?dataType=semesterCalendar\")) {\r\n                    //从dataQuery.action?dataType=semesterCalendar中获取学期信息，让用户选择学期\r\n                    wv.loadUrl(\"javascript:window.local_obj.selectSemester(document.getElementsByTagName('html')[0].innerText)\")\r\n                }\r\n                if (url.contains(\"!courseTable.action\")) {\r\n                    //wv.loadUrl(\"javascript:window.local_obj.showSource(document.getElementsByTagName('body')[0].innerHTML)\")\r\n                    //到达具有课程信息的页面，导入课程\r\n                    wv.loadUrl(\"javascript:window.local_obj.importCourse(document.getElementsByTagName('html')[0].innerHTML)\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n    //进入教务系统\r\n    val jwglHost = \"https://jwglnew.hunnu.edu.cn\"\r\n    wv.loadUrl(jwglHost)\r\n    //导入按钮点击事件，提示用户登录成功后再点击;用户点击导入后跳转courseTableForStd.action获取ids\r\n    findViewById<View>(R.id.btn_import).setOnClickListener {\r\n        wv.loadUrl(\"$jwglHost/eams/courseTableForStd.action\")\r\n    }\r\n\r\n\r\n\r\n    var ids = \"\"\r\n    inner class InJavaScriptLocalObj {\r\n        @JavascriptInterface\r\n        fun showSource(html: String) {\r\n            MaterialAlertDialogBuilder(this@ImportActivity).setMessage(html).show()\r\n        }\r\n\r\n        @JavascriptInterface\r\n        fun importCourse(html: String) {\r\n            //导入\r\n            parseTest(html)\r\n        }\r\n\r\n        @JavascriptInterface\r\n        fun getIds(html: String) {\r\n            //获取ids\r\n            val find = Regex(\"bg\\\\.form\\\\.addInput\\\\(form,\\\"ids\\\",\\\"(\\\\d+)\\\"\\\\);\").find(html)\r\n            //showSource(html)\r\n            Log.d(\"find\", \"selectSemester: $find\")\r\n            if (find != null) {\r\n                ids = find.groupValues[1]\r\n            }\r\n\r\n            //跳转到选择学期\r\n            runOnUiThread {\r\n                wv.loadUrl(\r\n                    \"javascript:var tagId = /<label for=\\\"(.+)\\\" class=\\\"title\\\">学年学期/.exec(document.getElementsByTagName(\\\"html\\\")[0].innerHTML)[1];\"\r\n                            + \"window.location.href = '/eams/dataQuery.action?dataType=semesterCalendar&tagId='+tagId+'&value=&empty=false'\"\r\n                )\r\n            }\r\n        }\r\n\r\n        @JavascriptInterface\r\n        fun selectSemester(html: String) {\r\n            //{id:3,schoolYear:\"2003-2004\",name:\"1\"}\r\n            //解析学期信息，拿到对应的学期和semesterId\r\n            val findAll =\r\n                Regex(\"\\\\{id:(\\\\d+),schoolYear:\\\"(\\\\d+-\\\\d+)\\\",name:\\\"(\\\\d+)\\\"\\\\}\").findAll(html)\r\n            val semesterIds = ArrayList<String>()\r\n            val labels = ArrayList<String>()\r\n            for (result in findAll) {\r\n                semesterIds.add(result.groupValues[1])\r\n                labels.add(\"${result.groupValues[2]}学期${result.groupValues[3]}\")\r\n            }\r\n            //让用户对学期进行选择\r\n            MaterialAlertDialogBuilder(this@ImportActivity)\r\n                .setSingleChoiceItems(\r\n                    labels.toTypedArray(),\r\n                    semesterIds.size - 1\r\n                ) { dialog, which ->\r\n                    val semester = semesterIds[which]\r\n                    dialog.dismiss()\r\n                    Log.d(\"TAG\", \"selectSemester: $semester\")\r\n                    //通过ids和semester两个参数跳转到具有课程信息的页面\r\n                    runOnUiThread {\r\n                        wv.loadUrl(\"javascript:window.location.href = '/eams/courseTableForStd!courseTable.action?ignoreHead=1&setting.kind=std&ids=$ids&semester.id=$semester'\")\r\n                    }\r\n                }.show()\r\n        }\r\n    }\r\n\r\n    */\r\n\r\n    var name: String = \"\"\r\n    var teacher: String = \"\"\r\n    var startNode: Int = -1\r\n    var endNode: Int = 0\r\n    var startWeek: Int = -1\r\n    var endWeek: Int = 0\r\n    var day: Int = 0\r\n    var room: String = \"\"\r\n    var weekStr = \"\"\r\n    val courseList = ArrayList<Course>()\r\n    private lateinit var courseAdd: Course\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n\r\n        val lines = source.split(\"\\n\")\r\n\r\n        val teacherPattern = Regex(\"var actTeachers = \\\\[\\\\{.+name:\\\"(.+)\\\".+\\\\}\\\\]\")\r\n        val activityPattern =\r\n            Regex(\"new TaskActivity\\\\(.+\\\\),.+\\\\),.+,\\\"(.+)\\\",.*,\\\"(.*)\\\",\\\"([10]+).+\\\"\\\\)\")\r\n        val nodePattern = Regex(\"index =(\\\\d+)\\\\*unitCount\\\\+(\\\\d+);\")\r\n\r\n        var isFirst = true\r\n        for (line in lines) {\r\n            var find = teacherPattern.find(line)\r\n            if (find != null) {\r\n                if (isFirst) {\r\n                    isFirst = false\r\n                } else {\r\n                    newCourse()\r\n                    startNode = -1\r\n                    endNode = 0\r\n                }\r\n\r\n                teacher = find.groupValues[1]\r\n                continue\r\n            }\r\n\r\n            find = activityPattern.find(line)\r\n            if (find != null) {\r\n                name = find.groupValues[1].replace(Regex(\"\\\\(.+\\\\)\"), \"\")\r\n                room = find.groupValues[2]\r\n                weekStr = find.groupValues[3]\r\n                continue\r\n            }\r\n\r\n            find = nodePattern.find(line)\r\n            if (find != null) {\r\n                if (startNode == -1) {\r\n                    startNode = find.groupValues[2].toInt() + 1\r\n                }\r\n                endNode = find.groupValues[2].toInt() + 1\r\n                day = find.groupValues[1].toInt() + 1\r\n                continue\r\n            }\r\n        }\r\n\r\n        newCourse()\r\n\r\n        var i = 0\r\n        while (i < courseList.size) {\r\n            var j = i + 1\r\n            var noChange = true\r\n            while (j < courseList.size) {\r\n                if (courseList[i].name == courseList[j].name\r\n                    && courseList[i].room == courseList[j].room\r\n                    && courseList[i].teacher == courseList[j].teacher\r\n                    && courseList[i].day == courseList[j].day\r\n                ) {\r\n                    if (\r\n                        courseList[i].startNode == courseList[j].startNode\r\n                        && courseList[i].endNode == courseList[j].endNode\r\n                    ) {\r\n                        if (courseList[i].endWeek + 1 == courseList[j].startWeek) {\r\n                            courseList[i].endWeek = courseList[j].endWeek\r\n                            courseList.removeAt(j)\r\n                            j--\r\n                            noChange = false\r\n                            continue\r\n                        }\r\n                        if (courseList[i].startWeek - 1 == courseList[j].endWeek) {\r\n                            courseList[i].startWeek = courseList[j].startWeek\r\n                            courseList.removeAt(j)\r\n                            j--\r\n                            noChange = false\r\n                            continue\r\n                        }\r\n                    }\r\n\r\n                    if (courseList[i].startWeek == courseList[j].startWeek\r\n                        && courseList[i].endWeek == courseList[j].endWeek\r\n                    ) {\r\n                        if (courseList[i].endNode + 1 == courseList[j].startNode) {\r\n                            courseList[i].endNode = courseList[j].endNode\r\n                            courseList.removeAt(j)\r\n                            j--\r\n                            noChange = false\r\n                            continue\r\n                        }\r\n                        if (courseList[i].startNode - 1 == courseList[j].endNode) {\r\n                            courseList[i].startNode = courseList[j].startNode\r\n                            courseList.removeAt(j)\r\n                            j--\r\n                            noChange = false\r\n                            continue\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                j++\r\n            }\r\n            if (noChange) {\r\n                i++\r\n            }\r\n        }\r\n\r\n\r\n        return courseList\r\n    }\r\n\r\n    private fun newCourse() {\r\n        var credit = 0f\r\n        val find = Regex(\"<td>$name</td><td>([\\\\d\\\\.]+)</td>\").find(source)\r\n        if (find != null) {\r\n            credit = find.groupValues[1].toFloat()\r\n        }\r\n        startWeek = -1\r\n\r\n        var i = weekStr.length - 1\r\n        while (i > 0 && weekStr[i] == '0') {\r\n            i--\r\n        }\r\n        endWeek = i\r\n        var type = if (i % 2 == 1) 1 else 2\r\n        var j = i\r\n        while (j > 0 && weekStr[j] == '1' && weekStr[j - 1] == '0') {\r\n            j -= 2\r\n        }\r\n        startWeek = j + 2\r\n        while (j > 0 && weekStr[j] == '0') {\r\n            j--\r\n        }\r\n        if (j <= 0) {\r\n            courseAdd = Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type, credit)\r\n            courseList.add(courseAdd)\r\n            return\r\n        }\r\n\r\n        type = 0\r\n        startWeek = -1\r\n        for (index in weekStr.indices) {\r\n            if (weekStr[index] == '1') {\r\n                if (startWeek == -1) {\r\n                    startWeek = index\r\n                    endWeek = index\r\n                } else {\r\n                    endWeek++\r\n                }\r\n            } else {\r\n                if (startWeek != -1) {\r\n                    courseAdd = Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type, credit)\r\n                    courseList.add(courseAdd)\r\n                    startWeek = -1\r\n                }\r\n            }\r\n        }\r\n\r\n        if (startWeek != -1) {\r\n            courseAdd = Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type, credit)\r\n            courseList.add(courseAdd)\r\n            startWeek = -1\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/HUNNUParser.kt b/src/main/java/parser/HUNNUParser.kt
--- a/src/main/java/parser/HUNNUParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/HUNNUParser.kt	(date 1745507183656)
@@ -5,7 +5,7 @@
 import java.util.*
 
 
-class HUNNUParser(source: String?) : Parser(source!!) {
+class HUNNUParser(source: String?) : Parser() {
 
 
     /*
@@ -246,7 +246,7 @@
             j--
         }
         if (j <= 0) {
-            courseAdd = Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type, credit)
+            courseAdd = Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type, credit,)
             courseList.add(courseAdd)
             return
         }
@@ -263,7 +263,7 @@
                 }
             } else {
                 if (startWeek != -1) {
-                    courseAdd = Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type, credit)
+                    courseAdd = Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type, credit,)
                     courseList.add(courseAdd)
                     startWeek = -1
                 }
@@ -271,7 +271,7 @@
         }
 
         if (startWeek != -1) {
-            courseAdd = Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type, credit)
+            courseAdd = Course(name, day, room, teacher, startNode, endNode, startWeek, endWeek, type, credit,)
             courseList.add(courseAdd)
             startWeek = -1
         }
Index: src/main/java/parser/CTGUParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\nimport java.io.File\r\nimport java.util.regex.Pattern\r\nimport kotlin.io.path.readText\r\n\r\n\r\nclass CTGUParser(source:String) : Parser(source) {\r\n    private val chineseDayMap = HashMap<String, Int>()\r\n    private val courseTypeMap = HashMap<String, Int>()\r\n    private val courseClockStartMap = HashMap<String, String>()\r\n    private val courseClockEndMap = HashMap<String, String>()\r\n\r\n    private fun iniChineseDayMap(){\r\n        chineseDayMap[\"星期一\"] = 1\r\n        chineseDayMap[\"星期二\"] = 2\r\n        chineseDayMap[\"星期三\"] = 3\r\n        chineseDayMap[\"星期四\"] = 4\r\n        chineseDayMap[\"星期五\"] = 5\r\n        chineseDayMap[\"星期六\"] = 6\r\n        chineseDayMap[\"星期日\"] = 7\r\n    }\r\n\r\n    private fun iniCourseTypeMap(){\r\n        courseTypeMap[\"连续周\"] = 0\r\n        courseTypeMap[\"单周\"] = 1\r\n        courseTypeMap[\"双周\"] = 2\r\n    }\r\n\r\n    private fun iniCourseClockStartMap(){\r\n        // 上午\r\n        courseClockStartMap[\"1\"] = \"08:00\"\r\n        courseClockStartMap[\"2\"] = \"08:50\"\r\n        courseClockStartMap[\"3\"] = \"09:55\"\r\n        courseClockStartMap[\"4\"] = \"10:45\"\r\n        courseClockStartMap[\"5\"] = \"11:35\"\r\n        // 下午\r\n        courseClockStartMap[\"6\"] = \"14:20\"\r\n        courseClockStartMap[\"7\"] = \"15:10\"\r\n        courseClockStartMap[\"8\"] = \"16:15\"\r\n        courseClockStartMap[\"9\"] = \"17:05\"\r\n        // 晚上\r\n        courseClockStartMap[\"10\"] = \"19:00\"\r\n        courseClockStartMap[\"11\"] = \"19:50\"\r\n        courseClockStartMap[\"12\"] = \"20:40\"\r\n    }\r\n\r\n    private fun iniCourseClockEndMap(){\r\n        // 上午\r\n        courseClockEndMap[\"1\"] = \"08:45\"\r\n        courseClockEndMap[\"2\"] = \"09:35\"\r\n        courseClockEndMap[\"3\"] = \"10:40\"\r\n        courseClockEndMap[\"4\"] = \"11:30\"\r\n        courseClockEndMap[\"5\"] = \"12:20\"\r\n        // 下午\r\n        courseClockEndMap[\"6\"] = \"15:05\"\r\n        courseClockEndMap[\"7\"] = \"15:55\"\r\n        courseClockEndMap[\"8\"] = \"17:00\"\r\n        courseClockEndMap[\"9\"] = \"17:50\"\r\n        // 晚上\r\n        courseClockEndMap[\"10\"] = \"19:45\"\r\n        courseClockEndMap[\"11\"] = \"20:35\"\r\n        courseClockEndMap[\"12\"] = \"21:25\"\r\n    }\r\n\r\n    init {\r\n        iniChineseDayMap()\r\n        iniCourseTypeMap()\r\n        iniCourseClockStartMap()\r\n        iniCourseClockEndMap()\r\n    }\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        // 获取文件所在目录 Path\r\n        val file = File(source)\r\n        val directory = file.getParentFile().toPath()\r\n        // 查找课表文件\r\n        val courseFileName = \"home.html\"\r\n        val courseFilePath = directory.resolve(courseFileName)\r\n        // 新建课程列表\r\n        val courseList = arrayListOf<Course>()\r\n        // 转换课程源文件\r\n        val doc = Jsoup.parse(courseFilePath.readText())\r\n        // 页面共有四个tbody标签，第四个是包含课程条目的课程表主体部分\r\n        val courseTable = doc.select(\"tbody\")[3]\r\n\r\n        val rows = courseTable.select(\"tr\")\r\n        for(courseRow in rows) {\r\n            // 共计11个数据，其中 bjid 不知道是什么\r\n            // kcbf:课程编号 kcmc:课程名称 bjmc:班级名称 kcxf:课程学分 jdid:阶段id（比如一周两次课，第一次就是阶段1，第二次就是阶段2）\r\n            // rkjsxm:任课教师姓名 ksz:课程阶段 sjms:课程时间 dz:地址 xkrs:选课人数\r\n            val courseName = courseRow.select(\"td[field=kcmc]\")[0].children().first().text()\r\n\r\n            // courseTime 的形式类似 “连续周 星期二 晚上第10节-晚上第11节”\r\n            val courseTime = courseRow.select(\"td[field=sjms]\")[0].children().first().text()\r\n            val timeDetails = courseTime.split(' ')\r\n            // 获取单双周\r\n            val courseType = courseTypeMap[timeDetails[0]]\r\n            // 获取上课的星期几\r\n            val courseDay = chineseDayMap[timeDetails[1]]\r\n            // 获取上课的节数\r\n            // 正则表达式，只匹配数字\r\n            val pattern = Pattern.compile(\"\\\\d+\")\r\n            val matcher = pattern.matcher(timeDetails[2])\r\n            matcher.find()\r\n            val startIndex = matcher.group()\r\n            matcher.find()\r\n            val endIndex = matcher.group()\r\n            val startNode = startIndex.toInt()\r\n            val endNode = endIndex.toInt()\r\n            val startTime = courseClockStartMap[startIndex]\r\n            val endTime = courseClockEndMap[endIndex]\r\n\r\n            // 课程起始周和结束周\r\n            val courseWeeks = courseRow.select(\"td[field=ksz]\")[0].children().first().text().split('-')\r\n            val startWeek = courseWeeks[0].toInt()\r\n            val endWeek = courseWeeks[1].toInt()\r\n\r\n            // 课程学分\r\n            val credit = courseRow.select(\"td[field=kcxf]\")[0].children().first().text().toFloat()\r\n\r\n            // 老师\r\n            val teacher = courseRow.select(\"td[field=rkjsxm]\")[0].children().first().text()\r\n\r\n            // 教室\r\n            val room = courseRow.select(\"td[field=dz]\")[0].children().first().text()\r\n\r\n            // 添加此课程到课程列表中\r\n            courseList.add(\r\n                Course(\r\n                    name = courseName,\r\n                    day = courseDay ?: 0,\r\n                    room = room,\r\n                    teacher = teacher,\r\n                    startNode = startNode,\r\n                    endNode = endNode,\r\n                    startWeek = startWeek,\r\n                    endWeek = endWeek,\r\n                    type = courseType ?: 0,\r\n                    credit = credit,\r\n                    startTime = \"$startTime\",\r\n                    endTime = \"$endTime\",\r\n                )\r\n            )\r\n        }\r\n\r\n        return courseList\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/CTGUParser.kt b/src/main/java/parser/CTGUParser.kt
--- a/src/main/java/parser/CTGUParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/CTGUParser.kt	(date 1745507183756)
@@ -8,7 +8,7 @@
 import kotlin.io.path.readText
 
 
-class CTGUParser(source:String) : Parser(source) {
+class CTGUParser(source:String) : Parser() {
     private val chineseDayMap = HashMap<String, Int>()
     private val courseTypeMap = HashMap<String, Int>()
     private val courseClockStartMap = HashMap<String, String>()
@@ -142,7 +142,7 @@
                     type = courseType ?: 0,
                     credit = credit,
                     startTime = "$startTime",
-                    endTime = "$endTime",
+                    endTime = "$endTime",,
                 )
             )
         }
Index: src/main/java/parser/BNUZParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport Common\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\nimport java.util.regex.Pattern\r\n\r\n// 北京师范大学珠海分校\r\nclass BNUZParser(source: String) : Parser(source) {\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n\r\n        val nodePattern = \"\\\\d+\"\r\n        val weekPattern1 = Pattern.compile(\"(\\\\d+)-(\\\\d+)\")\r\n        val weekPattern2 = Pattern.compile(\"(\\\\d+)\")\r\n\r\n        val doc = Jsoup.parse(source)\r\n\r\n        val table1 = doc.getElementById(\"table1\")\r\n        val trs = table1.getElementsByTag(\"tr\")\r\n\r\n        var node = 0\r\n        var teacher = \"\"\r\n        var room = \"\"\r\n        var step = 1\r\n        var startWeek = 0\r\n        var endWeek = 0\r\n        var type = 0\r\n        for (tr in trs) {\r\n            var countFlag = false\r\n            var countDay = 1\r\n            val tds = tr.getElementsByTag(\"td\")\r\n            for (td in tds) {\r\n                val courseValue = td.text().trim()\r\n                if (Common.otherHeader.contains(courseValue)) {\r\n                    //other data\r\n                    continue\r\n                }\r\n                if (courseValue.isEmpty()) {\r\n                    if (countFlag) {\r\n                        countDay++\r\n                    }\r\n                    continue\r\n                }\r\n                if (Pattern.matches(nodePattern, courseValue)) {\r\n                    node = courseValue.toInt()\r\n                    countFlag = true\r\n                    continue\r\n                }\r\n\r\n                val infos = td.html().substringAfter(\"</span>\").substringBeforeLast(\"<br>\").split(\"<br>\")\r\n\r\n                val courseName = infos[0]\r\n\r\n                for (i in 1 until infos.size step 2) {\r\n                    if (i + 1 >= infos.size) continue\r\n                    if (!infos[i].contains('{') || !infos[i].contains('}')) continue\r\n                    teacher = infos[i].substringBefore('{')\r\n                    room = infos[i + 1]\r\n                    step = room.substringAfterLast('(').substringBeforeLast('节').toInt()\r\n                    val weekList = infos[i].substringAfter('{').substringBefore('}').split(',')\r\n                    weekList.forEach {\r\n                        if (it.contains('-')) {\r\n                            val matcher = weekPattern1.matcher(it)\r\n                            matcher.find()\r\n                            startWeek = matcher.group(1).toInt()\r\n                            endWeek = matcher.group(2).toInt()\r\n\r\n                            type = when {\r\n                                it.contains('单') -> 1\r\n                                it.contains('双') -> 2\r\n                                else -> 0\r\n                            }\r\n                        } else {\r\n                            val matcher = weekPattern2.matcher(it)\r\n                            matcher.find()\r\n                            startWeek = matcher.group(1).toInt()\r\n                            endWeek = startWeek\r\n                        }\r\n\r\n                        courseList.add(\r\n                            Course(\r\n                                name = courseName, room = room,\r\n                                teacher = teacher, day = countDay,\r\n                                startNode = node, endNode = node + step - 1,\r\n                                startWeek = startWeek, endWeek = endWeek,\r\n                                type = type\r\n                            )\r\n                        )\r\n                    }\r\n                }\r\n                countDay++\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/BNUZParser.kt b/src/main/java/parser/BNUZParser.kt
--- a/src/main/java/parser/BNUZParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/BNUZParser.kt	(date 1745507183606)
@@ -6,7 +6,7 @@
 import java.util.regex.Pattern
 
 // 北京师范大学珠海分校
-class BNUZParser(source: String) : Parser(source) {
+class BNUZParser(source: String) : Parser() {
 
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
@@ -81,11 +81,11 @@
 
                         courseList.add(
                             Course(
-                                name = courseName, room = room,
-                                teacher = teacher, day = countDay,
+                                name = courseName, day = countDay,
+                                room = room, teacher = teacher,
                                 startNode = node, endNode = node + step - 1,
                                 startWeek = startWeek, endWeek = endWeek,
-                                type = type
+                                type = type,
                             )
                         )
                     }
Index: src/main/java/parser/SYSUParser2024.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * @author: D5error\r\n * @GitHub: https://www.github.com/D5error\r\n * @Date: 2024.08.12\r\n */\r\npackage parser\r\n\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\nimport org.jsoup.nodes.Element as Element\r\n\r\nclass SYSUParser2024(source: String) : Parser(source) {\r\n    override fun generateCourseList(): List<Course> {\r\n        val table = Jsoup.parse(source).getElementById(\"table-bot\")\r\n        var courseList = getCourseInfo(table)\r\n        return courseList\r\n    }\r\n    private fun getCourseInfo(table: Element): ArrayList<Course> {\r\n        val dayColspan = getDayColspan(table)\r\n        var timeList = getTimeList(table)\r\n        var ret = ArrayList<Course>()\r\n        var colspanThreshold = getColspanThreshold(dayColspan)\r\n        var tbody = table.getElementsByTag(\"tbody\").first()\r\n//        每个tr标签的从第二个开始td标签都是课程信息\r\n        var trElements = tbody.getElementsByTag(\"tr\")\r\n//        遍历课程表的列，即第几节\r\n        for ((index, tr) in trElements.withIndex()) {\r\n            var section = index + 1\r\n            var currentColspan = 0\r\n            var tdElements = tr.getElementsByTag(\"td\")\r\n            tdElements.removeAt(0) // 删除第一个td标签元素\r\n//            遍历课程表的行，即第几行\r\n            for (td in tdElements) {\r\n                currentColspan += td.attr(\"colspan\").toInt()\r\n                var currentDay = getCurrentDay(currentColspan, colspanThreshold)\r\n                if(td.getElementsByTag(\"span\").isEmpty()) {\r\n                    continue\r\n                }\r\n                var course = Course(\r\n                    name = getCourseName(td),\r\n                    day = currentDay,\r\n                    room = getRoom(td),\r\n                    teacher = getTeacher(td),\r\n                    startNode = section,\r\n                    endNode = getEndNode(td, section),\r\n                    startWeek = getStartWeek(td),\r\n                    endWeek = getEndWeek(td),\r\n                    startTime = getStartTime(timeList, section),\r\n                    endTime = getEndTime(timeList, getEndNode(td, section)),\r\n                    type = 0 // 好像只有每周的情况\r\n                )\r\n                ret.add(course)\r\n            }\r\n        }\r\n        return ret\r\n    }\r\n    private fun getEndTime(timeList: ArrayList<String>, section: Int): String {\r\n        var ret = timeList[section - 1].split(\"~\")[1]\r\n        return ret\r\n    }\r\n    private fun getStartTime(timeList: ArrayList<String>, section: Int): String {\r\n        var ret = timeList[section - 1].split(\"~\")[0]\r\n        return ret\r\n    }\r\n    private fun getTimeList(table: Element): ArrayList<String> {\r\n        var tbody = table.getElementsByTag(\"tbody\").first()\r\n//        每个tr标签的第一个td标签就是时间信息\r\n        var trElements = tbody.getElementsByTag(\"tr\")\r\n        var ret = ArrayList<String>()\r\n        for (tr in trElements) {\r\n            var duration = tr.getElementsByTag(\"td\").first().getElementsByTag(\"div\")[1].text()\r\n            ret.add(duration)\r\n        }\r\n        return ret\r\n    }\r\n    private fun getCourseName(td: Element): String {\r\n        var ret = td.getElementsByTag(\"span\")[1].text()\r\n        ret = ret.substring(5, ret.length - 1)\r\n        return ret\r\n    }\r\n    private fun getRoom(td: Element): String {\r\n        var ret = td.getElementsByTag(\"span\")[3].text()\r\n        ret = ret.substring(0, ret.length - 1)\r\n        return ret\r\n    }\r\n    private fun getTeacher(td: Element): String {\r\n        var ret = td.getElementsByTag(\"span\")[2].text()\r\n        ret = ret.substring(0, ret.length - 1)\r\n        return ret\r\n    }\r\n    private fun getEndNode(td: Element, startNode: Int): Int {\r\n        var ret = startNode + td.attr(\"rowspan\").toInt() - 1\r\n        return ret\r\n    }\r\n    private fun getStartWeek(td: Element): Int {\r\n        var ret = td.getElementsByTag(\"span\")[0].text().split(\"-\")[0].toInt()\r\n        return ret\r\n    }\r\n    private fun getEndWeek(td: Element): Int {\r\n        var ret = td.getElementsByTag(\"span\")[0].text().split(\"-\")[1].split(\"每周\")[0].toInt()\r\n        return ret\r\n    }\r\n    private fun getCurrentDay(currentColspan: Int, colspanThreshold: ArrayList<Int>): Int {\r\n        if(currentColspan <= colspanThreshold[0]){\r\n            return 1\r\n        }\r\n        else if(currentColspan <= colspanThreshold[1]){\r\n            return 2\r\n        }\r\n        else if(currentColspan <= colspanThreshold[2]){\r\n            return 3\r\n        }\r\n        else if(currentColspan <= colspanThreshold[3]){\r\n            return 4\r\n        }\r\n        else if(currentColspan <= colspanThreshold[4]){\r\n            return 5\r\n        }\r\n        else if(currentColspan <= colspanThreshold[5]){\r\n            return 6\r\n        }\r\n        else{\r\n            return 7\r\n        }\r\n    }\r\n    private fun getColspanThreshold(dayColspan: ArrayList<Int>): ArrayList<Int> {\r\n        var ret = ArrayList<Int>()\r\n        for ((index, colspan) in dayColspan.withIndex()) {\r\n            ret.add(colspan)\r\n            if(index >= 1){\r\n                ret[index] += ret[index-1]\r\n            }\r\n        }\r\n        return ret\r\n    }\r\n    private fun getDayColspan(table: Element): ArrayList<Int> {\r\n        val thElements = table.getElementsByTag(\"th\")\r\n        val ret = ArrayList<Int>()\r\n        for (thElement in thElements) {\r\n            val colspan = thElement.attr(\"colspan\")\r\n            if(colspan.isNotEmpty()){\r\n                ret.add(colspan.toInt())\r\n            }\r\n        }\r\n        return ret\r\n    }\r\n    override fun getTableName(): String {\r\n        val title = Jsoup.parse(source).getElementsByTag(\"h1\").first().text()\r\n        return title\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/SYSUParser2024.kt b/src/main/java/parser/SYSUParser2024.kt
--- a/src/main/java/parser/SYSUParser2024.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/SYSUParser2024.kt	(date 1745507183748)
@@ -9,7 +9,7 @@
 import org.jsoup.Jsoup
 import org.jsoup.nodes.Element as Element
 
-class SYSUParser2024(source: String) : Parser(source) {
+class SYSUParser2024(source: String) : Parser() {
     override fun generateCourseList(): List<Course> {
         val table = Jsoup.parse(source).getElementById("table-bot")
         var courseList = getCourseInfo(table)
@@ -45,9 +45,10 @@
                     endNode = getEndNode(td, section),
                     startWeek = getStartWeek(td),
                     endWeek = getEndWeek(td),
+                    type = 0,
                     startTime = getStartTime(timeList, section),
                     endTime = getEndTime(timeList, getEndNode(td, section)),
-                    type = 0 // 好像只有每周的情况
+                    // 好像只有每周的情况
                 )
                 ret.add(course)
             }
Index: src/main/java/parser/HNIUParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser\r\n\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\n\r\n// 湖南信息职业技术学院\r\nclass HNIUParser(source: String) : Parser(source) {\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val doc = Jsoup.parse(source, \"utf-8\")\r\n        val tBody = doc.getElementsByAttributeValue(\"bordercolordark\", \"#FFFFFF\")[0].getElementsByTag(\"tbody\")[0]\r\n        val trs = tBody.getElementsByTag(\"tr\")\r\n\r\n        for (tr in trs) {\r\n            val tds = tr.getElementsByTag(\"td\")\r\n            var day = 0\r\n            for (td in tds) {\r\n                if (td.attr(\"align\") == \"center\") {\r\n                    continue\r\n                }\r\n                if (td.attr(\"valign\") == \"top\") {\r\n                    day++\r\n                    val courseSource = td.html().split(\"<br>\")\r\n                    if (courseSource.isEmpty()) continue\r\n                    if (courseSource.size <= 4) {\r\n                        if (courseSource[0].isBlank()) continue\r\n                        convertHNIU(day, courseSource, courseList)\r\n                    } else {\r\n                        var startIndex = 1\r\n                        courseSource.forEachIndexed { index, s ->\r\n                            if (s.contains('[') && s.contains(']') && s.contains('周') && s.contains('节')) {\r\n                                if (index - 1 != 0) {\r\n                                    convertHNIU(day, courseSource.subList(startIndex - 1, index - 1), courseList)\r\n                                    startIndex = index\r\n                                }\r\n                            }\r\n                            if (index == courseSource.size - 1) {\r\n                                convertHNIU(day, courseSource.subList(startIndex - 1, index), courseList)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n\r\n    private fun convertHNIU(day: Int, courseSource: List<String>, courseList: MutableList<Course>) {\r\n        var startNode = 0\r\n        var step = 0\r\n        var startWeek = 0\r\n        var endWeek = 0\r\n\r\n        val courseName = courseSource[0].split(' ')[0]\r\n        val teacher = courseSource[1].split(' ')[0]\r\n        val room = if (courseSource.size > 2 && courseSource[2].trim().isNotBlank()) {\r\n            courseSource[2].trim()\r\n        } else {\r\n            val tmp = courseSource[1].split(' ')\r\n            tmp[tmp.size - 1]\r\n        }\r\n        val timeStr = courseSource[1].substringAfter('[').substringBeforeLast('节')\r\n        val weekList = timeStr.split(\"周][\")[0].split(\", \", \",\")\r\n        val nodeStr = timeStr.split(\"周][\")[1]\r\n\r\n        val nodeList = nodeStr.split('-')\r\n        if (nodeList.size == 1) {\r\n            startNode = nodeList[0].toInt()\r\n            step = 1\r\n        } else {\r\n            startNode = nodeList[0].toInt()\r\n            step = nodeList[1].toInt() - startNode + 1\r\n        }\r\n\r\n        weekList.forEach {\r\n            if (it.contains('-')) {\r\n                val weeks = it.split('-')\r\n                if (weeks.isNotEmpty()) {\r\n                    startWeek = weeks[0].toInt()\r\n                }\r\n                if (weeks.size > 1) {\r\n                    endWeek = weeks[1].toInt()\r\n                }\r\n            } else {\r\n                startWeek = it.toInt()\r\n                endWeek = it.toInt()\r\n            }\r\n\r\n            courseList.add(\r\n                Course(\r\n                    name = courseName, room = room,\r\n                    teacher = teacher, day = day,\r\n                    startNode = startNode, endNode = startNode + step - 1,\r\n                    startWeek = startWeek, endWeek = endWeek,\r\n                    type = 0\r\n                )\r\n            )\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/HNIUParser.kt b/src/main/java/parser/HNIUParser.kt
--- a/src/main/java/parser/HNIUParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/HNIUParser.kt	(date 1745507183821)
@@ -4,7 +4,7 @@
 import org.jsoup.Jsoup
 
 // 湖南信息职业技术学院
-class HNIUParser(source: String) : Parser(source) {
+class HNIUParser(source: String) : Parser() {
 
     override fun generateCourseList(): List<Course> {
         val courseList = arrayListOf<Course>()
@@ -89,11 +89,11 @@
 
             courseList.add(
                 Course(
-                    name = courseName, room = room,
-                    teacher = teacher, day = day,
+                    name = courseName, day = day,
+                    room = room, teacher = teacher,
                     startNode = startNode, endNode = startNode + step - 1,
                     startWeek = startWeek, endWeek = endWeek,
-                    type = 0
+                    type = 0,
                 )
             )
         }
Index: src/main/java/parser/YGUParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser\r\n\r\nimport bean.Course\r\nimport com.google.gson.Gson\r\nimport com.google.gson.JsonParser\r\nimport main.java.bean.TimeDetail\r\nimport main.java.exception.GetTermDataErrorException\r\nimport org.jsoup.Connection.Method\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\n\r\n/**\r\n * 阳光学院(大学)教务\r\n * 系统登录地址：https://ygu.edu.cn/user/login\r\n * 登陆账号并获取 cookie 即可\r\n * 若有适配不完善，可在本人fork的项目下提issue\r\n *\r\n *\r\n * 登陆接口 POST https://ygu.edu.cn/api/auth/login/slide/v1\r\n * {\r\n *     \"redirect\": \"/\",\r\n *     \"password\": \"0495ef******\",\r\n *     \"username\": \"qgtr****\",\r\n *     \"captchaVO\": {\r\n *         \"captchaVerification\": \"****U/58=\"\r\n *     }\r\n * }\r\n * 接口返回\r\n * {\r\n *     \"code\": 0,\r\n *     \"msg\": \"请求成功\",\r\n *     \"data\": {\r\n *         \"access_token\": \"ff0****04\", // 取这个值作为 cookie 传入\r\n *         \"expires_in\": **\r\n *     }\r\n * }\r\n *\r\n * @author gouzil\r\n * @date 2024/2/16\r\n */\r\nclass YGUParser : Parser {\r\n    // 学期时间\r\n    private var _semesterYear: String = \"\"\r\n\r\n    // 学号\r\n    private var _studentsNumber: String = \"\"\r\n\r\n    // 最大课程数\r\n    private var _nodes = 12\r\n    private var _tableName = \"未命名\"\r\n\r\n        // 学生姓名\r\n    private var _nickName: String = \"\"\r\n    private val _cookies = HashMap<String, String>()\r\n    private val _headers: HashMap<String, String> = hashMapOf(\r\n        \"User-Agent\" to \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5111.0 Safari/537.36\",\r\n        \"content-Type\" to \"application/json;charset=UTF-8\"\r\n    )\r\n\r\n    private val _courseDataArrayList = ArrayList<courseData>()\r\n\r\n    companion object {\r\n        private const val _baseUrl = \"https://ygu.edu.cn/api/\"\r\n    }\r\n\r\n    // 从教务系统获取当前学期 (优先使用这个)\r\n    constructor(cookie: String) : super(\"\") {\r\n        _cookies[\"Access-Token\"] = cookie\r\n        initSemesterYearData()\r\n        initUserData()\r\n        initCoursesData()\r\n    }\r\n\r\n    // 传入学期时间\r\n    constructor(cookie: String, semesterYear: String) : super(\"\") {\r\n        _cookies[\"Access-Token\"] = cookie\r\n        this._semesterYear = semesterYear\r\n        initUserData()\r\n        initCoursesData()\r\n        this._tableName = semesterYear\r\n    }\r\n\r\n    private fun initSemesterYearData() {\r\n        // 学期时间列表\r\n        val semesterYearListJsonStr = Jsoup.connect(_baseUrl + \"jw/xlgl/listR\")\r\n            .headers(this._headers)\r\n            .method(Method.POST)\r\n            .cookies(this._cookies)\r\n            .requestBody(\"{}\")\r\n            .ignoreContentType(true)\r\n            .execute()\r\n            .body()\r\n        val semesterYearListJson = JsonParser.parseString(semesterYearListJsonStr).asJsonObject\r\n        if (semesterYearListJson[\"code\"].asInt != 0) {\r\n            throw GetTermDataErrorException(\"获取学期时间列表失败\")\r\n        }\r\n        // 这里取当前学期时间\r\n        this._semesterYear = semesterYearListJson[\"data\"].asJsonArray[0].asJsonObject[\"xqjc\"].asString\r\n        this._tableName = semesterYearListJson[\"data\"].asJsonArray[0].asJsonObject[\"xqqc\"].asString\r\n    }\r\n\r\n    private fun initUserData() {\r\n        // 获取用户基本信息\r\n        val userInfoJsonStr = Jsoup.connect(_baseUrl + \"system/user/getInfo\")\r\n            .headers(this._headers)\r\n            .method(Method.GET)\r\n            .cookies(this._cookies)\r\n            .ignoreContentType(true)\r\n            .execute()\r\n            .body()\r\n\r\n        val userInfoJson = JsonParser.parseString(userInfoJsonStr).asJsonObject\r\n        if (userInfoJson[\"code\"].asInt != 0) {\r\n            throw GetTermDataErrorException(\"获取用户基本信息失败\")\r\n        }\r\n        this._studentsNumber = userInfoJson[\"user\"].asJsonObject[\"studentsNumber\"].asString\r\n        this._nickName = userInfoJson[\"user\"].asJsonObject[\"nickName\"].asString\r\n    }\r\n\r\n    private fun initCoursesData() {\r\n        // 获取课程列表\r\n        val requestData = HashMap<String, String?>()\r\n        requestData[\"xm\"] = _nickName\r\n        requestData[\"xh\"] = _studentsNumber\r\n        requestData[\"xqjc\"] = _semesterYear\r\n        val coursesDataJsonStr = Jsoup.connect(_baseUrl + \"jw/kpkglkcb/student\").method(Method.POST)\r\n            .headers(this._headers)\r\n            .cookies(this._cookies)\r\n            .requestBody(Gson().toJson(requestData))\r\n            .ignoreContentType(true)\r\n            .execute()\r\n            .body()\r\n\r\n        val coursesDataJson = JsonParser.parseString(coursesDataJsonStr).asJsonObject\r\n        if (coursesDataJson[\"code\"].asInt != 0) {\r\n            throw GetTermDataErrorException(\"获取课程信息失败\")\r\n        }\r\n        for (course in coursesDataJson[\"data\"].asJsonArray) {\r\n            for (weekList in course.asJsonObject[\"weekList\"].asJsonArray) {\r\n                for (kcbVoList in weekList.asJsonObject[\"kcbVoList\"].asJsonArray) {\r\n                    this._courseDataArrayList.add(\r\n                        Gson().fromJson(\r\n                            kcbVoList.asJsonObject.toString(),\r\n                            courseData::class.java\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = ArrayList<Course>()\r\n        // 解析数据\r\n        for (course in this._courseDataArrayList) {\r\n            // 截取第几节课\r\n            val classNode = course.jcs.split(\",\")\r\n            val startNode = classNode[0].toInt()\r\n            val endNode = classNode[classNode.size - 1].toInt()\r\n            // 截取周数\r\n            val weekList = course.zcs.split(\",\")\r\n            val startWeek = weekList[0].toInt()\r\n            val endWeek = weekList[weekList.size - 1].toInt()\r\n            // 单双周\r\n            var type = 0\r\n            if (course.dsz == \"单\") {\r\n                type = 1\r\n            } else if (course.dsz == \"双\") {\r\n                type = 2\r\n            }\r\n            // 区分南北校区\r\n            val southCampus = campusSelect(course.jsmc)\r\n\r\n            courseList.add(\r\n                Course(\r\n                    course.kcmc,\r\n                    course.xq,\r\n                    course.jsmc.replace(\" \", \"\"),\r\n                    course.rkls,\r\n                    startNode,\r\n                    endNode,\r\n                    startWeek,\r\n                    endWeek,\r\n                    type,\r\n                    0f,  // 没有学分数据\r\n                    \"\",\r\n                    defaultTimeList(southCampus, startNode).startTime,\r\n                    defaultTimeList(southCampus, endNode).endTime\r\n                )\r\n            )\r\n        }\r\n        return courseList\r\n    }\r\n\r\n    // 最大课程数\r\n    override fun getNodes(): Int {\r\n        return _nodes\r\n    }\r\n\r\n    // 表名\r\n    override fun getTableName(): String {\r\n        return _tableName\r\n    }\r\n\r\n    /**\r\n     * 这个有点问题(处理无效)可能后续不在处理南北校区, 直接重写`generateTimeTable`方法\r\n     * @param southCampus 是否为南校区(仅有南校区和北校区)\r\n     * @param node        第几节课\r\n     */\r\n    private fun defaultTimeList(southCampus: Boolean, node: Int): TimeDetail {\r\n        return when (node) {\r\n            1 -> TimeDetail(1, \"08:10\", \"08:55\")\r\n            2 -> TimeDetail(2, \"09:00\", \"09:45\")\r\n            3 -> if (southCampus) TimeDetail(3, \"10:05\", \"10:50\") else TimeDetail(3, \"10:20\", \"11:05\")\r\n            4 -> if (southCampus) TimeDetail(4, \"10:55\", \"11:40\") else TimeDetail(4, \"11:15\", \"12:00\")\r\n            5 -> TimeDetail(5, \"14:00\", \"14:45\")\r\n            6 -> TimeDetail(6, \"14:50\", \"15:35\")\r\n            7 -> TimeDetail(7, \"15:55\", \"16:40\")\r\n            8 -> TimeDetail(8, \"16:45\", \"17:30\")\r\n            9 -> TimeDetail(9, \"18:30\", \"19:15\")\r\n            10 -> TimeDetail(10, \"19:20\", \"20:05\")\r\n            11 -> TimeDetail(11, \"20:10\", \"20:55\")\r\n            else -> TimeDetail(-1, \"00:00\", \"00:00\")\r\n        }\r\n    }\r\n\r\n    // 南校区返回true, 北校区返回false\r\n    private fun campusSelect(room: String): Boolean {\r\n        return room.contains(\"文科楼\") || room.contains(\"商学楼\") || room.contains(\"音艺楼\") ||\r\n                room.contains(\"行政楼\") || room.contains(\"操场\")\r\n    }\r\n\r\n\r\n    // 这里的名称与json请求基本保持一致\r\n    data class courseData(\r\n        // 星期\r\n        var xq: Int,\r\n        // 周次\r\n        var zcs: String,\r\n        // 节次\r\n        var jcs: String,\r\n        // 单双周\r\n        var dsz: String,\r\n        // 任课老师\r\n        var rkls: String,\r\n        // 课程名称\r\n        var kcmc: String,\r\n        // 教室名称\r\n        var jsmc: String,\r\n    )\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/YGUParser.kt b/src/main/java/parser/YGUParser.kt
--- a/src/main/java/parser/YGUParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/YGUParser.kt	(date 1745507183517)
@@ -64,7 +64,7 @@
     }
 
     // 从教务系统获取当前学期 (优先使用这个)
-    constructor(cookie: String) : super("") {
+    constructor(cookie: String) {
         _cookies["Access-Token"] = cookie
         initSemesterYearData()
         initUserData()
@@ -72,7 +72,7 @@
     }
 
     // 传入学期时间
-    constructor(cookie: String, semesterYear: String) : super("") {
+    constructor(cookie: String, semesterYear: String) {
         _cookies["Access-Token"] = cookie
         this._semesterYear = semesterYear
         initUserData()
@@ -182,10 +182,8 @@
                     startWeek,
                     endWeek,
                     type,
-                    0f,  // 没有学分数据
-                    "",
-                    defaultTimeList(southCampus, startNode).startTime,
-                    defaultTimeList(southCampus, endNode).endTime
+                    startTime = defaultTimeList(southCampus, startNode).startTime,  // 没有学分数据
+                    endTime = defaultTimeList(southCampus, endNode).endTime,
                 )
             )
         }
Index: .idea/dictionaries/project.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dictionaries/project.xml b/.idea/dictionaries/project.xml
new file mode 100644
--- /dev/null	(date 1745495048199)
+++ b/.idea/dictionaries/project.xml	(date 1745495048199)
@@ -0,0 +1,10 @@
+<component name="ProjectDictionaryState">
+  <dictionary name="project">
+    <words>
+      <w>jxbmc</w>
+      <w>kcmc</w>
+      <w>ownload</w>
+      <w>rograms</w>
+    </words>
+  </dictionary>
+</component>
\ No newline at end of file
Index: src/main/java/parser/qz/QzParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser.qz\r\n\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\n\r\nopen class QzParser(source: String) : Parser(source) {\r\n\r\n    private val sundayFirstDayMap = arrayOf(0, 7, 1, 2, 3, 4, 5, 6)\r\n    private var sundayFirst = false\r\n    open val webTableName = \"kbcontent\"\r\n\r\n    open fun parseCourseName(infoStr: String): String {\r\n        return Jsoup.parse(infoStr.substringBefore(\"<font\").trim()).text()\r\n    }\r\n\r\n    open fun convert(day: Int, nodeCount: Int, infoStr: String, courseList: MutableList<Course>) {\r\n        val node = nodeCount * 2 - 1\r\n        val courseHtml = Jsoup.parse(infoStr)\r\n        val courseName = parseCourseName(infoStr)\r\n        val teacher = courseHtml.getElementsByAttributeValue(\"title\", \"老师\").text().trim()\r\n        val room = courseHtml.getElementsByAttributeValue(\r\n            \"title\",\r\n            \"教室\"\r\n        ).text().trim() + courseHtml.getElementsByAttributeValue(\"title\", \"分组\").text().trim()\r\n        val weekStr = courseHtml.getElementsByAttributeValue(\"title\", \"周次(节次)\").text().substringBefore(\"(周)\")\r\n        val weekList = weekStr.split(',')\r\n        var startWeek = 0\r\n        var endWeek = 0\r\n        var type = 0\r\n        weekList.forEach {\r\n            if (it.contains('-')) {\r\n                val weeks = it.split('-')\r\n                if (weeks.isNotEmpty()) {\r\n                    startWeek = weeks[0].toInt()\r\n                }\r\n                if (weeks.size > 1) {\r\n                    type = when {\r\n                        weeks[1].contains('单') -> 1\r\n                        weeks[1].contains('双') -> 2\r\n                        else -> 0\r\n                    }\r\n                    endWeek = weeks[1].substringBefore('(').toInt()\r\n                }\r\n            } else {\r\n                startWeek = it.substringBefore('(').toInt()\r\n                endWeek = it.substringBefore('(').toInt()\r\n            }\r\n            courseList.add(\r\n                Course(\r\n                    name = courseName, room = room,\r\n                    teacher = teacher, day = day,\r\n                    startNode = node, endNode = node + 1,\r\n                    startWeek = startWeek, endWeek = endWeek,\r\n                    type = type\r\n                )\r\n            )\r\n        }\r\n    }\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val doc = Jsoup.parse(source)\r\n        val kbtable = doc.getElementById(\"kbtable\")\r\n        val trs = kbtable.getElementsByTag(\"tr\")\r\n        try {\r\n            val ths = kbtable.getElementsByTag(\"th\")\r\n            sundayFirst =\r\n                ths.indexOfFirst { it.text().contains(\"星期日\") } < ths.indexOfFirst { it.text().contains(\"星期一\") }\r\n        } catch (e: Exception) {\r\n\r\n        }\r\n        var nodeCount = 0\r\n        for (tr in trs) {\r\n            val tds = tr.getElementsByTag(\"td\")\r\n            if (tds.isEmpty()) {\r\n                continue\r\n            }\r\n            nodeCount++\r\n\r\n            var day = 0\r\n\r\n            for (td in tds) {\r\n                day++\r\n                val divs = td.getElementsByTag(\"div\")\r\n                for (div in divs) {\r\n                    val courseElements = div.getElementsByClass(webTableName)\r\n                    if (courseElements.text().isBlank()) {\r\n                        continue\r\n                    }\r\n                    val courseHtml = courseElements.html()\r\n                    var startIndex = 0\r\n                    var splitIndex = courseHtml.indexOf(\"-----\")\r\n                    while (splitIndex != -1) {\r\n                        convert(\r\n                            sundayFirstDayMap[day],\r\n                            nodeCount,\r\n                            courseHtml.substring(startIndex, splitIndex),\r\n                            courseList\r\n                        )\r\n                        startIndex = courseHtml.indexOf(\"<br>\", splitIndex) + 4\r\n                        splitIndex = courseHtml.indexOf(\"-----\", startIndex)\r\n                    }\r\n                    convert(\r\n                        sundayFirstDayMap[day],\r\n                        nodeCount,\r\n                        courseHtml.substring(startIndex, courseHtml.length),\r\n                        courseList\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/qz/QzParser.kt b/src/main/java/parser/qz/QzParser.kt
--- a/src/main/java/parser/qz/QzParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/qz/QzParser.kt	(date 1745507183651)
@@ -4,7 +4,7 @@
 import org.jsoup.Jsoup
 import parser.Parser
 
-open class QzParser(source: String) : Parser(source) {
+open class QzParser(source: String) : Parser() {
 
     private val sundayFirstDayMap = arrayOf(0, 7, 1, 2, 3, 4, 5, 6)
     private var sundayFirst = false
@@ -48,11 +48,11 @@
             }
             courseList.add(
                 Course(
-                    name = courseName, room = room,
-                    teacher = teacher, day = day,
+                    name = courseName, day = day,
+                    room = room, teacher = teacher,
                     startNode = node, endNode = node + 1,
                     startWeek = startWeek, endWeek = endWeek,
-                    type = type
+                    type = type,
                 )
             )
         }
Index: src/main/java/parser/qz/Qz2017Parser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser.qz\r\n\r\nimport Common\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\nimport parser.Parser\r\nimport java.io.File\r\n\r\n// 华南农业大学\r\nclass Qz2017Parser(source: String) : Parser(source) {\r\n\r\n    private val sundayFirstDayMap = arrayOf(7, 1, 2, 3, 4, 5, 6)\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        val doc = Jsoup.parse(source)\r\n        val header = doc.getElementsByClass(\"el-table__header\").first().getElementsByTag(\"div\")\r\n        val sundayFirst =\r\n            header.indexOfFirst { it.text().contains(\"星期日\") } < header.indexOfFirst { it.text().contains(\"星期一\") }\r\n        val trs = doc.getElementsByClass(\"el-table__body\").first()\r\n            .getElementsByTag(\"tbody\").first()\r\n            .getElementsByTag(\"tr\")\r\n        var courseName: String\r\n        var teacher: String\r\n        var room: String\r\n        var timeInfo: String\r\n        var start: Int\r\n        var end: Int\r\n        var type = 0\r\n        var startWeek = 1\r\n        var endWeek = 20\r\n        trs.forEachIndexed { nodeIndex, tr ->\r\n            tr.select(\".cell[style=text-align: center;]\").forEachIndexed { dayIndex, cell ->\r\n                cell.children().forEach {\r\n                    val children = it.children()\r\n                    val weekIndex = children.indexOfLast { item ->\r\n                        Common.weekPattern2.containsMatchIn(item.text())\r\n                    }\r\n                    courseName = it.child(weekIndex - 3).text().trim()\r\n                    teacher = it.child(weekIndex - 2).text().trim()\r\n                    room = it.child(weekIndex + 1).text().trim()\r\n                    timeInfo = it.child(weekIndex).text().trim()\r\n                    start = nodeIndex * 2 + 1\r\n                    end = if (start != ((trs.size - 1) * 2 + 1)) start + 1 else start + 2\r\n                    Common.nodePattern2.find(timeInfo)?.let { eNode ->\r\n                        eNode.groups[1]?.value?.let { str ->\r\n                            if (str.contains('-')) {\r\n                                val lst = str.split('-')\r\n                                try {\r\n                                    start = lst[0].toInt()\r\n                                    end = lst[1].toInt()\r\n                                } catch (e: Exception) {\r\n                                }\r\n                            } else {\r\n                                try {\r\n                                    start = str.toInt()\r\n                                    end = str.toInt()\r\n                                } catch (e: Exception) {\r\n                                }\r\n                            }\r\n                            timeInfo = timeInfo.substringAfter('节')\r\n                        }\r\n                    }\r\n                    type = when {\r\n                        timeInfo.contains('单') -> 1\r\n                        timeInfo.contains('双') -> 2\r\n                        timeInfo.contains(\"单双\") -> 0\r\n                        else -> 0\r\n                    }\r\n                    timeInfo.substringAfter('(').substringBefore('周').split(',').forEach { week ->\r\n                        if (week.contains('-')) {\r\n                            val weeks = week.trim().split('-')\r\n                            startWeek = weeks[0].trim().toInt()\r\n                            endWeek = weeks[1].trim().toInt()\r\n                        } else {\r\n                            try {\r\n                                startWeek = week.trim().toInt()\r\n                                endWeek = startWeek\r\n                            } catch (e: Exception) {\r\n                                startWeek = 1\r\n                                endWeek = 20\r\n                            }\r\n                        }\r\n                        courseList.add(\r\n                            Course(\r\n                                name = courseName,\r\n                                day = if (sundayFirst) sundayFirstDayMap[dayIndex] else dayIndex + 1,\r\n                                room = room,\r\n                                teacher = teacher, startNode = start, endNode = end,\r\n                                startWeek = startWeek, endWeek = endWeek, type = type\r\n                            )\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n\r\n}\r\n\r\nfun main() {\r\n    File(\"/Users/yzune/Downloads/强智2017.txt\").readLines().forEach {\r\n        println(it)\r\n        val source = File(\"/Users/yzune/YZune_Git/database/python/$it\").readText()\r\n        Qz2017Parser(source).saveCourse()\r\n        println()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/qz/Qz2017Parser.kt b/src/main/java/parser/qz/Qz2017Parser.kt
--- a/src/main/java/parser/qz/Qz2017Parser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/qz/Qz2017Parser.kt	(date 1745507183777)
@@ -7,7 +7,7 @@
 import java.io.File
 
 // 华南农业大学
-class Qz2017Parser(source: String) : Parser(source) {
+class Qz2017Parser(source: String) : Parser() {
 
     private val sundayFirstDayMap = arrayOf(7, 1, 2, 3, 4, 5, 6)
 
@@ -87,7 +87,7 @@
                                 day = if (sundayFirst) sundayFirstDayMap[dayIndex] else dayIndex + 1,
                                 room = room,
                                 teacher = teacher, startNode = start, endNode = end,
-                                startWeek = startWeek, endWeek = endWeek, type = type
+                                startWeek = startWeek, endWeek = endWeek, type = type,
                             )
                         )
                     }
Index: src/main/java/parser/qz/QzWithNodeParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package parser.qz\r\n\r\nimport bean.Course\r\nimport org.jsoup.Jsoup\r\n\r\nclass QzWithNodeParser(source: String) : QzParser(source) {\r\n\r\n    override fun convert(day: Int, nodeCount: Int, infoStr: String, courseList: MutableList<Course>) {\r\n        val courseHtml = Jsoup.parse(infoStr)\r\n        val courseName = Jsoup.parse(infoStr.substringBefore(\"<br>\").substringBefore(\"<font\")).text().trim()\r\n        val teacher = courseHtml.getElementsByAttributeValue(\"title\", \"老师\").text().trim()\r\n        val room = courseHtml.getElementsByAttributeValue(\r\n            \"title\",\r\n            \"教室\"\r\n        ).text().trim() + courseHtml.getElementsByAttributeValue(\"title\", \"分组\").text().trim()\r\n        val tempStr = courseHtml.getElementsByAttributeValue(\"title\", \"周次(节次)\").text()\r\n        val weekStr = when {\r\n            tempStr.contains(' ') -> courseHtml.getElementsByAttributeValue(\"title\", \"周次(节次)\").text().split(' ')[0]\r\n            tempStr.isBlank() -> courseHtml.getElementsByAttributeValue(\"title\", \"周次\").text()\r\n            else -> courseHtml.getElementsByAttributeValue(\"title\", \"周次(节次)\").text().substringBefore(')')\r\n        }\r\n        val nodeList = when {\r\n            tempStr.contains(' ') -> courseHtml.getElementsByAttributeValue(\r\n                \"title\",\r\n                \"周次(节次)\"\r\n            ).text().split(' ')[1].removeSurrounding(\"[\", \"]\").split('-')\r\n            tempStr.isBlank() -> courseHtml.getElementsByAttributeValue(\r\n                \"title\",\r\n                \"节次\"\r\n            ).text().substringAfter(')').removeSurrounding(\"[\", \"]\").split('-')\r\n            else -> courseHtml.getElementsByAttributeValue(\r\n                \"title\",\r\n                \"周次(节次)\"\r\n            ).text().substringAfter(')').removeSurrounding(\"[\", \"]\").split('-')\r\n        }\r\n        val weekList = weekStr.split(',')\r\n        var startWeek = 0\r\n        var endWeek = 0\r\n        var type = 0\r\n        weekList.forEach {\r\n            if (it.contains('-')) {\r\n                val weeks = it.split('-')\r\n                if (weeks.isNotEmpty()) {\r\n                    startWeek = weeks[0].toInt()\r\n                }\r\n                if (weeks.size > 1) {\r\n                    type = when {\r\n                        weeks[1].contains('单') -> 1\r\n                        weeks[1].contains('双') -> 2\r\n                        else -> 0\r\n                    }\r\n                    endWeek = weeks[1].substringBefore('(').toInt()\r\n                }\r\n            } else {\r\n                startWeek = it.substringBefore('(').toInt()\r\n                endWeek = it.substringBefore('(').toInt()\r\n            }\r\n            var startNode = nodeList.first().substringBefore('节').toInt()\r\n            var endNode = nodeList.last().substringBefore('节').toInt()\r\n            if (startNode > 99) {\r\n                val str = nodeList[0].substringBefore('节').trim()\r\n                startNode = str.substring(0, 2).toInt()\r\n                endNode = str.substring(str.length - 2, str.length).toInt()\r\n            }\r\n            courseList.add(\r\n                Course(\r\n                    name = courseName, teacher = teacher,\r\n                    room = room, day = day,\r\n                    startNode = startNode,\r\n                    endNode = endNode,\r\n                    startWeek = startWeek, endWeek = endWeek,\r\n                    type = type\r\n                )\r\n            )\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/qz/QzWithNodeParser.kt b/src/main/java/parser/qz/QzWithNodeParser.kt
--- a/src/main/java/parser/qz/QzWithNodeParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/qz/QzWithNodeParser.kt	(date 1745494732156)
@@ -64,12 +64,12 @@
             }
             courseList.add(
                 Course(
-                    name = courseName, teacher = teacher,
-                    room = room, day = day,
+                    name = courseName, day = day,
+                    room = room, teacher = teacher,
                     startNode = startNode,
                     endNode = endNode,
                     startWeek = startWeek, endWeek = endWeek,
-                    type = type
+                    type = type,
                 )
             )
         }
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_23\" default=\"true\" project-jdk-name=\"ms-17\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/.idea/misc.xml	(date 1745505956734)
@@ -1,6 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_23" default="true" project-jdk-name="ms-17" project-jdk-type="JavaSDK">
+  <component name="ExcludeFromValidation">
+    <file url="file://$PROJECT_DIR$/src/main/java/parser/AHNUParser.kt" />
+    <file url="file://$PROJECT_DIR$/src/main/java/parser/GZHUYJSParser.kt" />
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="ms-17" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
--- a/.idea/vcs.xml	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/.idea/vcs.xml	(date 1745512914778)
@@ -2,5 +2,6 @@
 <project version="4">
   <component name="VcsDirectoryMappings">
     <mapping directory="$PROJECT_DIR$" vcs="Git" />
+    <mapping directory="$PROJECT_DIR$/CourseAdapter" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
Index: src/main/java/parser/supwisdom/SupwisdomParser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.parser.supwisdom\r\n\r\nimport Common\r\nimport bean.Course\r\nimport bean.WeekBean\r\nimport com.google.gson.JsonParser\r\nimport parser.Parser\r\nimport java.io.File\r\n\r\n// 西安工业大学\r\n// 西北政法大学\r\n// 大连海事大学\r\n// 天津农学院\r\n// 辽宁工程技术大学\r\n// 重庆医科大学\r\n// 山东商业职业技术学院\r\nopen class SupwisdomParser(source: String) : Parser(source) {\r\n\r\n    open fun getGroup(a: List<String>): String {\r\n        return if (a.size < 7) {\r\n            \"\"\r\n        } else if (a.size == 11) {\r\n            a[8]\r\n        } else {\r\n            a[6]\r\n        }\r\n    }\r\n\r\n    open fun getCourseName(a: List<String>, groupName: String): String {\r\n        return if (groupName.isNotBlank()) {\r\n            a[1].substringBeforeLast('(').substringBeforeLast('[') + \"(${groupName.removeSuffix(\"组\")}组)\"\r\n        } else {\r\n            a[1].substringBeforeLast('(').substringBeforeLast('[')\r\n        }\r\n    }\r\n\r\n    open fun getTeacher(a: List<String>): String {\r\n        return \"\"\r\n    }\r\n\r\n    open fun getRoom(a: List<String>): String {\r\n        return a[3]\r\n    }\r\n\r\n    open fun getWeekStr(a: List<String>): String {\r\n        return a[4]\r\n    }\r\n\r\n    override fun generateCourseList(): List<Course> {\r\n        val courseList = arrayListOf<Course>()\r\n        var res: String = Regex(pattern = \"var activity=null;[\\\\w\\\\W]*(?=table0.marshalTable)\").find(source)!!.value\r\n        res = Regex(pattern = \"\\\\n\\\\s*\").replace(res, \"\\n\")\r\n        res = Regex(pattern = \",\\\\r*\\\\n\").replace(res, \",\")\r\n        res = Regex(pattern = \"\\\\(\\\\r*\\\\n\").replace(res, \"(\")\r\n        val foundResults = Regex(\"^.+?;\\\\W*\\$\", RegexOption.MULTILINE).findAll(res)\r\n\r\n        var courseName = \"\"\r\n        var preCourseName = \"\"\r\n        var teacher = \"\"\r\n        var room = \"\"\r\n        var weekList = mutableListOf<WeekBean>()\r\n        val pattern = Regex(\"\\\"(.*?)\\\"\")\r\n\r\n        for (findText in foundResults) {\r\n            val line = findText.value\r\n            if (line.contains(\"courseName += \")) {\r\n                courseName += line.substringAfter(\"\\\"\").substringBeforeLast(\"\\\"\")\r\n            }\r\n            if (line.contains(\"var teachers =\")) {\r\n                val teacherList = arrayListOf<String>()\r\n                JsonParser.parseString(\r\n                    line.substringAfter(\"var teachers =\").substringBeforeLast(\";\").trim()\r\n                ).asJsonArray.forEach {\r\n                    teacherList.add(it.asJsonObject[\"name\"].asString)\r\n                }\r\n                teacher = teacherList.joinToString(\", \")\r\n            }\r\n            if (line.contains(\"new TaskActivity(\")) {\r\n                val a = pattern.findAll(line).map { it.value.removeSurrounding(\"\\\"\") }.toList()\r\n                println(a)\r\n                val groupName = getGroup(a)\r\n                val tmp = getCourseName(a, groupName)\r\n                if (tmp.isNotBlank()) courseName = tmp\r\n                room = getRoom(a)\r\n                val newTeacher = getTeacher(a)\r\n                if (newTeacher.isNotBlank()) {\r\n                    teacher = newTeacher\r\n                }\r\n                val weekStr = getWeekStr(a)\r\n                val weekIntList = arrayListOf<Int>()\r\n                weekStr.forEachIndexed { index, c ->\r\n                    if (c == '1') {\r\n                        weekIntList.add(index)\r\n                    }\r\n                }\r\n                weekList = Common.weekIntList2WeekBeanList(weekIntList)\r\n            }\r\n            if (line.contains(\"index =\") && line.contains(\"*unitCount+\")) {\r\n                val timeInfo =\r\n                    line.substringAfter(\"index =\").substringBefore(\";\").split(\"*unitCount+\").map { it.toInt() }\r\n                if (courseName.isBlank()) {\r\n                    courseName = preCourseName\r\n                } else {\r\n                    preCourseName = courseName\r\n                }\r\n                weekList.forEach { week ->\r\n                    val c = Course(\r\n                        name = courseName, teacher = teacher, room = room, startNode = timeInfo[1] + 1,\r\n                        endNode = timeInfo[1] + 1, startWeek = week.start, endWeek = week.end, type = week.type,\r\n                        day = timeInfo[0] + 1\r\n                    )\r\n                    courseList.add(c)\r\n                }\r\n                courseName = \"\"\r\n            }\r\n        }\r\n        return courseList\r\n    }\r\n\r\n}\r\n\r\nfun main() {\r\n    SupwisdomParser(File(\"/Users/yzune/Downloads/商工 课程_files/商工 课程.html\").readText()).saveCourse()\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/parser/supwisdom/SupwisdomParser.kt b/src/main/java/parser/supwisdom/SupwisdomParser.kt
--- a/src/main/java/parser/supwisdom/SupwisdomParser.kt	(revision 7d91af3f1d4b452df5a7af2822d1b73322a60c84)
+++ b/src/main/java/parser/supwisdom/SupwisdomParser.kt	(date 1745507183678)
@@ -14,7 +14,7 @@
 // 辽宁工程技术大学
 // 重庆医科大学
 // 山东商业职业技术学院
-open class SupwisdomParser(source: String) : Parser(source) {
+open class SupwisdomParser(source: String) : Parser() {
 
     open fun getGroup(a: List<String>): String {
         return if (a.size < 7) {
@@ -105,9 +105,15 @@
                 }
                 weekList.forEach { week ->
                     val c = Course(
-                        name = courseName, teacher = teacher, room = room, startNode = timeInfo[1] + 1,
-                        endNode = timeInfo[1] + 1, startWeek = week.start, endWeek = week.end, type = week.type,
-                        day = timeInfo[0] + 1
+                        name = courseName,
+                        day = timeInfo[0] + 1,
+                        room = room,
+                        teacher = teacher,
+                        startNode = timeInfo[1] + 1,
+                        endNode = timeInfo[1] + 1,
+                        startWeek = week.start,
+                        endWeek = week.end,
+                        type = week.type,
                     )
                     courseList.add(c)
                 }
